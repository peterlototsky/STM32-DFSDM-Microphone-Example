
stm32DFSDMmicrophone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009348  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  080094d8  080094d8  0000a4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b68  08009b68  0000b0b0  2**0
                  CONTENTS
  4 .ARM          00000008  08009b68  08009b68  0000ab68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b70  08009b70  0000b0b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b70  08009b70  0000ab70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b74  08009b74  0000ab74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  08009b78  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d00  200000b0  08009c28  0000b0b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003db0  08009c28  0000bdb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014140  00000000  00000000  0000b0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ee1  00000000  00000000  0001f220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  00022108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e43  00000000  00000000  00023398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000290da  00000000  00000000  000241db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017f7f  00000000  00000000  0004d2b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0386  00000000  00000000  00065234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001555ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005440  00000000  00000000  00155600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0015aa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094c0 	.word	0x080094c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	080094c0 	.word	0x080094c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <start_recording_from_mic>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void start_recording_from_mic(){
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	if (!recording_audio){
 8000564:	4b13      	ldr	r3, [pc, #76]	@ (80005b4 <start_recording_from_mic+0x54>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d121      	bne.n	80005b0 <start_recording_from_mic+0x50>
		printf("Starting Recording Process\r\n");
 800056c:	4812      	ldr	r0, [pc, #72]	@ (80005b8 <start_recording_from_mic+0x58>)
 800056e:	f008 f945 	bl	80087fc <puts>
		if (f_open(&file, recordingPath, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK) {
 8000572:	4b12      	ldr	r3, [pc, #72]	@ (80005bc <start_recording_from_mic+0x5c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	220a      	movs	r2, #10
 8000578:	4619      	mov	r1, r3
 800057a:	4811      	ldr	r0, [pc, #68]	@ (80005c0 <start_recording_from_mic+0x60>)
 800057c:	f007 faee 	bl	8007b5c <f_open>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d002      	beq.n	800058c <start_recording_from_mic+0x2c>
			printf("Error opening file for writing.\n\r");
 8000586:	480f      	ldr	r0, [pc, #60]	@ (80005c4 <start_recording_from_mic+0x64>)
 8000588:	f008 f8d0 	bl	800872c <iprintf>
		}
		if (f_write(&file, header_data, sizeof(header_data), &bytesWritten) != FR_OK) {
 800058c:	4b0e      	ldr	r3, [pc, #56]	@ (80005c8 <start_recording_from_mic+0x68>)
 800058e:	222c      	movs	r2, #44	@ 0x2c
 8000590:	490e      	ldr	r1, [pc, #56]	@ (80005cc <start_recording_from_mic+0x6c>)
 8000592:	480b      	ldr	r0, [pc, #44]	@ (80005c0 <start_recording_from_mic+0x60>)
 8000594:	f007 fcaa 	bl	8007eec <f_write>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d002      	beq.n	80005a4 <start_recording_from_mic+0x44>
			printf("Error writing header to file.\n");
 800059e:	480c      	ldr	r0, [pc, #48]	@ (80005d0 <start_recording_from_mic+0x70>)
 80005a0:	f008 f92c 	bl	80087fc <puts>
		}
		recording_audio = 1;
 80005a4:	4b03      	ldr	r3, [pc, #12]	@ (80005b4 <start_recording_from_mic+0x54>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	601a      	str	r2, [r3, #0]
		start_recording_process = 0;
 80005aa:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <start_recording_from_mic+0x74>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
	}
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000290 	.word	0x20000290
 80005b8:	080094e4 	.word	0x080094e4
 80005bc:	20000000 	.word	0x20000000
 80005c0:	200029b8 	.word	0x200029b8
 80005c4:	08009500 	.word	0x08009500
 80005c8:	200039e8 	.word	0x200039e8
 80005cc:	20000004 	.word	0x20000004
 80005d0:	08009524 	.word	0x08009524
 80005d4:	200029b0 	.word	0x200029b0

080005d8 <unmount_SD_card>:
	if (fres != FR_OK) {
		return;
	}
}

void unmount_SD_card(void){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	f_mount(NULL, "", 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	4904      	ldr	r1, [pc, #16]	@ (80005f0 <unmount_SD_card+0x18>)
 80005e0:	2000      	movs	r0, #0
 80005e2:	f007 fa75 	bl	8007ad0 <f_mount>
	printf("SD Card Unmounted Successfully\r\n");
 80005e6:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <unmount_SD_card+0x1c>)
 80005e8:	f008 f908 	bl	80087fc <puts>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	08009544 	.word	0x08009544
 80005f4:	080095b4 	.word	0x080095b4

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f000 fdec 	bl	80011da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f8f7 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 fa37 	bl	8000a78 <MX_GPIO_Init>
  MX_DMA_Init();
 800060a:	f000 fa17 	bl	8000a3c <MX_DMA_Init>
  MX_DFSDM1_Init();
 800060e:	f000 f943 	bl	8000898 <MX_DFSDM1_Init>
  MX_SPI2_Init();
 8000612:	f000 f9a5 	bl	8000960 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000616:	f000 f9e1 	bl	80009dc <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800061a:	f004 fb47 	bl	8004cac <MX_FATFS_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (start_recording_process){
 800061e:	4b62      	ldr	r3, [pc, #392]	@ (80007a8 <main+0x1b0>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <main+0x32>
		  start_recording_from_mic();
 8000626:	f7ff ff9b 	bl	8000560 <start_recording_from_mic>
	  }

	  if (recording_audio){
 800062a:	4b60      	ldr	r3, [pc, #384]	@ (80007ac <main+0x1b4>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	f000 80a9 	beq.w	8000786 <main+0x18e>

		  if (finished_recording || bytes_written_to_file >= MAX_RECORDING_LENGTH){
 8000634:	4b5e      	ldr	r3, [pc, #376]	@ (80007b0 <main+0x1b8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d104      	bne.n	8000646 <main+0x4e>
 800063c:	4b5d      	ldr	r3, [pc, #372]	@ (80007b4 <main+0x1bc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a5d      	ldr	r2, [pc, #372]	@ (80007b8 <main+0x1c0>)
 8000642:	4293      	cmp	r3, r2
 8000644:	dd17      	ble.n	8000676 <main+0x7e>
			  printf("Finished Recording Audio\r\n");
 8000646:	485d      	ldr	r0, [pc, #372]	@ (80007bc <main+0x1c4>)
 8000648:	f008 f8d8 	bl	80087fc <puts>
			  recording_audio = 0;
 800064c:	4b57      	ldr	r3, [pc, #348]	@ (80007ac <main+0x1b4>)
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
			  finished_recording = 0;
 8000652:	4b57      	ldr	r3, [pc, #348]	@ (80007b0 <main+0x1b8>)
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
			  mic_half_transfer = 0;
 8000658:	4b59      	ldr	r3, [pc, #356]	@ (80007c0 <main+0x1c8>)
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
			  mic_transfer_complete = 0;
 800065e:	4b59      	ldr	r3, [pc, #356]	@ (80007c4 <main+0x1cc>)
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
			  bytes_written_to_file = 0;
 8000664:	4b53      	ldr	r3, [pc, #332]	@ (80007b4 <main+0x1bc>)
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
			  f_close(&file);
 800066a:	4857      	ldr	r0, [pc, #348]	@ (80007c8 <main+0x1d0>)
 800066c:	f007 fe50 	bl	8008310 <f_close>
			  printf("File Saved\r\n");
 8000670:	4856      	ldr	r0, [pc, #344]	@ (80007cc <main+0x1d4>)
 8000672:	f008 f8c3 	bl	80087fc <puts>
		  }

		  if(mic_half_transfer){
 8000676:	4b52      	ldr	r3, [pc, #328]	@ (80007c0 <main+0x1c8>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d03e      	beq.n	80006fc <main+0x104>
			  for (int i = 0; i < DFSDM_BUFFER_SIZE; i++){
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	e01b      	b.n	80006bc <main+0xc4>
				  recording[i] = SaturaLH((dfsdm_buffer[i] >> 8), -32768, 32767);
 8000684:	4a52      	ldr	r2, [pc, #328]	@ (80007d0 <main+0x1d8>)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800068c:	121b      	asrs	r3, r3, #8
 800068e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8000692:	db0b      	blt.n	80006ac <main+0xb4>
 8000694:	4a4e      	ldr	r2, [pc, #312]	@ (80007d0 <main+0x1d8>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800069c:	121b      	asrs	r3, r3, #8
 800069e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80006a2:	4293      	cmp	r3, r2
 80006a4:	bfa8      	it	ge
 80006a6:	4613      	movge	r3, r2
 80006a8:	b21a      	sxth	r2, r3
 80006aa:	e000      	b.n	80006ae <main+0xb6>
 80006ac:	4a49      	ldr	r2, [pc, #292]	@ (80007d4 <main+0x1dc>)
 80006ae:	494a      	ldr	r1, [pc, #296]	@ (80007d8 <main+0x1e0>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			  for (int i = 0; i < DFSDM_BUFFER_SIZE; i++){
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	3301      	adds	r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80006c2:	dbdf      	blt.n	8000684 <main+0x8c>
			  }
			  if (f_write(&file, recording, bytes_to_record, &bytesWritten) != FR_OK) {
 80006c4:	4b45      	ldr	r3, [pc, #276]	@ (80007dc <main+0x1e4>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4b45      	ldr	r3, [pc, #276]	@ (80007e0 <main+0x1e8>)
 80006ca:	4943      	ldr	r1, [pc, #268]	@ (80007d8 <main+0x1e0>)
 80006cc:	483e      	ldr	r0, [pc, #248]	@ (80007c8 <main+0x1d0>)
 80006ce:	f007 fc0d 	bl	8007eec <f_write>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d007      	beq.n	80006e8 <main+0xf0>
				  printf("Error Writing To File 1.\n");
 80006d8:	4842      	ldr	r0, [pc, #264]	@ (80007e4 <main+0x1ec>)
 80006da:	f008 f88f 	bl	80087fc <puts>
				  f_close(&file);
 80006de:	483a      	ldr	r0, [pc, #232]	@ (80007c8 <main+0x1d0>)
 80006e0:	f007 fe16 	bl	8008310 <f_close>
				  return 1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	e05a      	b.n	800079e <main+0x1a6>
			  }
			  bytes_written_to_file+= DFSDM_BUFFER_SIZE * 2;
 80006e8:	4b32      	ldr	r3, [pc, #200]	@ (80007b4 <main+0x1bc>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80006f0:	4a30      	ldr	r2, [pc, #192]	@ (80007b4 <main+0x1bc>)
 80006f2:	6013      	str	r3, [r2, #0]
			  mic_half_transfer = 0;
 80006f4:	4b32      	ldr	r3, [pc, #200]	@ (80007c0 <main+0x1c8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	e044      	b.n	8000786 <main+0x18e>
		  }
		  else if (mic_transfer_complete){
 80006fc:	4b31      	ldr	r3, [pc, #196]	@ (80007c4 <main+0x1cc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d040      	beq.n	8000786 <main+0x18e>
			  for (int i = DFSDM_BUFFER_SIZE; i < DFSDM_BUFFER_SIZE * 2; i++){
 8000704:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	e01d      	b.n	8000748 <main+0x150>
				  recording[i - DFSDM_BUFFER_SIZE] = SaturaLH((dfsdm_buffer[i] >> 8), -32768, 32767);
 800070c:	4a30      	ldr	r2, [pc, #192]	@ (80007d0 <main+0x1d8>)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000714:	121b      	asrs	r3, r3, #8
 8000716:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800071a:	db0b      	blt.n	8000734 <main+0x13c>
 800071c:	4a2c      	ldr	r2, [pc, #176]	@ (80007d0 <main+0x1d8>)
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000724:	121b      	asrs	r3, r3, #8
 8000726:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800072a:	4293      	cmp	r3, r2
 800072c:	bfa8      	it	ge
 800072e:	4613      	movge	r3, r2
 8000730:	b21a      	sxth	r2, r3
 8000732:	e000      	b.n	8000736 <main+0x13e>
 8000734:	4a27      	ldr	r2, [pc, #156]	@ (80007d4 <main+0x1dc>)
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800073c:	4926      	ldr	r1, [pc, #152]	@ (80007d8 <main+0x1e0>)
 800073e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			  for (int i = DFSDM_BUFFER_SIZE; i < DFSDM_BUFFER_SIZE * 2; i++){
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	3301      	adds	r3, #1
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800074e:	dbdd      	blt.n	800070c <main+0x114>
			  }
			  if (f_write(&file, recording, bytes_to_record, &bytesWritten) != FR_OK) {
 8000750:	4b22      	ldr	r3, [pc, #136]	@ (80007dc <main+0x1e4>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b22      	ldr	r3, [pc, #136]	@ (80007e0 <main+0x1e8>)
 8000756:	4920      	ldr	r1, [pc, #128]	@ (80007d8 <main+0x1e0>)
 8000758:	481b      	ldr	r0, [pc, #108]	@ (80007c8 <main+0x1d0>)
 800075a:	f007 fbc7 	bl	8007eec <f_write>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d007      	beq.n	8000774 <main+0x17c>
				  printf("Error Writing to File 2.\n");
 8000764:	4820      	ldr	r0, [pc, #128]	@ (80007e8 <main+0x1f0>)
 8000766:	f008 f849 	bl	80087fc <puts>
				  f_close(&file);
 800076a:	4817      	ldr	r0, [pc, #92]	@ (80007c8 <main+0x1d0>)
 800076c:	f007 fdd0 	bl	8008310 <f_close>
				  return 1;
 8000770:	2301      	movs	r3, #1
 8000772:	e014      	b.n	800079e <main+0x1a6>
			  }
			  bytes_written_to_file+= DFSDM_BUFFER_SIZE * 2;
 8000774:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <main+0x1bc>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800077c:	4a0d      	ldr	r2, [pc, #52]	@ (80007b4 <main+0x1bc>)
 800077e:	6013      	str	r3, [r2, #0]
			  mic_transfer_complete = 0;
 8000780:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <main+0x1cc>)
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
		  }
	  }

	  if (error){
 8000786:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <main+0x1f4>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	f43f af47 	beq.w	800061e <main+0x26>
		  printf("There has been an error\r\n Terminating Program\r\n");
 8000790:	4817      	ldr	r0, [pc, #92]	@ (80007f0 <main+0x1f8>)
 8000792:	f008 f833 	bl	80087fc <puts>
		  unmount_SD_card();
 8000796:	f7ff ff1f 	bl	80005d8 <unmount_SD_card>
		  return -1;
 800079a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
	  }
  }
  unmount_SD_card();
  /* USER CODE END 3 */
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200029b0 	.word	0x200029b0
 80007ac:	20000290 	.word	0x20000290
 80007b0:	20000294 	.word	0x20000294
 80007b4:	200029b4 	.word	0x200029b4
 80007b8:	0001f42b 	.word	0x0001f42b
 80007bc:	080095d4 	.word	0x080095d4
 80007c0:	200029ac 	.word	0x200029ac
 80007c4:	200029a8 	.word	0x200029a8
 80007c8:	200029b8 	.word	0x200029b8
 80007cc:	080095f0 	.word	0x080095f0
 80007d0:	20000a68 	.word	0x20000a68
 80007d4:	ffff8000 	.word	0xffff8000
 80007d8:	20000298 	.word	0x20000298
 80007dc:	20000030 	.word	0x20000030
 80007e0:	200039e8 	.word	0x200039e8
 80007e4:	080095fc 	.word	0x080095fc
 80007e8:	08009618 	.word	0x08009618
 80007ec:	2000028c 	.word	0x2000028c
 80007f0:	08009634 	.word	0x08009634

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b096      	sub	sp, #88	@ 0x58
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2244      	movs	r2, #68	@ 0x44
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f008 f802 	bl	800880c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	463b      	mov	r3, r7
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000816:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800081a:	f001 fbed 	bl	8001ff8 <HAL_PWREx_ControlVoltageScaling>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000824:	f000 f996 	bl	8000b54 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000828:	2310      	movs	r3, #16
 800082a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800082c:	2301      	movs	r3, #1
 800082e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000834:	2360      	movs	r3, #96	@ 0x60
 8000836:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000838:	2302      	movs	r3, #2
 800083a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800083c:	2301      	movs	r3, #1
 800083e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000840:	2301      	movs	r3, #1
 8000842:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000844:	2320      	movs	r3, #32
 8000846:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000848:	2307      	movs	r3, #7
 800084a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800084c:	2302      	movs	r3, #2
 800084e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000850:	2302      	movs	r3, #2
 8000852:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4618      	mov	r0, r3
 800085a:	f001 fc23 	bl	80020a4 <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000864:	f000 f976 	bl	8000b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000868:	230f      	movs	r3, #15
 800086a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086c:	2303      	movs	r3, #3
 800086e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800087c:	463b      	mov	r3, r7
 800087e:	2103      	movs	r1, #3
 8000880:	4618      	mov	r0, r3
 8000882:	f001 ffeb 	bl	800285c <HAL_RCC_ClockConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800088c:	f000 f962 	bl	8000b54 <Error_Handler>
  }
}
 8000890:	bf00      	nop
 8000892:	3758      	adds	r7, #88	@ 0x58
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 800089c:	4b2c      	ldr	r3, [pc, #176]	@ (8000950 <MX_DFSDM1_Init+0xb8>)
 800089e:	4a2d      	ldr	r2, [pc, #180]	@ (8000954 <MX_DFSDM1_Init+0xbc>)
 80008a0:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80008a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000950 <MX_DFSDM1_Init+0xb8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 80008a8:	4b29      	ldr	r3, [pc, #164]	@ (8000950 <MX_DFSDM1_Init+0xb8>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 80008ae:	4b28      	ldr	r3, [pc, #160]	@ (8000950 <MX_DFSDM1_Init+0xb8>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80008b4:	4b26      	ldr	r3, [pc, #152]	@ (8000950 <MX_DFSDM1_Init+0xb8>)
 80008b6:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80008ba:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 125;
 80008bc:	4b24      	ldr	r3, [pc, #144]	@ (8000950 <MX_DFSDM1_Init+0xb8>)
 80008be:	227d      	movs	r2, #125	@ 0x7d
 80008c0:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 80008c2:	4b23      	ldr	r3, [pc, #140]	@ (8000950 <MX_DFSDM1_Init+0xb8>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 80008c8:	4821      	ldr	r0, [pc, #132]	@ (8000950 <MX_DFSDM1_Init+0xb8>)
 80008ca:	f000 fef1 	bl	80016b0 <HAL_DFSDM_FilterInit>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80008d4:	f000 f93e 	bl	8000b54 <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80008d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <MX_DFSDM1_Init+0xc0>)
 80008da:	4a20      	ldr	r2, [pc, #128]	@ (800095c <MX_DFSDM1_Init+0xc4>)
 80008dc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 80008de:	4b1e      	ldr	r3, [pc, #120]	@ (8000958 <MX_DFSDM1_Init+0xc0>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000958 <MX_DFSDM1_Init+0xc0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 80008ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000958 <MX_DFSDM1_Init+0xc0>)
 80008ec:	2202      	movs	r2, #2
 80008ee:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008f0:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <MX_DFSDM1_Init+0xc0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008f6:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <MX_DFSDM1_Init+0xc0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008fc:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <MX_DFSDM1_Init+0xc0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000902:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <MX_DFSDM1_Init+0xc0>)
 8000904:	2200      	movs	r2, #0
 8000906:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000908:	4b13      	ldr	r3, [pc, #76]	@ (8000958 <MX_DFSDM1_Init+0xc0>)
 800090a:	2204      	movs	r2, #4
 800090c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800090e:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <MX_DFSDM1_Init+0xc0>)
 8000910:	2200      	movs	r2, #0
 8000912:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000914:	4b10      	ldr	r3, [pc, #64]	@ (8000958 <MX_DFSDM1_Init+0xc0>)
 8000916:	2201      	movs	r2, #1
 8000918:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 800091a:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <MX_DFSDM1_Init+0xc0>)
 800091c:	2200      	movs	r2, #0
 800091e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x02;
 8000920:	4b0d      	ldr	r3, [pc, #52]	@ (8000958 <MX_DFSDM1_Init+0xc0>)
 8000922:	2202      	movs	r2, #2
 8000924:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000926:	480c      	ldr	r0, [pc, #48]	@ (8000958 <MX_DFSDM1_Init+0xc0>)
 8000928:	f000 fe02 	bl	8001530 <HAL_DFSDM_ChannelInit>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000932:	f000 f90f 	bl	8000b54 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000936:	2201      	movs	r2, #1
 8000938:	2101      	movs	r1, #1
 800093a:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_DFSDM1_Init+0xb8>)
 800093c:	f000 ff92 	bl	8001864 <HAL_DFSDM_FilterConfigRegChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000946:	f000 f905 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200000cc 	.word	0x200000cc
 8000954:	40016180 	.word	0x40016180
 8000958:	20000120 	.word	0x20000120
 800095c:	40016000 	.word	0x40016000

08000960 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000964:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <MX_SPI2_Init+0x74>)
 8000966:	4a1c      	ldr	r2, [pc, #112]	@ (80009d8 <MX_SPI2_Init+0x78>)
 8000968:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800096a:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <MX_SPI2_Init+0x74>)
 800096c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000970:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000972:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <MX_SPI2_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000978:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <MX_SPI2_Init+0x74>)
 800097a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800097e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000980:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_SPI2_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000986:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <MX_SPI2_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800098c:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <MX_SPI2_Init+0x74>)
 800098e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000992:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_SPI2_Init+0x74>)
 8000996:	2208      	movs	r2, #8
 8000998:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <MX_SPI2_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <MX_SPI2_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <MX_SPI2_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009ac:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_SPI2_Init+0x74>)
 80009ae:	2207      	movs	r2, #7
 80009b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <MX_SPI2_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <MX_SPI2_Init+0x74>)
 80009ba:	2208      	movs	r2, #8
 80009bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_SPI2_Init+0x74>)
 80009c0:	f002 fe2c 	bl	800361c <HAL_SPI_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80009ca:	f000 f8c3 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200001a0 	.word	0x200001a0
 80009d8:	40003800 	.word	0x40003800

080009dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e0:	4b14      	ldr	r3, [pc, #80]	@ (8000a34 <MX_USART2_UART_Init+0x58>)
 80009e2:	4a15      	ldr	r2, [pc, #84]	@ (8000a38 <MX_USART2_UART_Init+0x5c>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009e6:	4b13      	ldr	r3, [pc, #76]	@ (8000a34 <MX_USART2_UART_Init+0x58>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_USART2_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <MX_USART2_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_USART2_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <MX_USART2_UART_Init+0x58>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	@ (8000a34 <MX_USART2_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <MX_USART2_UART_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <MX_USART2_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <MX_USART2_UART_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <MX_USART2_UART_Init+0x58>)
 8000a20:	f003 fb98 	bl	8004154 <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a2a:	f000 f893 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000204 	.word	0x20000204
 8000a38:	40004400 	.word	0x40004400

08000a3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a42:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <MX_DMA_Init+0x38>)
 8000a44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a46:	4a0b      	ldr	r2, [pc, #44]	@ (8000a74 <MX_DMA_Init+0x38>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_DMA_Init+0x38>)
 8000a50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	200f      	movs	r0, #15
 8000a60:	f000 fd2f 	bl	80014c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000a64:	200f      	movs	r0, #15
 8000a66:	f000 fd48 	bl	80014fa <HAL_NVIC_EnableIRQ>

}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40021000 	.word	0x40021000

08000a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	4b25      	ldr	r3, [pc, #148]	@ (8000b24 <MX_GPIO_Init+0xac>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a92:	4a24      	ldr	r2, [pc, #144]	@ (8000b24 <MX_GPIO_Init+0xac>)
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a9a:	4b22      	ldr	r3, [pc, #136]	@ (8000b24 <MX_GPIO_Init+0xac>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9e:	f003 0304 	and.w	r3, r3, #4
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b24 <MX_GPIO_Init+0xac>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aaa:	4a1e      	ldr	r2, [pc, #120]	@ (8000b24 <MX_GPIO_Init+0xac>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b24 <MX_GPIO_Init+0xac>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <MX_GPIO_Init+0xac>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac2:	4a18      	ldr	r2, [pc, #96]	@ (8000b24 <MX_GPIO_Init+0xac>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aca:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <MX_GPIO_Init+0xac>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ChipSelectSD_GPIO_Port, ChipSelectSD_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000adc:	4812      	ldr	r0, [pc, #72]	@ (8000b28 <MX_GPIO_Init+0xb0>)
 8000ade:	f001 fa65 	bl	8001fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userControl_Pin */
  GPIO_InitStruct.Pin = userControl_Pin;
 8000ae2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ae6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000aec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(userControl_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	4619      	mov	r1, r3
 8000af8:	480c      	ldr	r0, [pc, #48]	@ (8000b2c <MX_GPIO_Init+0xb4>)
 8000afa:	f001 f8ad 	bl	8001c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ChipSelectSD_Pin */
  GPIO_InitStruct.Pin = ChipSelectSD_Pin;
 8000afe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ChipSelectSD_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	4619      	mov	r1, r3
 8000b16:	4804      	ldr	r0, [pc, #16]	@ (8000b28 <MX_GPIO_Init+0xb0>)
 8000b18:	f001 f89e 	bl	8001c58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b1c:	bf00      	nop
 8000b1e:	3720      	adds	r7, #32
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40021000 	.word	0x40021000
 8000b28:	48000400 	.word	0x48000400
 8000b2c:	48000800 	.word	0x48000800

08000b30 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000b38:	1d39      	adds	r1, r7, #4
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4803      	ldr	r0, [pc, #12]	@ (8000b50 <__io_putchar+0x20>)
 8000b42:	f003 fb55 	bl	80041f0 <HAL_UART_Transmit>
  return ch;
 8000b46:	687b      	ldr	r3, [r7, #4]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000204 	.word	0x20000204

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <Error_Handler+0x8>

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <HAL_MspInit+0x44>)
 8000b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba4 <HAL_MspInit+0x44>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <HAL_MspInit+0x44>)
 8000b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <HAL_MspInit+0x44>)
 8000b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b82:	4a08      	ldr	r2, [pc, #32]	@ (8000ba4 <HAL_MspInit+0x44>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <HAL_MspInit+0x44>)
 8000b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b0ac      	sub	sp, #176	@ 0xb0
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2288      	movs	r2, #136	@ 0x88
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f007 fe1f 	bl	800880c <memset>
  if(DFSDM1_Init == 0)
 8000bce:	4b55      	ldr	r3, [pc, #340]	@ (8000d24 <HAL_DFSDM_FilterMspInit+0x17c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d16b      	bne.n	8000cae <HAL_DFSDM_FilterMspInit+0x106>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000bd6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bda:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4618      	mov	r0, r3
 8000be8:	f002 f85c 	bl	8002ca4 <HAL_RCCEx_PeriphCLKConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8000bf2:	f7ff ffaf 	bl	8000b54 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000bf6:	4b4c      	ldr	r3, [pc, #304]	@ (8000d28 <HAL_DFSDM_FilterMspInit+0x180>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	4a4a      	ldr	r2, [pc, #296]	@ (8000d28 <HAL_DFSDM_FilterMspInit+0x180>)
 8000bfe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000c00:	4b49      	ldr	r3, [pc, #292]	@ (8000d28 <HAL_DFSDM_FilterMspInit+0x180>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d10b      	bne.n	8000c20 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000c08:	4b48      	ldr	r3, [pc, #288]	@ (8000d2c <HAL_DFSDM_FilterMspInit+0x184>)
 8000c0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c0c:	4a47      	ldr	r2, [pc, #284]	@ (8000d2c <HAL_DFSDM_FilterMspInit+0x184>)
 8000c0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c12:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c14:	4b45      	ldr	r3, [pc, #276]	@ (8000d2c <HAL_DFSDM_FilterMspInit+0x184>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c20:	4b42      	ldr	r3, [pc, #264]	@ (8000d2c <HAL_DFSDM_FilterMspInit+0x184>)
 8000c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c24:	4a41      	ldr	r2, [pc, #260]	@ (8000d2c <HAL_DFSDM_FilterMspInit+0x184>)
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c2c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d2c <HAL_DFSDM_FilterMspInit+0x184>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c30:	f003 0304 	and.w	r3, r3, #4
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c38:	4b3c      	ldr	r3, [pc, #240]	@ (8000d2c <HAL_DFSDM_FilterMspInit+0x184>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3c:	4a3b      	ldr	r2, [pc, #236]	@ (8000d2c <HAL_DFSDM_FilterMspInit+0x184>)
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c44:	4b39      	ldr	r3, [pc, #228]	@ (8000d2c <HAL_DFSDM_FilterMspInit+0x184>)
 8000c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c48:	f003 0302 	and.w	r3, r3, #2
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PB1     ------> DFSDM1_DATIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c50:	2304      	movs	r3, #4
 8000c52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000c68:	2306      	movs	r3, #6
 8000c6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c72:	4619      	mov	r1, r3
 8000c74:	482e      	ldr	r0, [pc, #184]	@ (8000d30 <HAL_DFSDM_FilterMspInit+0x188>)
 8000c76:	f000 ffef 	bl	8001c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000c92:	2306      	movs	r3, #6
 8000c94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c98:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4825      	ldr	r0, [pc, #148]	@ (8000d34 <HAL_DFSDM_FilterMspInit+0x18c>)
 8000ca0:	f000 ffda 	bl	8001c58 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d24 <HAL_DFSDM_FilterMspInit+0x17c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	4a1e      	ldr	r2, [pc, #120]	@ (8000d24 <HAL_DFSDM_FilterMspInit+0x17c>)
 8000cac:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT1 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter1){
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a21      	ldr	r2, [pc, #132]	@ (8000d38 <HAL_DFSDM_FilterMspInit+0x190>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d131      	bne.n	8000d1c <HAL_DFSDM_FilterMspInit+0x174>
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 8000cb8:	4b20      	ldr	r3, [pc, #128]	@ (8000d3c <HAL_DFSDM_FilterMspInit+0x194>)
 8000cba:	4a21      	ldr	r2, [pc, #132]	@ (8000d40 <HAL_DFSDM_FilterMspInit+0x198>)
 8000cbc:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_0;
 8000cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8000d3c <HAL_DFSDM_FilterMspInit+0x194>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d3c <HAL_DFSDM_FilterMspInit+0x194>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cca:	4b1c      	ldr	r3, [pc, #112]	@ (8000d3c <HAL_DFSDM_FilterMspInit+0x194>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d3c <HAL_DFSDM_FilterMspInit+0x194>)
 8000cd2:	2280      	movs	r2, #128	@ 0x80
 8000cd4:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <HAL_DFSDM_FilterMspInit+0x194>)
 8000cd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cdc:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cde:	4b17      	ldr	r3, [pc, #92]	@ (8000d3c <HAL_DFSDM_FilterMspInit+0x194>)
 8000ce0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ce4:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8000ce6:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <HAL_DFSDM_FilterMspInit+0x194>)
 8000ce8:	2220      	movs	r2, #32
 8000cea:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 8000cec:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <HAL_DFSDM_FilterMspInit+0x194>)
 8000cee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cf2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8000cf4:	4811      	ldr	r0, [pc, #68]	@ (8000d3c <HAL_DFSDM_FilterMspInit+0x194>)
 8000cf6:	f000 fe47 	bl	8001988 <HAL_DMA_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <HAL_DFSDM_FilterMspInit+0x15c>
    {
      Error_Handler();
 8000d00:	f7ff ff28 	bl	8000b54 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt1);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a0d      	ldr	r2, [pc, #52]	@ (8000d3c <HAL_DFSDM_FilterMspInit+0x194>)
 8000d08:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d3c <HAL_DFSDM_FilterMspInit+0x194>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt1);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <HAL_DFSDM_FilterMspInit+0x194>)
 8000d14:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d16:	4a09      	ldr	r2, [pc, #36]	@ (8000d3c <HAL_DFSDM_FilterMspInit+0x194>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6293      	str	r3, [r2, #40]	@ 0x28
  }

}
 8000d1c:	bf00      	nop
 8000d1e:	37b0      	adds	r7, #176	@ 0xb0
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	200039f0 	.word	0x200039f0
 8000d28:	200039ec 	.word	0x200039ec
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	48000800 	.word	0x48000800
 8000d34:	48000400 	.word	0x48000400
 8000d38:	40016180 	.word	0x40016180
 8000d3c:	20000158 	.word	0x20000158
 8000d40:	40020058 	.word	0x40020058

08000d44 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b0ac      	sub	sp, #176	@ 0xb0
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2288      	movs	r2, #136	@ 0x88
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f007 fd51 	bl	800880c <memset>
  if(DFSDM1_Init == 0)
 8000d6a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e54 <HAL_DFSDM_ChannelMspInit+0x110>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d16b      	bne.n	8000e4a <HAL_DFSDM_ChannelMspInit+0x106>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000d72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d76:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4618      	mov	r0, r3
 8000d84:	f001 ff8e 	bl	8002ca4 <HAL_RCCEx_PeriphCLKConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000d8e:	f7ff fee1 	bl	8000b54 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000d92:	4b31      	ldr	r3, [pc, #196]	@ (8000e58 <HAL_DFSDM_ChannelMspInit+0x114>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	3301      	adds	r3, #1
 8000d98:	4a2f      	ldr	r2, [pc, #188]	@ (8000e58 <HAL_DFSDM_ChannelMspInit+0x114>)
 8000d9a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000d9c:	4b2e      	ldr	r3, [pc, #184]	@ (8000e58 <HAL_DFSDM_ChannelMspInit+0x114>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d10b      	bne.n	8000dbc <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000da4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e5c <HAL_DFSDM_ChannelMspInit+0x118>)
 8000da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000da8:	4a2c      	ldr	r2, [pc, #176]	@ (8000e5c <HAL_DFSDM_ChannelMspInit+0x118>)
 8000daa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000dae:	6613      	str	r3, [r2, #96]	@ 0x60
 8000db0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e5c <HAL_DFSDM_ChannelMspInit+0x118>)
 8000db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000db4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbc:	4b27      	ldr	r3, [pc, #156]	@ (8000e5c <HAL_DFSDM_ChannelMspInit+0x118>)
 8000dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc0:	4a26      	ldr	r2, [pc, #152]	@ (8000e5c <HAL_DFSDM_ChannelMspInit+0x118>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc8:	4b24      	ldr	r3, [pc, #144]	@ (8000e5c <HAL_DFSDM_ChannelMspInit+0x118>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd4:	4b21      	ldr	r3, [pc, #132]	@ (8000e5c <HAL_DFSDM_ChannelMspInit+0x118>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd8:	4a20      	ldr	r2, [pc, #128]	@ (8000e5c <HAL_DFSDM_ChannelMspInit+0x118>)
 8000dda:	f043 0302 	orr.w	r3, r3, #2
 8000dde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e5c <HAL_DFSDM_ChannelMspInit+0x118>)
 8000de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PB1     ------> DFSDM1_DATIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dec:	2304      	movs	r3, #4
 8000dee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e04:	2306      	movs	r3, #6
 8000e06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4813      	ldr	r0, [pc, #76]	@ (8000e60 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000e12:	f000 ff21 	bl	8001c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e16:	2302      	movs	r3, #2
 8000e18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e2e:	2306      	movs	r3, #6
 8000e30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e34:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480a      	ldr	r0, [pc, #40]	@ (8000e64 <HAL_DFSDM_ChannelMspInit+0x120>)
 8000e3c:	f000 ff0c 	bl	8001c58 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000e40:	4b04      	ldr	r3, [pc, #16]	@ (8000e54 <HAL_DFSDM_ChannelMspInit+0x110>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	4a03      	ldr	r2, [pc, #12]	@ (8000e54 <HAL_DFSDM_ChannelMspInit+0x110>)
 8000e48:	6013      	str	r3, [r2, #0]
  }

}
 8000e4a:	bf00      	nop
 8000e4c:	37b0      	adds	r7, #176	@ 0xb0
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200039f0 	.word	0x200039f0
 8000e58:	200039ec 	.word	0x200039ec
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	48000800 	.word	0x48000800
 8000e64:	48000400 	.word	0x48000400

08000e68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	@ 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a17      	ldr	r2, [pc, #92]	@ (8000ee4 <HAL_SPI_MspInit+0x7c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d128      	bne.n	8000edc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ee8 <HAL_SPI_MspInit+0x80>)
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e8e:	4a16      	ldr	r2, [pc, #88]	@ (8000ee8 <HAL_SPI_MspInit+0x80>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e94:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e96:	4b14      	ldr	r3, [pc, #80]	@ (8000ee8 <HAL_SPI_MspInit+0x80>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <HAL_SPI_MspInit+0x80>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea6:	4a10      	ldr	r2, [pc, #64]	@ (8000ee8 <HAL_SPI_MspInit+0x80>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <HAL_SPI_MspInit+0x80>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000eba:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ecc:	2305      	movs	r3, #5
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4805      	ldr	r0, [pc, #20]	@ (8000eec <HAL_SPI_MspInit+0x84>)
 8000ed8:	f000 febe 	bl	8001c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000edc:	bf00      	nop
 8000ede:	3728      	adds	r7, #40	@ 0x28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40003800 	.word	0x40003800
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	48000400 	.word	0x48000400

08000ef0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0ac      	sub	sp, #176	@ 0xb0
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2288      	movs	r2, #136	@ 0x88
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f007 fc7b 	bl	800880c <memset>
  if(huart->Instance==USART2)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a21      	ldr	r2, [pc, #132]	@ (8000fa0 <HAL_UART_MspInit+0xb0>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d13b      	bne.n	8000f98 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f20:	2302      	movs	r3, #2
 8000f22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f001 feb9 	bl	8002ca4 <HAL_RCCEx_PeriphCLKConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f38:	f7ff fe0c 	bl	8000b54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f3c:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <HAL_UART_MspInit+0xb4>)
 8000f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f40:	4a18      	ldr	r2, [pc, #96]	@ (8000fa4 <HAL_UART_MspInit+0xb4>)
 8000f42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f46:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f48:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <HAL_UART_MspInit+0xb4>)
 8000f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <HAL_UART_MspInit+0xb4>)
 8000f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f58:	4a12      	ldr	r2, [pc, #72]	@ (8000fa4 <HAL_UART_MspInit+0xb4>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f60:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <HAL_UART_MspInit+0xb4>)
 8000f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f6c:	230c      	movs	r3, #12
 8000f6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f84:	2307      	movs	r3, #7
 8000f86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f94:	f000 fe60 	bl	8001c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f98:	bf00      	nop
 8000f9a:	37b0      	adds	r7, #176	@ 0xb0
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40004400 	.word	0x40004400
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <NMI_Handler+0x4>

08000fb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <HardFault_Handler+0x4>

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <MemManage_Handler+0x4>

08000fc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ffe:	f000 f941 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 800100c:	4802      	ldr	r0, [pc, #8]	@ (8001018 <DMA1_Channel5_IRQHandler+0x10>)
 800100e:	f000 fd73 	bl	8001af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000158 	.word	0x20000158

0800101c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	e00a      	b.n	8001044 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800102e:	f3af 8000 	nop.w
 8001032:	4601      	mov	r1, r0
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	60ba      	str	r2, [r7, #8]
 800103a:	b2ca      	uxtb	r2, r1
 800103c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3301      	adds	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	429a      	cmp	r2, r3
 800104a:	dbf0      	blt.n	800102e <_read+0x12>
  }

  return len;
 800104c:	687b      	ldr	r3, [r7, #4]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	60f8      	str	r0, [r7, #12]
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	e009      	b.n	800107c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	60ba      	str	r2, [r7, #8]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fd5d 	bl	8000b30 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	429a      	cmp	r2, r3
 8001082:	dbf1      	blt.n	8001068 <_write+0x12>
  }
  return len;
 8001084:	687b      	ldr	r3, [r7, #4]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_close>:

int _close(int file)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010b6:	605a      	str	r2, [r3, #4]
  return 0;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <_isatty>:

int _isatty(int file)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001100:	4a14      	ldr	r2, [pc, #80]	@ (8001154 <_sbrk+0x5c>)
 8001102:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <_sbrk+0x60>)
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800110c:	4b13      	ldr	r3, [pc, #76]	@ (800115c <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d102      	bne.n	800111a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001114:	4b11      	ldr	r3, [pc, #68]	@ (800115c <_sbrk+0x64>)
 8001116:	4a12      	ldr	r2, [pc, #72]	@ (8001160 <_sbrk+0x68>)
 8001118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111a:	4b10      	ldr	r3, [pc, #64]	@ (800115c <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	429a      	cmp	r2, r3
 8001126:	d207      	bcs.n	8001138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001128:	f007 fb78 	bl	800881c <__errno>
 800112c:	4603      	mov	r3, r0
 800112e:	220c      	movs	r2, #12
 8001130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001132:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001136:	e009      	b.n	800114c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001138:	4b08      	ldr	r3, [pc, #32]	@ (800115c <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113e:	4b07      	ldr	r3, [pc, #28]	@ (800115c <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	4a05      	ldr	r2, [pc, #20]	@ (800115c <_sbrk+0x64>)
 8001148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20018000 	.word	0x20018000
 8001158:	00000400 	.word	0x00000400
 800115c:	200039f4 	.word	0x200039f4
 8001160:	20003db0 	.word	0x20003db0

08001164 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <SystemInit+0x20>)
 800116a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800116e:	4a05      	ldr	r2, [pc, #20]	@ (8001184 <SystemInit+0x20>)
 8001170:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001174:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001188:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800118c:	f7ff ffea 	bl	8001164 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001190:	480c      	ldr	r0, [pc, #48]	@ (80011c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001192:	490d      	ldr	r1, [pc, #52]	@ (80011c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001194:	4a0d      	ldr	r2, [pc, #52]	@ (80011cc <LoopForever+0xe>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001198:	e002      	b.n	80011a0 <LoopCopyDataInit>

0800119a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800119c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119e:	3304      	adds	r3, #4

080011a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a4:	d3f9      	bcc.n	800119a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a6:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011a8:	4c0a      	ldr	r4, [pc, #40]	@ (80011d4 <LoopForever+0x16>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ac:	e001      	b.n	80011b2 <LoopFillZerobss>

080011ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b0:	3204      	adds	r2, #4

080011b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b4:	d3fb      	bcc.n	80011ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011b6:	f007 fb37 	bl	8008828 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ba:	f7ff fa1d 	bl	80005f8 <main>

080011be <LoopForever>:

LoopForever:
    b LoopForever
 80011be:	e7fe      	b.n	80011be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c8:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80011cc:	08009b78 	.word	0x08009b78
  ldr r2, =_sbss
 80011d0:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80011d4:	20003db0 	.word	0x20003db0

080011d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC1_2_IRQHandler>

080011da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f000 f961 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ea:	200f      	movs	r0, #15
 80011ec:	f000 f80e 	bl	800120c <HAL_InitTick>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d002      	beq.n	80011fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	71fb      	strb	r3, [r7, #7]
 80011fa:	e001      	b.n	8001200 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011fc:	f7ff fcb0 	bl	8000b60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001200:	79fb      	ldrb	r3, [r7, #7]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001218:	4b17      	ldr	r3, [pc, #92]	@ (8001278 <HAL_InitTick+0x6c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d023      	beq.n	8001268 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001220:	4b16      	ldr	r3, [pc, #88]	@ (800127c <HAL_InitTick+0x70>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <HAL_InitTick+0x6c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001232:	fbb2 f3f3 	udiv	r3, r2, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f96d 	bl	8001516 <HAL_SYSTICK_Config>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10f      	bne.n	8001262 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d809      	bhi.n	800125c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001250:	f000 f937 	bl	80014c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001254:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <HAL_InitTick+0x74>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	e007      	b.n	800126c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	e004      	b.n	800126c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	73fb      	strb	r3, [r7, #15]
 8001266:	e001      	b.n	800126c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800126c:	7bfb      	ldrb	r3, [r7, #15]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000003c 	.word	0x2000003c
 800127c:	20000034 	.word	0x20000034
 8001280:	20000038 	.word	0x20000038

08001284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_IncTick+0x20>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <HAL_IncTick+0x24>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a04      	ldr	r2, [pc, #16]	@ (80012a8 <HAL_IncTick+0x24>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	2000003c 	.word	0x2000003c
 80012a8:	200039f8 	.word	0x200039f8

080012ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b03      	ldr	r3, [pc, #12]	@ (80012c0 <HAL_GetTick+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	200039f8 	.word	0x200039f8

080012c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012cc:	f7ff ffee 	bl	80012ac <HAL_GetTick>
 80012d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80012dc:	d005      	beq.n	80012ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012de:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <HAL_Delay+0x44>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ea:	bf00      	nop
 80012ec:	f7ff ffde 	bl	80012ac <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d8f7      	bhi.n	80012ec <HAL_Delay+0x28>
  {
  }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000003c 	.word	0x2000003c

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800133c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133e:	4a04      	ldr	r2, [pc, #16]	@ (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	60d3      	str	r3, [r2, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	@ (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db0b      	blt.n	800139a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 021f 	and.w	r2, r3, #31
 8001388:	4907      	ldr	r1, [pc, #28]	@ (80013a8 <__NVIC_EnableIRQ+0x38>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	2001      	movs	r0, #1
 8001392:	fa00 f202 	lsl.w	r2, r0, r2
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000e100 	.word	0xe000e100

080013ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db0a      	blt.n	80013d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	490c      	ldr	r1, [pc, #48]	@ (80013f8 <__NVIC_SetPriority+0x4c>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d4:	e00a      	b.n	80013ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4908      	ldr	r1, [pc, #32]	@ (80013fc <__NVIC_SetPriority+0x50>)
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	3b04      	subs	r3, #4
 80013e4:	0112      	lsls	r2, r2, #4
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	761a      	strb	r2, [r3, #24]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000e100 	.word	0xe000e100
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	@ 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f1c3 0307 	rsb	r3, r3, #7
 800141a:	2b04      	cmp	r3, #4
 800141c:	bf28      	it	cs
 800141e:	2304      	movcs	r3, #4
 8001420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3304      	adds	r3, #4
 8001426:	2b06      	cmp	r3, #6
 8001428:	d902      	bls.n	8001430 <NVIC_EncodePriority+0x30>
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b03      	subs	r3, #3
 800142e:	e000      	b.n	8001432 <NVIC_EncodePriority+0x32>
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001448:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43d9      	mvns	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	4313      	orrs	r3, r2
         );
}
 800145a:	4618      	mov	r0, r3
 800145c:	3724      	adds	r7, #36	@ 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001478:	d301      	bcc.n	800147e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147a:	2301      	movs	r3, #1
 800147c:	e00f      	b.n	800149e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147e:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <SysTick_Config+0x40>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001486:	210f      	movs	r1, #15
 8001488:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800148c:	f7ff ff8e 	bl	80013ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001490:	4b05      	ldr	r3, [pc, #20]	@ (80014a8 <SysTick_Config+0x40>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001496:	4b04      	ldr	r3, [pc, #16]	@ (80014a8 <SysTick_Config+0x40>)
 8001498:	2207      	movs	r2, #7
 800149a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	e000e010 	.word	0xe000e010

080014ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff29 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014d4:	f7ff ff3e 	bl	8001354 <__NVIC_GetPriorityGrouping>
 80014d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	6978      	ldr	r0, [r7, #20]
 80014e0:	f7ff ff8e 	bl	8001400 <NVIC_EncodePriority>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff5d 	bl	80013ac <__NVIC_SetPriority>
}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff31 	bl	8001370 <__NVIC_EnableIRQ>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ffa2 	bl	8001468 <SysTick_Config>
 8001524:	4603      	mov	r3, r0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e0ac      	b.n	800169c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f9d2 	bl	80018f0 <DFSDM_GetChannelFromInstance>
 800154c:	4603      	mov	r3, r0
 800154e:	4a55      	ldr	r2, [pc, #340]	@ (80016a4 <HAL_DFSDM_ChannelInit+0x174>)
 8001550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e09f      	b.n	800169c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fbf1 	bl	8000d44 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001562:	4b51      	ldr	r3, [pc, #324]	@ (80016a8 <HAL_DFSDM_ChannelInit+0x178>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	3301      	adds	r3, #1
 8001568:	4a4f      	ldr	r2, [pc, #316]	@ (80016a8 <HAL_DFSDM_ChannelInit+0x178>)
 800156a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800156c:	4b4e      	ldr	r3, [pc, #312]	@ (80016a8 <HAL_DFSDM_ChannelInit+0x178>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d125      	bne.n	80015c0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001574:	4b4d      	ldr	r3, [pc, #308]	@ (80016ac <HAL_DFSDM_ChannelInit+0x17c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a4c      	ldr	r2, [pc, #304]	@ (80016ac <HAL_DFSDM_ChannelInit+0x17c>)
 800157a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800157e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001580:	4b4a      	ldr	r3, [pc, #296]	@ (80016ac <HAL_DFSDM_ChannelInit+0x17c>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	4948      	ldr	r1, [pc, #288]	@ (80016ac <HAL_DFSDM_ChannelInit+0x17c>)
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800158e:	4b47      	ldr	r3, [pc, #284]	@ (80016ac <HAL_DFSDM_ChannelInit+0x17c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a46      	ldr	r2, [pc, #280]	@ (80016ac <HAL_DFSDM_ChannelInit+0x17c>)
 8001594:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001598:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	791b      	ldrb	r3, [r3, #4]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d108      	bne.n	80015b4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80015a2:	4b42      	ldr	r3, [pc, #264]	@ (80016ac <HAL_DFSDM_ChannelInit+0x17c>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	041b      	lsls	r3, r3, #16
 80015ae:	493f      	ldr	r1, [pc, #252]	@ (80016ac <HAL_DFSDM_ChannelInit+0x17c>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80015b4:	4b3d      	ldr	r3, [pc, #244]	@ (80016ac <HAL_DFSDM_ChannelInit+0x17c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a3c      	ldr	r2, [pc, #240]	@ (80016ac <HAL_DFSDM_ChannelInit+0x17c>)
 80015ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80015be:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80015ce:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6819      	ldr	r1, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80015de:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80015e4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 020f 	bic.w	r2, r2, #15
 80015fc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6819      	ldr	r1, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001624:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6899      	ldr	r1, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001634:	3b01      	subs	r3, #1
 8001636:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f002 0207 	and.w	r2, r2, #7
 8001650:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6859      	ldr	r1, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800165c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001664:	431a      	orrs	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800167c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f930 	bl	80018f0 <DFSDM_GetChannelFromInstance>
 8001690:	4602      	mov	r2, r0
 8001692:	4904      	ldr	r1, [pc, #16]	@ (80016a4 <HAL_DFSDM_ChannelInit+0x174>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20003a00 	.word	0x20003a00
 80016a8:	200039fc 	.word	0x200039fc
 80016ac:	40016000 	.word	0x40016000

080016b0 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e0ca      	b.n	8001858 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a66      	ldr	r2, [pc, #408]	@ (8001860 <HAL_DFSDM_FilterInit+0x1b0>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d109      	bne.n	80016e0 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d003      	beq.n	80016dc <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d101      	bne.n	80016e0 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0bb      	b.n	8001858 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fa55 	bl	8000ba8 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 800170c:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7a1b      	ldrb	r3, [r3, #8]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d108      	bne.n	8001728 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	e007      	b.n	8001738 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8001736:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	7a5b      	ldrb	r3, [r3, #9]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d108      	bne.n	8001752 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	e007      	b.n	8001762 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001760:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	f423 43ce 	bic.w	r3, r3, #26368	@ 0x6700
 8001770:	f023 0308 	bic.w	r3, r3, #8
 8001774:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d108      	bne.n	8001790 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6819      	ldr	r1, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	695a      	ldr	r2, [r3, #20]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	7c1b      	ldrb	r3, [r3, #16]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d108      	bne.n	80017aa <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0210 	orr.w	r2, r2, #16
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	e007      	b.n	80017ba <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0210 	bic.w	r2, r2, #16
 80017b8:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7c5b      	ldrb	r3, [r3, #17]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d108      	bne.n	80017d4 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 0220 	orr.w	r2, r2, #32
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	e007      	b.n	80017e4 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0220 	bic.w	r2, r2, #32
 80017e2:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 80017f2:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 80017f6:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6959      	ldr	r1, [r3, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	3b01      	subs	r3, #1
 8001808:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800180a:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001810:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001812:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699a      	ldr	r2, [r3, #24]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7c1a      	ldrb	r2, [r3, #16]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f042 0201 	orr.w	r2, r2, #1
 800184c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40016100 	.word	0x40016100

08001864 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800187a:	2b00      	cmp	r3, #0
 800187c:	d02e      	beq.n	80018dc <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001884:	2bff      	cmp	r3, #255	@ 0xff
 8001886:	d029      	beq.n	80018dc <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	6812      	ldr	r2, [r2, #0]
 8001892:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001896:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800189a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d10d      	bne.n	80018be <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80018b0:	431a      	orrs	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	e00a      	b.n	80018d4 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6819      	ldr	r1, [r3, #0]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80018da:	e001      	b.n	80018e0 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80018e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	371c      	adds	r7, #28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a1c      	ldr	r2, [pc, #112]	@ (800196c <DFSDM_GetChannelFromInstance+0x7c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d102      	bne.n	8001906 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	e02b      	b.n	800195e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a19      	ldr	r2, [pc, #100]	@ (8001970 <DFSDM_GetChannelFromInstance+0x80>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d102      	bne.n	8001914 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800190e:	2301      	movs	r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	e024      	b.n	800195e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a17      	ldr	r2, [pc, #92]	@ (8001974 <DFSDM_GetChannelFromInstance+0x84>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d102      	bne.n	8001922 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800191c:	2302      	movs	r3, #2
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	e01d      	b.n	800195e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a14      	ldr	r2, [pc, #80]	@ (8001978 <DFSDM_GetChannelFromInstance+0x88>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d102      	bne.n	8001930 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800192a:	2304      	movs	r3, #4
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	e016      	b.n	800195e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a12      	ldr	r2, [pc, #72]	@ (800197c <DFSDM_GetChannelFromInstance+0x8c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d102      	bne.n	800193e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001938:	2305      	movs	r3, #5
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	e00f      	b.n	800195e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a0f      	ldr	r2, [pc, #60]	@ (8001980 <DFSDM_GetChannelFromInstance+0x90>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d102      	bne.n	800194c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001946:	2306      	movs	r3, #6
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	e008      	b.n	800195e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a0d      	ldr	r2, [pc, #52]	@ (8001984 <DFSDM_GetChannelFromInstance+0x94>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d102      	bne.n	800195a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001954:	2307      	movs	r3, #7
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	e001      	b.n	800195e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800195a:	2303      	movs	r3, #3
 800195c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800195e:	68fb      	ldr	r3, [r7, #12]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	40016000 	.word	0x40016000
 8001970:	40016020 	.word	0x40016020
 8001974:	40016040 	.word	0x40016040
 8001978:	40016080 	.word	0x40016080
 800197c:	400160a0 	.word	0x400160a0
 8001980:	400160c0 	.word	0x400160c0
 8001984:	400160e0 	.word	0x400160e0

08001988 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e098      	b.n	8001acc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	4b4d      	ldr	r3, [pc, #308]	@ (8001ad8 <HAL_DMA_Init+0x150>)
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d80f      	bhi.n	80019c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	4b4b      	ldr	r3, [pc, #300]	@ (8001adc <HAL_DMA_Init+0x154>)
 80019ae:	4413      	add	r3, r2
 80019b0:	4a4b      	ldr	r2, [pc, #300]	@ (8001ae0 <HAL_DMA_Init+0x158>)
 80019b2:	fba2 2303 	umull	r2, r3, r2, r3
 80019b6:	091b      	lsrs	r3, r3, #4
 80019b8:	009a      	lsls	r2, r3, #2
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a48      	ldr	r2, [pc, #288]	@ (8001ae4 <HAL_DMA_Init+0x15c>)
 80019c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80019c4:	e00e      	b.n	80019e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	4b46      	ldr	r3, [pc, #280]	@ (8001ae8 <HAL_DMA_Init+0x160>)
 80019ce:	4413      	add	r3, r2
 80019d0:	4a43      	ldr	r2, [pc, #268]	@ (8001ae0 <HAL_DMA_Init+0x158>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	091b      	lsrs	r3, r3, #4
 80019d8:	009a      	lsls	r2, r3, #2
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a42      	ldr	r2, [pc, #264]	@ (8001aec <HAL_DMA_Init+0x164>)
 80019e2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2202      	movs	r2, #2
 80019e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80019fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001a3e:	d039      	beq.n	8001ab4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a44:	4a27      	ldr	r2, [pc, #156]	@ (8001ae4 <HAL_DMA_Init+0x15c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d11a      	bne.n	8001a80 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a4a:	4b29      	ldr	r3, [pc, #164]	@ (8001af0 <HAL_DMA_Init+0x168>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a52:	f003 031c 	and.w	r3, r3, #28
 8001a56:	210f      	movs	r1, #15
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	4924      	ldr	r1, [pc, #144]	@ (8001af0 <HAL_DMA_Init+0x168>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a64:	4b22      	ldr	r3, [pc, #136]	@ (8001af0 <HAL_DMA_Init+0x168>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6859      	ldr	r1, [r3, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a70:	f003 031c 	and.w	r3, r3, #28
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	491d      	ldr	r1, [pc, #116]	@ (8001af0 <HAL_DMA_Init+0x168>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]
 8001a7e:	e019      	b.n	8001ab4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a80:	4b1c      	ldr	r3, [pc, #112]	@ (8001af4 <HAL_DMA_Init+0x16c>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a88:	f003 031c 	and.w	r3, r3, #28
 8001a8c:	210f      	movs	r1, #15
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	4917      	ldr	r1, [pc, #92]	@ (8001af4 <HAL_DMA_Init+0x16c>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a9a:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <HAL_DMA_Init+0x16c>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6859      	ldr	r1, [r3, #4]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa6:	f003 031c 	and.w	r3, r3, #28
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	4911      	ldr	r1, [pc, #68]	@ (8001af4 <HAL_DMA_Init+0x16c>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40020407 	.word	0x40020407
 8001adc:	bffdfff8 	.word	0xbffdfff8
 8001ae0:	cccccccd 	.word	0xcccccccd
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	bffdfbf8 	.word	0xbffdfbf8
 8001aec:	40020400 	.word	0x40020400
 8001af0:	400200a8 	.word	0x400200a8
 8001af4:	400204a8 	.word	0x400204a8

08001af8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b14:	f003 031c 	and.w	r3, r3, #28
 8001b18:	2204      	movs	r2, #4
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d026      	beq.n	8001b72 <HAL_DMA_IRQHandler+0x7a>
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d021      	beq.n	8001b72 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d107      	bne.n	8001b4c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0204 	bic.w	r2, r2, #4
 8001b4a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b50:	f003 021c 	and.w	r2, r3, #28
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b58:	2104      	movs	r1, #4
 8001b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d071      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001b70:	e06c      	b.n	8001c4c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b76:	f003 031c 	and.w	r3, r3, #28
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	409a      	lsls	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d02e      	beq.n	8001be4 <HAL_DMA_IRQHandler+0xec>
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d029      	beq.n	8001be4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0320 	and.w	r3, r3, #32
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10b      	bne.n	8001bb6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 020a 	bic.w	r2, r2, #10
 8001bac:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bba:	f003 021c 	and.w	r2, r3, #28
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	2102      	movs	r1, #2
 8001bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d038      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001be2:	e033      	b.n	8001c4c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be8:	f003 031c 	and.w	r3, r3, #28
 8001bec:	2208      	movs	r2, #8
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d02a      	beq.n	8001c4e <HAL_DMA_IRQHandler+0x156>
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d025      	beq.n	8001c4e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 020e 	bic.w	r2, r2, #14
 8001c10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c16:	f003 021c 	and.w	r2, r3, #28
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	2101      	movs	r1, #1
 8001c20:	fa01 f202 	lsl.w	r2, r1, r2
 8001c24:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d004      	beq.n	8001c4e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c4c:	bf00      	nop
 8001c4e:	bf00      	nop
}
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c66:	e17f      	b.n	8001f68 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	fa01 f303 	lsl.w	r3, r1, r3
 8001c74:	4013      	ands	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 8171 	beq.w	8001f62 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d005      	beq.n	8001c98 <HAL_GPIO_Init+0x40>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d130      	bne.n	8001cfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	68da      	ldr	r2, [r3, #12]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cce:	2201      	movs	r2, #1
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	091b      	lsrs	r3, r3, #4
 8001ce4:	f003 0201 	and.w	r2, r3, #1
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d118      	bne.n	8001d38 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	08db      	lsrs	r3, r3, #3
 8001d22:	f003 0201 	and.w	r2, r3, #1
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d017      	beq.n	8001d74 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	2203      	movs	r2, #3
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d123      	bne.n	8001dc8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	08da      	lsrs	r2, r3, #3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3208      	adds	r2, #8
 8001d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	220f      	movs	r2, #15
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	08da      	lsrs	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3208      	adds	r2, #8
 8001dc2:	6939      	ldr	r1, [r7, #16]
 8001dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0203 	and.w	r2, r3, #3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 80ac 	beq.w	8001f62 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0a:	4b5f      	ldr	r3, [pc, #380]	@ (8001f88 <HAL_GPIO_Init+0x330>)
 8001e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e0e:	4a5e      	ldr	r2, [pc, #376]	@ (8001f88 <HAL_GPIO_Init+0x330>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e16:	4b5c      	ldr	r3, [pc, #368]	@ (8001f88 <HAL_GPIO_Init+0x330>)
 8001e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e22:	4a5a      	ldr	r2, [pc, #360]	@ (8001f8c <HAL_GPIO_Init+0x334>)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	3302      	adds	r3, #2
 8001e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	220f      	movs	r2, #15
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e4c:	d025      	beq.n	8001e9a <HAL_GPIO_Init+0x242>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a4f      	ldr	r2, [pc, #316]	@ (8001f90 <HAL_GPIO_Init+0x338>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d01f      	beq.n	8001e96 <HAL_GPIO_Init+0x23e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4e      	ldr	r2, [pc, #312]	@ (8001f94 <HAL_GPIO_Init+0x33c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d019      	beq.n	8001e92 <HAL_GPIO_Init+0x23a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a4d      	ldr	r2, [pc, #308]	@ (8001f98 <HAL_GPIO_Init+0x340>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d013      	beq.n	8001e8e <HAL_GPIO_Init+0x236>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a4c      	ldr	r2, [pc, #304]	@ (8001f9c <HAL_GPIO_Init+0x344>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00d      	beq.n	8001e8a <HAL_GPIO_Init+0x232>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a4b      	ldr	r2, [pc, #300]	@ (8001fa0 <HAL_GPIO_Init+0x348>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d007      	beq.n	8001e86 <HAL_GPIO_Init+0x22e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a4a      	ldr	r2, [pc, #296]	@ (8001fa4 <HAL_GPIO_Init+0x34c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d101      	bne.n	8001e82 <HAL_GPIO_Init+0x22a>
 8001e7e:	2306      	movs	r3, #6
 8001e80:	e00c      	b.n	8001e9c <HAL_GPIO_Init+0x244>
 8001e82:	2307      	movs	r3, #7
 8001e84:	e00a      	b.n	8001e9c <HAL_GPIO_Init+0x244>
 8001e86:	2305      	movs	r3, #5
 8001e88:	e008      	b.n	8001e9c <HAL_GPIO_Init+0x244>
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	e006      	b.n	8001e9c <HAL_GPIO_Init+0x244>
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e004      	b.n	8001e9c <HAL_GPIO_Init+0x244>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e002      	b.n	8001e9c <HAL_GPIO_Init+0x244>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <HAL_GPIO_Init+0x244>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	f002 0203 	and.w	r2, r2, #3
 8001ea2:	0092      	lsls	r2, r2, #2
 8001ea4:	4093      	lsls	r3, r2
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eac:	4937      	ldr	r1, [pc, #220]	@ (8001f8c <HAL_GPIO_Init+0x334>)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001eba:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa8 <HAL_GPIO_Init+0x350>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ede:	4a32      	ldr	r2, [pc, #200]	@ (8001fa8 <HAL_GPIO_Init+0x350>)
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ee4:	4b30      	ldr	r3, [pc, #192]	@ (8001fa8 <HAL_GPIO_Init+0x350>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f08:	4a27      	ldr	r2, [pc, #156]	@ (8001fa8 <HAL_GPIO_Init+0x350>)
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f0e:	4b26      	ldr	r3, [pc, #152]	@ (8001fa8 <HAL_GPIO_Init+0x350>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f32:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa8 <HAL_GPIO_Init+0x350>)
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f38:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa8 <HAL_GPIO_Init+0x350>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f5c:	4a12      	ldr	r2, [pc, #72]	@ (8001fa8 <HAL_GPIO_Init+0x350>)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	3301      	adds	r3, #1
 8001f66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f47f ae78 	bne.w	8001c68 <HAL_GPIO_Init+0x10>
  }
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	371c      	adds	r7, #28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40010000 	.word	0x40010000
 8001f90:	48000400 	.word	0x48000400
 8001f94:	48000800 	.word	0x48000800
 8001f98:	48000c00 	.word	0x48000c00
 8001f9c:	48001000 	.word	0x48001000
 8001fa0:	48001400 	.word	0x48001400
 8001fa4:	48001800 	.word	0x48001800
 8001fa8:	40010400 	.word	0x40010400

08001fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	807b      	strh	r3, [r7, #2]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fbc:	787b      	ldrb	r3, [r7, #1]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fc2:	887a      	ldrh	r2, [r7, #2]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fc8:	e002      	b.n	8001fd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fe0:	4b04      	ldr	r3, [pc, #16]	@ (8001ff4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40007000 	.word	0x40007000

08001ff8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002006:	d130      	bne.n	800206a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002008:	4b23      	ldr	r3, [pc, #140]	@ (8002098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002010:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002014:	d038      	beq.n	8002088 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002016:	4b20      	ldr	r3, [pc, #128]	@ (8002098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800201e:	4a1e      	ldr	r2, [pc, #120]	@ (8002098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002020:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002024:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002026:	4b1d      	ldr	r3, [pc, #116]	@ (800209c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2232      	movs	r2, #50	@ 0x32
 800202c:	fb02 f303 	mul.w	r3, r2, r3
 8002030:	4a1b      	ldr	r2, [pc, #108]	@ (80020a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	0c9b      	lsrs	r3, r3, #18
 8002038:	3301      	adds	r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800203c:	e002      	b.n	8002044 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3b01      	subs	r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002044:	4b14      	ldr	r3, [pc, #80]	@ (8002098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800204c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002050:	d102      	bne.n	8002058 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1f2      	bne.n	800203e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002058:	4b0f      	ldr	r3, [pc, #60]	@ (8002098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002060:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002064:	d110      	bne.n	8002088 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e00f      	b.n	800208a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800206a:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002076:	d007      	beq.n	8002088 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002078:	4b07      	ldr	r3, [pc, #28]	@ (8002098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002080:	4a05      	ldr	r2, [pc, #20]	@ (8002098 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002082:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002086:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40007000 	.word	0x40007000
 800209c:	20000034 	.word	0x20000034
 80020a0:	431bde83 	.word	0x431bde83

080020a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e3ca      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b6:	4b97      	ldr	r3, [pc, #604]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020c0:	4b94      	ldr	r3, [pc, #592]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 80e4 	beq.w	80022a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d007      	beq.n	80020ee <HAL_RCC_OscConfig+0x4a>
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	2b0c      	cmp	r3, #12
 80020e2:	f040 808b 	bne.w	80021fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	f040 8087 	bne.w	80021fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020ee:	4b89      	ldr	r3, [pc, #548]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d005      	beq.n	8002106 <HAL_RCC_OscConfig+0x62>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e3a2      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1a      	ldr	r2, [r3, #32]
 800210a:	4b82      	ldr	r3, [pc, #520]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d004      	beq.n	8002120 <HAL_RCC_OscConfig+0x7c>
 8002116:	4b7f      	ldr	r3, [pc, #508]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800211e:	e005      	b.n	800212c <HAL_RCC_OscConfig+0x88>
 8002120:	4b7c      	ldr	r3, [pc, #496]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 8002122:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002126:	091b      	lsrs	r3, r3, #4
 8002128:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800212c:	4293      	cmp	r3, r2
 800212e:	d223      	bcs.n	8002178 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	4618      	mov	r0, r3
 8002136:	f000 fd55 	bl	8002be4 <RCC_SetFlashLatencyFromMSIRange>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e383      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002144:	4b73      	ldr	r3, [pc, #460]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a72      	ldr	r2, [pc, #456]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 800214a:	f043 0308 	orr.w	r3, r3, #8
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	4b70      	ldr	r3, [pc, #448]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	496d      	ldr	r1, [pc, #436]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002162:	4b6c      	ldr	r3, [pc, #432]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	4968      	ldr	r1, [pc, #416]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
 8002176:	e025      	b.n	80021c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002178:	4b66      	ldr	r3, [pc, #408]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a65      	ldr	r2, [pc, #404]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 800217e:	f043 0308 	orr.w	r3, r3, #8
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	4b63      	ldr	r3, [pc, #396]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	4960      	ldr	r1, [pc, #384]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002196:	4b5f      	ldr	r3, [pc, #380]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	021b      	lsls	r3, r3, #8
 80021a4:	495b      	ldr	r1, [pc, #364]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d109      	bne.n	80021c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 fd15 	bl	8002be4 <RCC_SetFlashLatencyFromMSIRange>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e343      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021c4:	f000 fc4a 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 80021c8:	4602      	mov	r2, r0
 80021ca:	4b52      	ldr	r3, [pc, #328]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	091b      	lsrs	r3, r3, #4
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	4950      	ldr	r1, [pc, #320]	@ (8002318 <HAL_RCC_OscConfig+0x274>)
 80021d6:	5ccb      	ldrb	r3, [r1, r3]
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	fa22 f303 	lsr.w	r3, r2, r3
 80021e0:	4a4e      	ldr	r2, [pc, #312]	@ (800231c <HAL_RCC_OscConfig+0x278>)
 80021e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021e4:	4b4e      	ldr	r3, [pc, #312]	@ (8002320 <HAL_RCC_OscConfig+0x27c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff f80f 	bl	800120c <HAL_InitTick>
 80021ee:	4603      	mov	r3, r0
 80021f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d052      	beq.n	800229e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	e327      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d032      	beq.n	800226a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002204:	4b43      	ldr	r3, [pc, #268]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a42      	ldr	r2, [pc, #264]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002210:	f7ff f84c 	bl	80012ac <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002218:	f7ff f848 	bl	80012ac <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e310      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800222a:	4b3a      	ldr	r3, [pc, #232]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002236:	4b37      	ldr	r3, [pc, #220]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a36      	ldr	r2, [pc, #216]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 800223c:	f043 0308 	orr.w	r3, r3, #8
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	4b34      	ldr	r3, [pc, #208]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4931      	ldr	r1, [pc, #196]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 8002250:	4313      	orrs	r3, r2
 8002252:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002254:	4b2f      	ldr	r3, [pc, #188]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	492c      	ldr	r1, [pc, #176]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 8002264:	4313      	orrs	r3, r2
 8002266:	604b      	str	r3, [r1, #4]
 8002268:	e01a      	b.n	80022a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800226a:	4b2a      	ldr	r3, [pc, #168]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a29      	ldr	r2, [pc, #164]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 8002270:	f023 0301 	bic.w	r3, r3, #1
 8002274:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002276:	f7ff f819 	bl	80012ac <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800227e:	f7ff f815 	bl	80012ac <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e2dd      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002290:	4b20      	ldr	r3, [pc, #128]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f0      	bne.n	800227e <HAL_RCC_OscConfig+0x1da>
 800229c:	e000      	b.n	80022a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800229e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d074      	beq.n	8002396 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d005      	beq.n	80022be <HAL_RCC_OscConfig+0x21a>
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	2b0c      	cmp	r3, #12
 80022b6:	d10e      	bne.n	80022d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d10b      	bne.n	80022d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022be:	4b15      	ldr	r3, [pc, #84]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d064      	beq.n	8002394 <HAL_RCC_OscConfig+0x2f0>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d160      	bne.n	8002394 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e2ba      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022de:	d106      	bne.n	80022ee <HAL_RCC_OscConfig+0x24a>
 80022e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 80022e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	e026      	b.n	800233c <HAL_RCC_OscConfig+0x298>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022f6:	d115      	bne.n	8002324 <HAL_RCC_OscConfig+0x280>
 80022f8:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a05      	ldr	r2, [pc, #20]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 80022fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	4b03      	ldr	r3, [pc, #12]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a02      	ldr	r2, [pc, #8]	@ (8002314 <HAL_RCC_OscConfig+0x270>)
 800230a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	e014      	b.n	800233c <HAL_RCC_OscConfig+0x298>
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
 8002318:	080096ac 	.word	0x080096ac
 800231c:	20000034 	.word	0x20000034
 8002320:	20000038 	.word	0x20000038
 8002324:	4ba0      	ldr	r3, [pc, #640]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a9f      	ldr	r2, [pc, #636]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 800232a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	4b9d      	ldr	r3, [pc, #628]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a9c      	ldr	r2, [pc, #624]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 8002336:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800233a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d013      	beq.n	800236c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7fe ffb2 	bl	80012ac <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800234c:	f7fe ffae 	bl	80012ac <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b64      	cmp	r3, #100	@ 0x64
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e276      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800235e:	4b92      	ldr	r3, [pc, #584]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0x2a8>
 800236a:	e014      	b.n	8002396 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236c:	f7fe ff9e 	bl	80012ac <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002374:	f7fe ff9a 	bl	80012ac <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b64      	cmp	r3, #100	@ 0x64
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e262      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002386:	4b88      	ldr	r3, [pc, #544]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x2d0>
 8002392:	e000      	b.n	8002396 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d060      	beq.n	8002464 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_OscConfig+0x310>
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	2b0c      	cmp	r3, #12
 80023ac:	d119      	bne.n	80023e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d116      	bne.n	80023e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023b4:	4b7c      	ldr	r3, [pc, #496]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_RCC_OscConfig+0x328>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e23f      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023cc:	4b76      	ldr	r3, [pc, #472]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	061b      	lsls	r3, r3, #24
 80023da:	4973      	ldr	r1, [pc, #460]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023e0:	e040      	b.n	8002464 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d023      	beq.n	8002432 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023ea:	4b6f      	ldr	r3, [pc, #444]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a6e      	ldr	r2, [pc, #440]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 80023f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f6:	f7fe ff59 	bl	80012ac <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fe:	f7fe ff55 	bl	80012ac <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e21d      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002410:	4b65      	ldr	r3, [pc, #404]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f0      	beq.n	80023fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241c:	4b62      	ldr	r3, [pc, #392]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	061b      	lsls	r3, r3, #24
 800242a:	495f      	ldr	r1, [pc, #380]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
 8002430:	e018      	b.n	8002464 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002432:	4b5d      	ldr	r3, [pc, #372]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a5c      	ldr	r2, [pc, #368]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 8002438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800243c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243e:	f7fe ff35 	bl	80012ac <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002446:	f7fe ff31 	bl	80012ac <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e1f9      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002458:	4b53      	ldr	r3, [pc, #332]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f0      	bne.n	8002446 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b00      	cmp	r3, #0
 800246e:	d03c      	beq.n	80024ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01c      	beq.n	80024b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002478:	4b4b      	ldr	r3, [pc, #300]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 800247a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800247e:	4a4a      	ldr	r2, [pc, #296]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002488:	f7fe ff10 	bl	80012ac <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002490:	f7fe ff0c 	bl	80012ac <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e1d4      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024a2:	4b41      	ldr	r3, [pc, #260]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 80024a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0ef      	beq.n	8002490 <HAL_RCC_OscConfig+0x3ec>
 80024b0:	e01b      	b.n	80024ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b2:	4b3d      	ldr	r3, [pc, #244]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 80024b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024b8:	4a3b      	ldr	r2, [pc, #236]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 80024ba:	f023 0301 	bic.w	r3, r3, #1
 80024be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c2:	f7fe fef3 	bl	80012ac <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ca:	f7fe feef 	bl	80012ac <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e1b7      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024dc:	4b32      	ldr	r3, [pc, #200]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 80024de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1ef      	bne.n	80024ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 80a6 	beq.w	8002644 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f8:	2300      	movs	r3, #0
 80024fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024fc:	4b2a      	ldr	r3, [pc, #168]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 80024fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002500:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10d      	bne.n	8002524 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002508:	4b27      	ldr	r3, [pc, #156]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 800250a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250c:	4a26      	ldr	r2, [pc, #152]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 800250e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002512:	6593      	str	r3, [r2, #88]	@ 0x58
 8002514:	4b24      	ldr	r3, [pc, #144]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 8002516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002520:	2301      	movs	r3, #1
 8002522:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002524:	4b21      	ldr	r3, [pc, #132]	@ (80025ac <HAL_RCC_OscConfig+0x508>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d118      	bne.n	8002562 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002530:	4b1e      	ldr	r3, [pc, #120]	@ (80025ac <HAL_RCC_OscConfig+0x508>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a1d      	ldr	r2, [pc, #116]	@ (80025ac <HAL_RCC_OscConfig+0x508>)
 8002536:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800253a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253c:	f7fe feb6 	bl	80012ac <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002544:	f7fe feb2 	bl	80012ac <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e17a      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002556:	4b15      	ldr	r3, [pc, #84]	@ (80025ac <HAL_RCC_OscConfig+0x508>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d108      	bne.n	800257c <HAL_RCC_OscConfig+0x4d8>
 800256a:	4b0f      	ldr	r3, [pc, #60]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 800256c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002570:	4a0d      	ldr	r2, [pc, #52]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800257a:	e029      	b.n	80025d0 <HAL_RCC_OscConfig+0x52c>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b05      	cmp	r3, #5
 8002582:	d115      	bne.n	80025b0 <HAL_RCC_OscConfig+0x50c>
 8002584:	4b08      	ldr	r3, [pc, #32]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258a:	4a07      	ldr	r2, [pc, #28]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 800258c:	f043 0304 	orr.w	r3, r3, #4
 8002590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002594:	4b04      	ldr	r3, [pc, #16]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 8002596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800259a:	4a03      	ldr	r2, [pc, #12]	@ (80025a8 <HAL_RCC_OscConfig+0x504>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025a4:	e014      	b.n	80025d0 <HAL_RCC_OscConfig+0x52c>
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40007000 	.word	0x40007000
 80025b0:	4b9c      	ldr	r3, [pc, #624]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 80025b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b6:	4a9b      	ldr	r2, [pc, #620]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 80025b8:	f023 0301 	bic.w	r3, r3, #1
 80025bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025c0:	4b98      	ldr	r3, [pc, #608]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 80025c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c6:	4a97      	ldr	r2, [pc, #604]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 80025c8:	f023 0304 	bic.w	r3, r3, #4
 80025cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d016      	beq.n	8002606 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d8:	f7fe fe68 	bl	80012ac <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025de:	e00a      	b.n	80025f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e0:	f7fe fe64 	bl	80012ac <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e12a      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f6:	4b8b      	ldr	r3, [pc, #556]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 80025f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0ed      	beq.n	80025e0 <HAL_RCC_OscConfig+0x53c>
 8002604:	e015      	b.n	8002632 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002606:	f7fe fe51 	bl	80012ac <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800260c:	e00a      	b.n	8002624 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260e:	f7fe fe4d 	bl	80012ac <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	f241 3288 	movw	r2, #5000	@ 0x1388
 800261c:	4293      	cmp	r3, r2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e113      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002624:	4b7f      	ldr	r3, [pc, #508]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 8002626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1ed      	bne.n	800260e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002632:	7ffb      	ldrb	r3, [r7, #31]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d105      	bne.n	8002644 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002638:	4b7a      	ldr	r3, [pc, #488]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 800263a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263c:	4a79      	ldr	r2, [pc, #484]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 800263e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002642:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80fe 	beq.w	800284a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002652:	2b02      	cmp	r3, #2
 8002654:	f040 80d0 	bne.w	80027f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002658:	4b72      	ldr	r3, [pc, #456]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f003 0203 	and.w	r2, r3, #3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002668:	429a      	cmp	r2, r3
 800266a:	d130      	bne.n	80026ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	3b01      	subs	r3, #1
 8002678:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800267a:	429a      	cmp	r2, r3
 800267c:	d127      	bne.n	80026ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002688:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d11f      	bne.n	80026ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002698:	2a07      	cmp	r2, #7
 800269a:	bf14      	ite	ne
 800269c:	2201      	movne	r2, #1
 800269e:	2200      	moveq	r2, #0
 80026a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d113      	bne.n	80026ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b0:	085b      	lsrs	r3, r3, #1
 80026b2:	3b01      	subs	r3, #1
 80026b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d109      	bne.n	80026ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c4:	085b      	lsrs	r3, r3, #1
 80026c6:	3b01      	subs	r3, #1
 80026c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d06e      	beq.n	80027ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	2b0c      	cmp	r3, #12
 80026d2:	d069      	beq.n	80027a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026d4:	4b53      	ldr	r3, [pc, #332]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d105      	bne.n	80026ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026e0:	4b50      	ldr	r3, [pc, #320]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0ad      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026f0:	4b4c      	ldr	r3, [pc, #304]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a4b      	ldr	r2, [pc, #300]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 80026f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026fc:	f7fe fdd6 	bl	80012ac <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002704:	f7fe fdd2 	bl	80012ac <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e09a      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002716:	4b43      	ldr	r3, [pc, #268]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002722:	4b40      	ldr	r3, [pc, #256]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	4b40      	ldr	r3, [pc, #256]	@ (8002828 <HAL_RCC_OscConfig+0x784>)
 8002728:	4013      	ands	r3, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002732:	3a01      	subs	r2, #1
 8002734:	0112      	lsls	r2, r2, #4
 8002736:	4311      	orrs	r1, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800273c:	0212      	lsls	r2, r2, #8
 800273e:	4311      	orrs	r1, r2
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002744:	0852      	lsrs	r2, r2, #1
 8002746:	3a01      	subs	r2, #1
 8002748:	0552      	lsls	r2, r2, #21
 800274a:	4311      	orrs	r1, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002750:	0852      	lsrs	r2, r2, #1
 8002752:	3a01      	subs	r2, #1
 8002754:	0652      	lsls	r2, r2, #25
 8002756:	4311      	orrs	r1, r2
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800275c:	0912      	lsrs	r2, r2, #4
 800275e:	0452      	lsls	r2, r2, #17
 8002760:	430a      	orrs	r2, r1
 8002762:	4930      	ldr	r1, [pc, #192]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 8002764:	4313      	orrs	r3, r2
 8002766:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002768:	4b2e      	ldr	r3, [pc, #184]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a2d      	ldr	r2, [pc, #180]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 800276e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002772:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002774:	4b2b      	ldr	r3, [pc, #172]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4a2a      	ldr	r2, [pc, #168]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 800277a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800277e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002780:	f7fe fd94 	bl	80012ac <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002788:	f7fe fd90 	bl	80012ac <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e058      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279a:	4b22      	ldr	r3, [pc, #136]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027a6:	e050      	b.n	800284a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e04f      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d148      	bne.n	800284a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a19      	ldr	r2, [pc, #100]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 80027be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027c4:	4b17      	ldr	r3, [pc, #92]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	4a16      	ldr	r2, [pc, #88]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 80027ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027d0:	f7fe fd6c 	bl	80012ac <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d8:	f7fe fd68 	bl	80012ac <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e030      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0x734>
 80027f6:	e028      	b.n	800284a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2b0c      	cmp	r3, #12
 80027fc:	d023      	beq.n	8002846 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fe:	4b09      	ldr	r3, [pc, #36]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a08      	ldr	r2, [pc, #32]	@ (8002824 <HAL_RCC_OscConfig+0x780>)
 8002804:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280a:	f7fe fd4f 	bl	80012ac <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002810:	e00c      	b.n	800282c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002812:	f7fe fd4b 	bl	80012ac <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d905      	bls.n	800282c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e013      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
 8002824:	40021000 	.word	0x40021000
 8002828:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800282c:	4b09      	ldr	r3, [pc, #36]	@ (8002854 <HAL_RCC_OscConfig+0x7b0>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1ec      	bne.n	8002812 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002838:	4b06      	ldr	r3, [pc, #24]	@ (8002854 <HAL_RCC_OscConfig+0x7b0>)
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	4905      	ldr	r1, [pc, #20]	@ (8002854 <HAL_RCC_OscConfig+0x7b0>)
 800283e:	4b06      	ldr	r3, [pc, #24]	@ (8002858 <HAL_RCC_OscConfig+0x7b4>)
 8002840:	4013      	ands	r3, r2
 8002842:	60cb      	str	r3, [r1, #12]
 8002844:	e001      	b.n	800284a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3720      	adds	r7, #32
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000
 8002858:	feeefffc 	.word	0xfeeefffc

0800285c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0e7      	b.n	8002a40 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002870:	4b75      	ldr	r3, [pc, #468]	@ (8002a48 <HAL_RCC_ClockConfig+0x1ec>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d910      	bls.n	80028a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287e:	4b72      	ldr	r3, [pc, #456]	@ (8002a48 <HAL_RCC_ClockConfig+0x1ec>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 0207 	bic.w	r2, r3, #7
 8002886:	4970      	ldr	r1, [pc, #448]	@ (8002a48 <HAL_RCC_ClockConfig+0x1ec>)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288e:	4b6e      	ldr	r3, [pc, #440]	@ (8002a48 <HAL_RCC_ClockConfig+0x1ec>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0cf      	b.n	8002a40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d010      	beq.n	80028ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	4b66      	ldr	r3, [pc, #408]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d908      	bls.n	80028ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028bc:	4b63      	ldr	r3, [pc, #396]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	4960      	ldr	r1, [pc, #384]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d04c      	beq.n	8002974 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d107      	bne.n	80028f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e2:	4b5a      	ldr	r3, [pc, #360]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d121      	bne.n	8002932 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e0a6      	b.n	8002a40 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d107      	bne.n	800290a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028fa:	4b54      	ldr	r3, [pc, #336]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d115      	bne.n	8002932 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e09a      	b.n	8002a40 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d107      	bne.n	8002922 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002912:	4b4e      	ldr	r3, [pc, #312]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e08e      	b.n	8002a40 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002922:	4b4a      	ldr	r3, [pc, #296]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e086      	b.n	8002a40 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002932:	4b46      	ldr	r3, [pc, #280]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f023 0203 	bic.w	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4943      	ldr	r1, [pc, #268]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 8002940:	4313      	orrs	r3, r2
 8002942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002944:	f7fe fcb2 	bl	80012ac <HAL_GetTick>
 8002948:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	e00a      	b.n	8002962 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800294c:	f7fe fcae 	bl	80012ac <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e06e      	b.n	8002a40 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002962:	4b3a      	ldr	r3, [pc, #232]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 020c 	and.w	r2, r3, #12
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	429a      	cmp	r2, r3
 8002972:	d1eb      	bne.n	800294c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d010      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	4b31      	ldr	r3, [pc, #196]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800298c:	429a      	cmp	r2, r3
 800298e:	d208      	bcs.n	80029a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002990:	4b2e      	ldr	r3, [pc, #184]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	492b      	ldr	r1, [pc, #172]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029a2:	4b29      	ldr	r3, [pc, #164]	@ (8002a48 <HAL_RCC_ClockConfig+0x1ec>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d210      	bcs.n	80029d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b0:	4b25      	ldr	r3, [pc, #148]	@ (8002a48 <HAL_RCC_ClockConfig+0x1ec>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f023 0207 	bic.w	r2, r3, #7
 80029b8:	4923      	ldr	r1, [pc, #140]	@ (8002a48 <HAL_RCC_ClockConfig+0x1ec>)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	4313      	orrs	r3, r2
 80029be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c0:	4b21      	ldr	r3, [pc, #132]	@ (8002a48 <HAL_RCC_ClockConfig+0x1ec>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d001      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e036      	b.n	8002a40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d008      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029de:	4b1b      	ldr	r3, [pc, #108]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	4918      	ldr	r1, [pc, #96]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d009      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029fc:	4b13      	ldr	r3, [pc, #76]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4910      	ldr	r1, [pc, #64]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a10:	f000 f824 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 8002a14:	4602      	mov	r2, r0
 8002a16:	4b0d      	ldr	r3, [pc, #52]	@ (8002a4c <HAL_RCC_ClockConfig+0x1f0>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	091b      	lsrs	r3, r3, #4
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	490b      	ldr	r1, [pc, #44]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f4>)
 8002a22:	5ccb      	ldrb	r3, [r1, r3]
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2c:	4a09      	ldr	r2, [pc, #36]	@ (8002a54 <HAL_RCC_ClockConfig+0x1f8>)
 8002a2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a30:	4b09      	ldr	r3, [pc, #36]	@ (8002a58 <HAL_RCC_ClockConfig+0x1fc>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fe fbe9 	bl	800120c <HAL_InitTick>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a3e:	7afb      	ldrb	r3, [r7, #11]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40022000 	.word	0x40022000
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	080096ac 	.word	0x080096ac
 8002a54:	20000034 	.word	0x20000034
 8002a58:	20000038 	.word	0x20000038

08002a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	@ 0x24
 8002a60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
 8002a66:	2300      	movs	r3, #0
 8002a68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a74:	4b3b      	ldr	r3, [pc, #236]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_GetSysClockFreq+0x34>
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	2b0c      	cmp	r3, #12
 8002a88:	d121      	bne.n	8002ace <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d11e      	bne.n	8002ace <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a90:	4b34      	ldr	r3, [pc, #208]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d107      	bne.n	8002aac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a9c:	4b31      	ldr	r3, [pc, #196]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aa2:	0a1b      	lsrs	r3, r3, #8
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	e005      	b.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002aac:	4b2d      	ldr	r3, [pc, #180]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ab8:	4a2b      	ldr	r2, [pc, #172]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10d      	bne.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002acc:	e00a      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d102      	bne.n	8002ada <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ad4:	4b25      	ldr	r3, [pc, #148]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ad6:	61bb      	str	r3, [r7, #24]
 8002ad8:	e004      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ae0:	4b23      	ldr	r3, [pc, #140]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ae2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	2b0c      	cmp	r3, #12
 8002ae8:	d134      	bne.n	8002b54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002aea:	4b1e      	ldr	r3, [pc, #120]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d003      	beq.n	8002b02 <HAL_RCC_GetSysClockFreq+0xa6>
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d003      	beq.n	8002b08 <HAL_RCC_GetSysClockFreq+0xac>
 8002b00:	e005      	b.n	8002b0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b02:	4b1a      	ldr	r3, [pc, #104]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0x110>)
 8002b04:	617b      	str	r3, [r7, #20]
      break;
 8002b06:	e005      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b08:	4b19      	ldr	r3, [pc, #100]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b0a:	617b      	str	r3, [r7, #20]
      break;
 8002b0c:	e002      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	617b      	str	r3, [r7, #20]
      break;
 8002b12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b14:	4b13      	ldr	r3, [pc, #76]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	3301      	adds	r3, #1
 8002b20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b22:	4b10      	ldr	r3, [pc, #64]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	0a1b      	lsrs	r3, r3, #8
 8002b28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	fb03 f202 	mul.w	r2, r3, r2
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	0e5b      	lsrs	r3, r3, #25
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	3301      	adds	r3, #1
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b54:	69bb      	ldr	r3, [r7, #24]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3724      	adds	r7, #36	@ 0x24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000
 8002b68:	080096c4 	.word	0x080096c4
 8002b6c:	00f42400 	.word	0x00f42400
 8002b70:	007a1200 	.word	0x007a1200

08002b74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b78:	4b03      	ldr	r3, [pc, #12]	@ (8002b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000034 	.word	0x20000034

08002b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b90:	f7ff fff0 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 8002b94:	4602      	mov	r2, r0
 8002b96:	4b06      	ldr	r3, [pc, #24]	@ (8002bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	0a1b      	lsrs	r3, r3, #8
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	4904      	ldr	r1, [pc, #16]	@ (8002bb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ba2:	5ccb      	ldrb	r3, [r1, r3]
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	080096bc 	.word	0x080096bc

08002bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bbc:	f7ff ffda 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	0adb      	lsrs	r3, r3, #11
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	4904      	ldr	r1, [pc, #16]	@ (8002be0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bce:	5ccb      	ldrb	r3, [r1, r3]
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	080096bc 	.word	0x080096bc

08002be4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002bec:	2300      	movs	r3, #0
 8002bee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8002c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bfc:	f7ff f9ee 	bl	8001fdc <HAL_PWREx_GetVoltageRange>
 8002c00:	6178      	str	r0, [r7, #20]
 8002c02:	e014      	b.n	8002c2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c04:	4b25      	ldr	r3, [pc, #148]	@ (8002c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c08:	4a24      	ldr	r2, [pc, #144]	@ (8002c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c10:	4b22      	ldr	r3, [pc, #136]	@ (8002c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c1c:	f7ff f9de 	bl	8001fdc <HAL_PWREx_GetVoltageRange>
 8002c20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c22:	4b1e      	ldr	r3, [pc, #120]	@ (8002c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c26:	4a1d      	ldr	r2, [pc, #116]	@ (8002c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c34:	d10b      	bne.n	8002c4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b80      	cmp	r3, #128	@ 0x80
 8002c3a:	d919      	bls.n	8002c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c40:	d902      	bls.n	8002c48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c42:	2302      	movs	r3, #2
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	e013      	b.n	8002c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c48:	2301      	movs	r3, #1
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	e010      	b.n	8002c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b80      	cmp	r3, #128	@ 0x80
 8002c52:	d902      	bls.n	8002c5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c54:	2303      	movs	r3, #3
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	e00a      	b.n	8002c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b80      	cmp	r3, #128	@ 0x80
 8002c5e:	d102      	bne.n	8002c66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c60:	2302      	movs	r3, #2
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	e004      	b.n	8002c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b70      	cmp	r3, #112	@ 0x70
 8002c6a:	d101      	bne.n	8002c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f023 0207 	bic.w	r2, r3, #7
 8002c78:	4909      	ldr	r1, [pc, #36]	@ (8002ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c80:	4b07      	ldr	r3, [pc, #28]	@ (8002ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d001      	beq.n	8002c92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40022000 	.word	0x40022000

08002ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cac:	2300      	movs	r3, #0
 8002cae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d041      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cc4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002cc8:	d02a      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002cca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002cce:	d824      	bhi.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cd0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002cd4:	d008      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002cd6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002cda:	d81e      	bhi.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00a      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ce0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ce4:	d010      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ce6:	e018      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ce8:	4b86      	ldr	r3, [pc, #536]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4a85      	ldr	r2, [pc, #532]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cf4:	e015      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 fabb 	bl	8003278 <RCCEx_PLLSAI1_Config>
 8002d02:	4603      	mov	r3, r0
 8002d04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d06:	e00c      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3320      	adds	r3, #32
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 fba6 	bl	8003460 <RCCEx_PLLSAI2_Config>
 8002d14:	4603      	mov	r3, r0
 8002d16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d18:	e003      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	74fb      	strb	r3, [r7, #19]
      break;
 8002d1e:	e000      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d22:	7cfb      	ldrb	r3, [r7, #19]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10b      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d28:	4b76      	ldr	r3, [pc, #472]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d2e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d36:	4973      	ldr	r1, [pc, #460]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002d3e:	e001      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d40:	7cfb      	ldrb	r3, [r7, #19]
 8002d42:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d041      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d58:	d02a      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d5e:	d824      	bhi.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d64:	d008      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d6a:	d81e      	bhi.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00a      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d74:	d010      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d76:	e018      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d78:	4b62      	ldr	r3, [pc, #392]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	4a61      	ldr	r2, [pc, #388]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d82:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d84:	e015      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 fa73 	bl	8003278 <RCCEx_PLLSAI1_Config>
 8002d92:	4603      	mov	r3, r0
 8002d94:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d96:	e00c      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3320      	adds	r3, #32
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fb5e 	bl	8003460 <RCCEx_PLLSAI2_Config>
 8002da4:	4603      	mov	r3, r0
 8002da6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002da8:	e003      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	74fb      	strb	r3, [r7, #19]
      break;
 8002dae:	e000      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002db2:	7cfb      	ldrb	r3, [r7, #19]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10b      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002db8:	4b52      	ldr	r3, [pc, #328]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dbe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dc6:	494f      	ldr	r1, [pc, #316]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002dce:	e001      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd0:	7cfb      	ldrb	r3, [r7, #19]
 8002dd2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80a0 	beq.w	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de2:	2300      	movs	r3, #0
 8002de4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002de6:	4b47      	ldr	r3, [pc, #284]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002df6:	2300      	movs	r3, #0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00d      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dfc:	4b41      	ldr	r3, [pc, #260]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e00:	4a40      	ldr	r2, [pc, #256]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e08:	4b3e      	ldr	r3, [pc, #248]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e14:	2301      	movs	r3, #1
 8002e16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e18:	4b3b      	ldr	r3, [pc, #236]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a3a      	ldr	r2, [pc, #232]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e24:	f7fe fa42 	bl	80012ac <HAL_GetTick>
 8002e28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e2a:	e009      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2c:	f7fe fa3e 	bl	80012ac <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d902      	bls.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	74fb      	strb	r3, [r7, #19]
        break;
 8002e3e:	e005      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e40:	4b31      	ldr	r3, [pc, #196]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0ef      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002e4c:	7cfb      	ldrb	r3, [r7, #19]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d15c      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e52:	4b2c      	ldr	r3, [pc, #176]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d01f      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d019      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e70:	4b24      	ldr	r3, [pc, #144]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e7c:	4b21      	ldr	r3, [pc, #132]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e82:	4a20      	ldr	r2, [pc, #128]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e92:	4a1c      	ldr	r2, [pc, #112]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e9c:	4a19      	ldr	r2, [pc, #100]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d016      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eae:	f7fe f9fd 	bl	80012ac <HAL_GetTick>
 8002eb2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eb4:	e00b      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb6:	f7fe f9f9 	bl	80012ac <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d902      	bls.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	74fb      	strb	r3, [r7, #19]
            break;
 8002ecc:	e006      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ece:	4b0d      	ldr	r3, [pc, #52]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0ec      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002edc:	7cfb      	ldrb	r3, [r7, #19]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10c      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ee2:	4b08      	ldr	r3, [pc, #32]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ee8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ef2:	4904      	ldr	r1, [pc, #16]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002efa:	e009      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002efc:	7cfb      	ldrb	r3, [r7, #19]
 8002efe:	74bb      	strb	r3, [r7, #18]
 8002f00:	e006      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0c:	7cfb      	ldrb	r3, [r7, #19]
 8002f0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f10:	7c7b      	ldrb	r3, [r7, #17]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d105      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f16:	4b9e      	ldr	r3, [pc, #632]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1a:	4a9d      	ldr	r2, [pc, #628]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f2e:	4b98      	ldr	r3, [pc, #608]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f34:	f023 0203 	bic.w	r2, r3, #3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3c:	4994      	ldr	r1, [pc, #592]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f50:	4b8f      	ldr	r3, [pc, #572]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f56:	f023 020c 	bic.w	r2, r3, #12
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f5e:	498c      	ldr	r1, [pc, #560]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f72:	4b87      	ldr	r3, [pc, #540]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f78:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f80:	4983      	ldr	r1, [pc, #524]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f94:	4b7e      	ldr	r3, [pc, #504]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa2:	497b      	ldr	r1, [pc, #492]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0310 	and.w	r3, r3, #16
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fb6:	4b76      	ldr	r3, [pc, #472]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fc4:	4972      	ldr	r1, [pc, #456]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0320 	and.w	r3, r3, #32
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00a      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fd8:	4b6d      	ldr	r3, [pc, #436]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fde:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fe6:	496a      	ldr	r1, [pc, #424]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ffa:	4b65      	ldr	r3, [pc, #404]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003000:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003008:	4961      	ldr	r1, [pc, #388]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800300a:	4313      	orrs	r3, r2
 800300c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00a      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800301c:	4b5c      	ldr	r3, [pc, #368]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003022:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800302a:	4959      	ldr	r1, [pc, #356]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800303e:	4b54      	ldr	r3, [pc, #336]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003044:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800304c:	4950      	ldr	r1, [pc, #320]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00a      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003060:	4b4b      	ldr	r3, [pc, #300]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003066:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306e:	4948      	ldr	r1, [pc, #288]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003082:	4b43      	ldr	r3, [pc, #268]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003088:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003090:	493f      	ldr	r1, [pc, #252]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d028      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030b2:	4937      	ldr	r1, [pc, #220]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030c2:	d106      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030c4:	4b32      	ldr	r3, [pc, #200]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4a31      	ldr	r2, [pc, #196]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030ce:	60d3      	str	r3, [r2, #12]
 80030d0:	e011      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030da:	d10c      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3304      	adds	r3, #4
 80030e0:	2101      	movs	r1, #1
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 f8c8 	bl	8003278 <RCCEx_PLLSAI1_Config>
 80030e8:	4603      	mov	r3, r0
 80030ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80030ec:	7cfb      	ldrb	r3, [r7, #19]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80030f2:	7cfb      	ldrb	r3, [r7, #19]
 80030f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d028      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003102:	4b23      	ldr	r3, [pc, #140]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003108:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003110:	491f      	ldr	r1, [pc, #124]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003120:	d106      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003122:	4b1b      	ldr	r3, [pc, #108]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	4a1a      	ldr	r2, [pc, #104]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003128:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800312c:	60d3      	str	r3, [r2, #12]
 800312e:	e011      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003134:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003138:	d10c      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3304      	adds	r3, #4
 800313e:	2101      	movs	r1, #1
 8003140:	4618      	mov	r0, r3
 8003142:	f000 f899 	bl	8003278 <RCCEx_PLLSAI1_Config>
 8003146:	4603      	mov	r3, r0
 8003148:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800314a:	7cfb      	ldrb	r3, [r7, #19]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003150:	7cfb      	ldrb	r3, [r7, #19]
 8003152:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d02b      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003160:	4b0b      	ldr	r3, [pc, #44]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003166:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800316e:	4908      	ldr	r1, [pc, #32]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003170:	4313      	orrs	r3, r2
 8003172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800317a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800317e:	d109      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003180:	4b03      	ldr	r3, [pc, #12]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4a02      	ldr	r2, [pc, #8]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003186:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800318a:	60d3      	str	r3, [r2, #12]
 800318c:	e014      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003198:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800319c:	d10c      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3304      	adds	r3, #4
 80031a2:	2101      	movs	r1, #1
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 f867 	bl	8003278 <RCCEx_PLLSAI1_Config>
 80031aa:	4603      	mov	r3, r0
 80031ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031ae:	7cfb      	ldrb	r3, [r7, #19]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80031b4:	7cfb      	ldrb	r3, [r7, #19]
 80031b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d02f      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031d2:	4928      	ldr	r1, [pc, #160]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031e2:	d10d      	bne.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3304      	adds	r3, #4
 80031e8:	2102      	movs	r1, #2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 f844 	bl	8003278 <RCCEx_PLLSAI1_Config>
 80031f0:	4603      	mov	r3, r0
 80031f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031f4:	7cfb      	ldrb	r3, [r7, #19]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d014      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031fa:	7cfb      	ldrb	r3, [r7, #19]
 80031fc:	74bb      	strb	r3, [r7, #18]
 80031fe:	e011      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003204:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003208:	d10c      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3320      	adds	r3, #32
 800320e:	2102      	movs	r1, #2
 8003210:	4618      	mov	r0, r3
 8003212:	f000 f925 	bl	8003460 <RCCEx_PLLSAI2_Config>
 8003216:	4603      	mov	r3, r0
 8003218:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800321a:	7cfb      	ldrb	r3, [r7, #19]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003220:	7cfb      	ldrb	r3, [r7, #19]
 8003222:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003230:	4b10      	ldr	r3, [pc, #64]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003236:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800323e:	490d      	ldr	r1, [pc, #52]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003252:	4b08      	ldr	r3, [pc, #32]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003258:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003262:	4904      	ldr	r1, [pc, #16]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800326a:	7cbb      	ldrb	r3, [r7, #18]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40021000 	.word	0x40021000

08003278 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003286:	4b75      	ldr	r3, [pc, #468]	@ (800345c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d018      	beq.n	80032c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003292:	4b72      	ldr	r3, [pc, #456]	@ (800345c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f003 0203 	and.w	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d10d      	bne.n	80032be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
       ||
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032aa:	4b6c      	ldr	r3, [pc, #432]	@ (800345c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	091b      	lsrs	r3, r3, #4
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
       ||
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d047      	beq.n	800334e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	73fb      	strb	r3, [r7, #15]
 80032c2:	e044      	b.n	800334e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d018      	beq.n	80032fe <RCCEx_PLLSAI1_Config+0x86>
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d825      	bhi.n	800331c <RCCEx_PLLSAI1_Config+0xa4>
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d002      	beq.n	80032da <RCCEx_PLLSAI1_Config+0x62>
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d009      	beq.n	80032ec <RCCEx_PLLSAI1_Config+0x74>
 80032d8:	e020      	b.n	800331c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032da:	4b60      	ldr	r3, [pc, #384]	@ (800345c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d11d      	bne.n	8003322 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ea:	e01a      	b.n	8003322 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032ec:	4b5b      	ldr	r3, [pc, #364]	@ (800345c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d116      	bne.n	8003326 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032fc:	e013      	b.n	8003326 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032fe:	4b57      	ldr	r3, [pc, #348]	@ (800345c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10f      	bne.n	800332a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800330a:	4b54      	ldr	r3, [pc, #336]	@ (800345c <RCCEx_PLLSAI1_Config+0x1e4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800331a:	e006      	b.n	800332a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	73fb      	strb	r3, [r7, #15]
      break;
 8003320:	e004      	b.n	800332c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003322:	bf00      	nop
 8003324:	e002      	b.n	800332c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003326:	bf00      	nop
 8003328:	e000      	b.n	800332c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800332a:	bf00      	nop
    }

    if(status == HAL_OK)
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10d      	bne.n	800334e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003332:	4b4a      	ldr	r3, [pc, #296]	@ (800345c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6819      	ldr	r1, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	3b01      	subs	r3, #1
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	430b      	orrs	r3, r1
 8003348:	4944      	ldr	r1, [pc, #272]	@ (800345c <RCCEx_PLLSAI1_Config+0x1e4>)
 800334a:	4313      	orrs	r3, r2
 800334c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800334e:	7bfb      	ldrb	r3, [r7, #15]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d17d      	bne.n	8003450 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003354:	4b41      	ldr	r3, [pc, #260]	@ (800345c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a40      	ldr	r2, [pc, #256]	@ (800345c <RCCEx_PLLSAI1_Config+0x1e4>)
 800335a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800335e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003360:	f7fd ffa4 	bl	80012ac <HAL_GetTick>
 8003364:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003366:	e009      	b.n	800337c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003368:	f7fd ffa0 	bl	80012ac <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d902      	bls.n	800337c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	73fb      	strb	r3, [r7, #15]
        break;
 800337a:	e005      	b.n	8003388 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800337c:	4b37      	ldr	r3, [pc, #220]	@ (800345c <RCCEx_PLLSAI1_Config+0x1e4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1ef      	bne.n	8003368 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d160      	bne.n	8003450 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d111      	bne.n	80033b8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003394:	4b31      	ldr	r3, [pc, #196]	@ (800345c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800339c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6892      	ldr	r2, [r2, #8]
 80033a4:	0211      	lsls	r1, r2, #8
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68d2      	ldr	r2, [r2, #12]
 80033aa:	0912      	lsrs	r2, r2, #4
 80033ac:	0452      	lsls	r2, r2, #17
 80033ae:	430a      	orrs	r2, r1
 80033b0:	492a      	ldr	r1, [pc, #168]	@ (800345c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	610b      	str	r3, [r1, #16]
 80033b6:	e027      	b.n	8003408 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d112      	bne.n	80033e4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033be:	4b27      	ldr	r3, [pc, #156]	@ (800345c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80033c6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6892      	ldr	r2, [r2, #8]
 80033ce:	0211      	lsls	r1, r2, #8
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6912      	ldr	r2, [r2, #16]
 80033d4:	0852      	lsrs	r2, r2, #1
 80033d6:	3a01      	subs	r2, #1
 80033d8:	0552      	lsls	r2, r2, #21
 80033da:	430a      	orrs	r2, r1
 80033dc:	491f      	ldr	r1, [pc, #124]	@ (800345c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	610b      	str	r3, [r1, #16]
 80033e2:	e011      	b.n	8003408 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033e4:	4b1d      	ldr	r3, [pc, #116]	@ (800345c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80033ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6892      	ldr	r2, [r2, #8]
 80033f4:	0211      	lsls	r1, r2, #8
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6952      	ldr	r2, [r2, #20]
 80033fa:	0852      	lsrs	r2, r2, #1
 80033fc:	3a01      	subs	r2, #1
 80033fe:	0652      	lsls	r2, r2, #25
 8003400:	430a      	orrs	r2, r1
 8003402:	4916      	ldr	r1, [pc, #88]	@ (800345c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003404:	4313      	orrs	r3, r2
 8003406:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003408:	4b14      	ldr	r3, [pc, #80]	@ (800345c <RCCEx_PLLSAI1_Config+0x1e4>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a13      	ldr	r2, [pc, #76]	@ (800345c <RCCEx_PLLSAI1_Config+0x1e4>)
 800340e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003412:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003414:	f7fd ff4a 	bl	80012ac <HAL_GetTick>
 8003418:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800341a:	e009      	b.n	8003430 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800341c:	f7fd ff46 	bl	80012ac <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d902      	bls.n	8003430 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	73fb      	strb	r3, [r7, #15]
          break;
 800342e:	e005      	b.n	800343c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003430:	4b0a      	ldr	r3, [pc, #40]	@ (800345c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0ef      	beq.n	800341c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003442:	4b06      	ldr	r3, [pc, #24]	@ (800345c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003444:	691a      	ldr	r2, [r3, #16]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	4904      	ldr	r1, [pc, #16]	@ (800345c <RCCEx_PLLSAI1_Config+0x1e4>)
 800344c:	4313      	orrs	r3, r2
 800344e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003450:	7bfb      	ldrb	r3, [r7, #15]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40021000 	.word	0x40021000

08003460 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800346e:	4b6a      	ldr	r3, [pc, #424]	@ (8003618 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d018      	beq.n	80034ac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800347a:	4b67      	ldr	r3, [pc, #412]	@ (8003618 <RCCEx_PLLSAI2_Config+0x1b8>)
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f003 0203 	and.w	r2, r3, #3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d10d      	bne.n	80034a6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
       ||
 800348e:	2b00      	cmp	r3, #0
 8003490:	d009      	beq.n	80034a6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003492:	4b61      	ldr	r3, [pc, #388]	@ (8003618 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	091b      	lsrs	r3, r3, #4
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
       ||
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d047      	beq.n	8003536 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	73fb      	strb	r3, [r7, #15]
 80034aa:	e044      	b.n	8003536 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d018      	beq.n	80034e6 <RCCEx_PLLSAI2_Config+0x86>
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d825      	bhi.n	8003504 <RCCEx_PLLSAI2_Config+0xa4>
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d002      	beq.n	80034c2 <RCCEx_PLLSAI2_Config+0x62>
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d009      	beq.n	80034d4 <RCCEx_PLLSAI2_Config+0x74>
 80034c0:	e020      	b.n	8003504 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034c2:	4b55      	ldr	r3, [pc, #340]	@ (8003618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d11d      	bne.n	800350a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d2:	e01a      	b.n	800350a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034d4:	4b50      	ldr	r3, [pc, #320]	@ (8003618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d116      	bne.n	800350e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e4:	e013      	b.n	800350e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034e6:	4b4c      	ldr	r3, [pc, #304]	@ (8003618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10f      	bne.n	8003512 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034f2:	4b49      	ldr	r3, [pc, #292]	@ (8003618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d109      	bne.n	8003512 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003502:	e006      	b.n	8003512 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
      break;
 8003508:	e004      	b.n	8003514 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800350a:	bf00      	nop
 800350c:	e002      	b.n	8003514 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800350e:	bf00      	nop
 8003510:	e000      	b.n	8003514 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003512:	bf00      	nop
    }

    if(status == HAL_OK)
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10d      	bne.n	8003536 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800351a:	4b3f      	ldr	r3, [pc, #252]	@ (8003618 <RCCEx_PLLSAI2_Config+0x1b8>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6819      	ldr	r1, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	3b01      	subs	r3, #1
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	430b      	orrs	r3, r1
 8003530:	4939      	ldr	r1, [pc, #228]	@ (8003618 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003532:	4313      	orrs	r3, r2
 8003534:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d167      	bne.n	800360c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800353c:	4b36      	ldr	r3, [pc, #216]	@ (8003618 <RCCEx_PLLSAI2_Config+0x1b8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a35      	ldr	r2, [pc, #212]	@ (8003618 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003542:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003546:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003548:	f7fd feb0 	bl	80012ac <HAL_GetTick>
 800354c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800354e:	e009      	b.n	8003564 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003550:	f7fd feac 	bl	80012ac <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d902      	bls.n	8003564 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	73fb      	strb	r3, [r7, #15]
        break;
 8003562:	e005      	b.n	8003570 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003564:	4b2c      	ldr	r3, [pc, #176]	@ (8003618 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1ef      	bne.n	8003550 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d14a      	bne.n	800360c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d111      	bne.n	80035a0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800357c:	4b26      	ldr	r3, [pc, #152]	@ (8003618 <RCCEx_PLLSAI2_Config+0x1b8>)
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003584:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6892      	ldr	r2, [r2, #8]
 800358c:	0211      	lsls	r1, r2, #8
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68d2      	ldr	r2, [r2, #12]
 8003592:	0912      	lsrs	r2, r2, #4
 8003594:	0452      	lsls	r2, r2, #17
 8003596:	430a      	orrs	r2, r1
 8003598:	491f      	ldr	r1, [pc, #124]	@ (8003618 <RCCEx_PLLSAI2_Config+0x1b8>)
 800359a:	4313      	orrs	r3, r2
 800359c:	614b      	str	r3, [r1, #20]
 800359e:	e011      	b.n	80035c4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80035a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6892      	ldr	r2, [r2, #8]
 80035b0:	0211      	lsls	r1, r2, #8
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6912      	ldr	r2, [r2, #16]
 80035b6:	0852      	lsrs	r2, r2, #1
 80035b8:	3a01      	subs	r2, #1
 80035ba:	0652      	lsls	r2, r2, #25
 80035bc:	430a      	orrs	r2, r1
 80035be:	4916      	ldr	r1, [pc, #88]	@ (8003618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80035c4:	4b14      	ldr	r3, [pc, #80]	@ (8003618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a13      	ldr	r2, [pc, #76]	@ (8003618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d0:	f7fd fe6c 	bl	80012ac <HAL_GetTick>
 80035d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035d6:	e009      	b.n	80035ec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035d8:	f7fd fe68 	bl	80012ac <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d902      	bls.n	80035ec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	73fb      	strb	r3, [r7, #15]
          break;
 80035ea:	e005      	b.n	80035f8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0ef      	beq.n	80035d8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d106      	bne.n	800360c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80035fe:	4b06      	ldr	r3, [pc, #24]	@ (8003618 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	4904      	ldr	r1, [pc, #16]	@ (8003618 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003608:	4313      	orrs	r3, r2
 800360a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800360c:	7bfb      	ldrb	r3, [r7, #15]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40021000 	.word	0x40021000

0800361c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e095      	b.n	800375a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003632:	2b00      	cmp	r3, #0
 8003634:	d108      	bne.n	8003648 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800363e:	d009      	beq.n	8003654 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	61da      	str	r2, [r3, #28]
 8003646:	e005      	b.n	8003654 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fd fbfa 	bl	8000e68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800368a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003694:	d902      	bls.n	800369c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	e002      	b.n	80036a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800369c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80036aa:	d007      	beq.n	80036bc <HAL_SPI_Init+0xa0>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036b4:	d002      	beq.n	80036bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036f4:	431a      	orrs	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036fe:	ea42 0103 	orr.w	r1, r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003706:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	0c1b      	lsrs	r3, r3, #16
 8003718:	f003 0204 	and.w	r2, r3, #4
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003738:	ea42 0103 	orr.w	r1, r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b088      	sub	sp, #32
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	603b      	str	r3, [r7, #0]
 800376e:	4613      	mov	r3, r2
 8003770:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003772:	f7fd fd9b 	bl	80012ac <HAL_GetTick>
 8003776:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003778:	88fb      	ldrh	r3, [r7, #6]
 800377a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b01      	cmp	r3, #1
 8003786:	d001      	beq.n	800378c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003788:	2302      	movs	r3, #2
 800378a:	e15c      	b.n	8003a46 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <HAL_SPI_Transmit+0x36>
 8003792:	88fb      	ldrh	r3, [r7, #6]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e154      	b.n	8003a46 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <HAL_SPI_Transmit+0x48>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e14d      	b.n	8003a46 <HAL_SPI_Transmit+0x2e4>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2203      	movs	r2, #3
 80037b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	88fa      	ldrh	r2, [r7, #6]
 80037ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	88fa      	ldrh	r2, [r7, #6]
 80037d0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037fc:	d10f      	bne.n	800381e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800380c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800381c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003828:	2b40      	cmp	r3, #64	@ 0x40
 800382a:	d007      	beq.n	800383c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800383a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003844:	d952      	bls.n	80038ec <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <HAL_SPI_Transmit+0xf2>
 800384e:	8b7b      	ldrh	r3, [r7, #26]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d145      	bne.n	80038e0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003858:	881a      	ldrh	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003864:	1c9a      	adds	r2, r3, #2
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003878:	e032      	b.n	80038e0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b02      	cmp	r3, #2
 8003886:	d112      	bne.n	80038ae <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388c:	881a      	ldrh	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003898:	1c9a      	adds	r2, r3, #2
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038ac:	e018      	b.n	80038e0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038ae:	f7fd fcfd 	bl	80012ac <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d803      	bhi.n	80038c6 <HAL_SPI_Transmit+0x164>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038c4:	d102      	bne.n	80038cc <HAL_SPI_Transmit+0x16a>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d109      	bne.n	80038e0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e0b2      	b.n	8003a46 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1c7      	bne.n	800387a <HAL_SPI_Transmit+0x118>
 80038ea:	e083      	b.n	80039f4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <HAL_SPI_Transmit+0x198>
 80038f4:	8b7b      	ldrh	r3, [r7, #26]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d177      	bne.n	80039ea <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038fe:	b29b      	uxth	r3, r3
 8003900:	2b01      	cmp	r3, #1
 8003902:	d912      	bls.n	800392a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003908:	881a      	ldrh	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003914:	1c9a      	adds	r2, r3, #2
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b02      	subs	r3, #2
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003928:	e05f      	b.n	80039ea <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	330c      	adds	r3, #12
 8003934:	7812      	ldrb	r2, [r2, #0]
 8003936:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003950:	e04b      	b.n	80039ea <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b02      	cmp	r3, #2
 800395e:	d12b      	bne.n	80039b8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b01      	cmp	r3, #1
 8003968:	d912      	bls.n	8003990 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396e:	881a      	ldrh	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800397a:	1c9a      	adds	r2, r3, #2
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003984:	b29b      	uxth	r3, r3
 8003986:	3b02      	subs	r3, #2
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800398e:	e02c      	b.n	80039ea <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	330c      	adds	r3, #12
 800399a:	7812      	ldrb	r2, [r2, #0]
 800399c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039b6:	e018      	b.n	80039ea <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039b8:	f7fd fc78 	bl	80012ac <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d803      	bhi.n	80039d0 <HAL_SPI_Transmit+0x26e>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039ce:	d102      	bne.n	80039d6 <HAL_SPI_Transmit+0x274>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e02d      	b.n	8003a46 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1ae      	bne.n	8003952 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039f4:	69fa      	ldr	r2, [r7, #28]
 80039f6:	6839      	ldr	r1, [r7, #0]
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 fb65 	bl	80040c8 <SPI_EndRxTxTransaction>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2220      	movs	r2, #32
 8003a08:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10a      	bne.n	8003a28 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	617b      	str	r3, [r7, #20]
 8003a26:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003a44:	2300      	movs	r3, #0
  }
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3720      	adds	r7, #32
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b08a      	sub	sp, #40	@ 0x28
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a60:	f7fd fc24 	bl	80012ac <HAL_GetTick>
 8003a64:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a6c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003a74:	887b      	ldrh	r3, [r7, #2]
 8003a76:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003a78:	887b      	ldrh	r3, [r7, #2]
 8003a7a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a7c:	7ffb      	ldrb	r3, [r7, #31]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d00c      	beq.n	8003a9c <HAL_SPI_TransmitReceive+0x4e>
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a88:	d106      	bne.n	8003a98 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d102      	bne.n	8003a98 <HAL_SPI_TransmitReceive+0x4a>
 8003a92:	7ffb      	ldrb	r3, [r7, #31]
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d001      	beq.n	8003a9c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e1f3      	b.n	8003e84 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <HAL_SPI_TransmitReceive+0x60>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_SPI_TransmitReceive+0x60>
 8003aa8:	887b      	ldrh	r3, [r7, #2]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e1e8      	b.n	8003e84 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_SPI_TransmitReceive+0x72>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e1e1      	b.n	8003e84 <HAL_SPI_TransmitReceive+0x436>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d003      	beq.n	8003adc <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2205      	movs	r2, #5
 8003ad8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	887a      	ldrh	r2, [r7, #2]
 8003aec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	887a      	ldrh	r2, [r7, #2]
 8003af4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	887a      	ldrh	r2, [r7, #2]
 8003b02:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	887a      	ldrh	r2, [r7, #2]
 8003b08:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b1e:	d802      	bhi.n	8003b26 <HAL_SPI_TransmitReceive+0xd8>
 8003b20:	8abb      	ldrh	r3, [r7, #20]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d908      	bls.n	8003b38 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b34:	605a      	str	r2, [r3, #4]
 8003b36:	e007      	b.n	8003b48 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b46:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b52:	2b40      	cmp	r3, #64	@ 0x40
 8003b54:	d007      	beq.n	8003b66 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b6e:	f240 8083 	bls.w	8003c78 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <HAL_SPI_TransmitReceive+0x132>
 8003b7a:	8afb      	ldrh	r3, [r7, #22]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d16f      	bne.n	8003c60 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b84:	881a      	ldrh	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b90:	1c9a      	adds	r2, r3, #2
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ba4:	e05c      	b.n	8003c60 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d11b      	bne.n	8003bec <HAL_SPI_TransmitReceive+0x19e>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d016      	beq.n	8003bec <HAL_SPI_TransmitReceive+0x19e>
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d113      	bne.n	8003bec <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc8:	881a      	ldrh	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd4:	1c9a      	adds	r2, r3, #2
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d11c      	bne.n	8003c34 <HAL_SPI_TransmitReceive+0x1e6>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d016      	beq.n	8003c34 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c10:	b292      	uxth	r2, r2
 8003c12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c18:	1c9a      	adds	r2, r3, #2
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c30:	2301      	movs	r3, #1
 8003c32:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c34:	f7fd fb3a 	bl	80012ac <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d80d      	bhi.n	8003c60 <HAL_SPI_TransmitReceive+0x212>
 8003c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c4a:	d009      	beq.n	8003c60 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e111      	b.n	8003e84 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d19d      	bne.n	8003ba6 <HAL_SPI_TransmitReceive+0x158>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d197      	bne.n	8003ba6 <HAL_SPI_TransmitReceive+0x158>
 8003c76:	e0e5      	b.n	8003e44 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <HAL_SPI_TransmitReceive+0x23a>
 8003c80:	8afb      	ldrh	r3, [r7, #22]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	f040 80d1 	bne.w	8003e2a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d912      	bls.n	8003cb8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c96:	881a      	ldrh	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca2:	1c9a      	adds	r2, r3, #2
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b02      	subs	r3, #2
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003cb6:	e0b8      	b.n	8003e2a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	330c      	adds	r3, #12
 8003cc2:	7812      	ldrb	r2, [r2, #0]
 8003cc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cde:	e0a4      	b.n	8003e2a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d134      	bne.n	8003d58 <HAL_SPI_TransmitReceive+0x30a>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d02f      	beq.n	8003d58 <HAL_SPI_TransmitReceive+0x30a>
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d12c      	bne.n	8003d58 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d912      	bls.n	8003d2e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0c:	881a      	ldrh	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d18:	1c9a      	adds	r2, r3, #2
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b02      	subs	r3, #2
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d2c:	e012      	b.n	8003d54 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	330c      	adds	r3, #12
 8003d38:	7812      	ldrb	r2, [r2, #0]
 8003d3a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d148      	bne.n	8003df8 <HAL_SPI_TransmitReceive+0x3aa>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d042      	beq.n	8003df8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d923      	bls.n	8003dc6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68da      	ldr	r2, [r3, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d88:	b292      	uxth	r2, r2
 8003d8a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d90:	1c9a      	adds	r2, r3, #2
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b02      	subs	r3, #2
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d81f      	bhi.n	8003df4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003dc2:	605a      	str	r2, [r3, #4]
 8003dc4:	e016      	b.n	8003df4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f103 020c 	add.w	r2, r3, #12
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	7812      	ldrb	r2, [r2, #0]
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003df4:	2301      	movs	r3, #1
 8003df6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003df8:	f7fd fa58 	bl	80012ac <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d803      	bhi.n	8003e10 <HAL_SPI_TransmitReceive+0x3c2>
 8003e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e0e:	d102      	bne.n	8003e16 <HAL_SPI_TransmitReceive+0x3c8>
 8003e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d109      	bne.n	8003e2a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e02c      	b.n	8003e84 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f47f af55 	bne.w	8003ce0 <HAL_SPI_TransmitReceive+0x292>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f47f af4e 	bne.w	8003ce0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e44:	6a3a      	ldr	r2, [r7, #32]
 8003e46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f93d 	bl	80040c8 <SPI_EndRxTxTransaction>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d008      	beq.n	8003e66 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e00e      	b.n	8003e84 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e000      	b.n	8003e84 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003e82:	2300      	movs	r3, #0
  }
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3728      	adds	r7, #40	@ 0x28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	603b      	str	r3, [r7, #0]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e9c:	f7fd fa06 	bl	80012ac <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003eac:	f7fd f9fe 	bl	80012ac <HAL_GetTick>
 8003eb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003eb2:	4b39      	ldr	r3, [pc, #228]	@ (8003f98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	015b      	lsls	r3, r3, #5
 8003eb8:	0d1b      	lsrs	r3, r3, #20
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	fb02 f303 	mul.w	r3, r2, r3
 8003ec0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ec2:	e054      	b.n	8003f6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003eca:	d050      	beq.n	8003f6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ecc:	f7fd f9ee 	bl	80012ac <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d902      	bls.n	8003ee2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d13d      	bne.n	8003f5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003ef0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003efa:	d111      	bne.n	8003f20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f04:	d004      	beq.n	8003f10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f0e:	d107      	bne.n	8003f20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f28:	d10f      	bne.n	8003f4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e017      	b.n	8003f8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4013      	ands	r3, r2
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	bf0c      	ite	eq
 8003f7e:	2301      	moveq	r3, #1
 8003f80:	2300      	movne	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	461a      	mov	r2, r3
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d19b      	bne.n	8003ec4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3720      	adds	r7, #32
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000034 	.word	0x20000034

08003f9c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08a      	sub	sp, #40	@ 0x28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003fae:	f7fd f97d 	bl	80012ac <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb6:	1a9b      	subs	r3, r3, r2
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	4413      	add	r3, r2
 8003fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003fbe:	f7fd f975 	bl	80012ac <HAL_GetTick>
 8003fc2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	330c      	adds	r3, #12
 8003fca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003fcc:	4b3d      	ldr	r3, [pc, #244]	@ (80040c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	00da      	lsls	r2, r3, #3
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	0d1b      	lsrs	r3, r3, #20
 8003fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fde:	fb02 f303 	mul.w	r3, r2, r3
 8003fe2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003fe4:	e060      	b.n	80040a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003fec:	d107      	bne.n	8003ffe <SPI_WaitFifoStateUntilTimeout+0x62>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d104      	bne.n	8003ffe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004004:	d050      	beq.n	80040a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004006:	f7fd f951 	bl	80012ac <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004012:	429a      	cmp	r2, r3
 8004014:	d902      	bls.n	800401c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	2b00      	cmp	r3, #0
 800401a:	d13d      	bne.n	8004098 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800402a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004034:	d111      	bne.n	800405a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800403e:	d004      	beq.n	800404a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004048:	d107      	bne.n	800405a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004058:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004062:	d10f      	bne.n	8004084 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004082:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e010      	b.n	80040ba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	4013      	ands	r3, r2
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d196      	bne.n	8003fe6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3728      	adds	r7, #40	@ 0x28
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20000034 	.word	0x20000034

080040c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2200      	movs	r2, #0
 80040dc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f7ff ff5b 	bl	8003f9c <SPI_WaitFifoStateUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d007      	beq.n	80040fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040f0:	f043 0220 	orr.w	r2, r3, #32
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e027      	b.n	800414c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2200      	movs	r2, #0
 8004104:	2180      	movs	r1, #128	@ 0x80
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f7ff fec0 	bl	8003e8c <SPI_WaitFlagStateUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d007      	beq.n	8004122 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004116:	f043 0220 	orr.w	r2, r3, #32
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e014      	b.n	800414c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2200      	movs	r2, #0
 800412a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f7ff ff34 	bl	8003f9c <SPI_WaitFifoStateUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d007      	beq.n	800414a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800413e:	f043 0220 	orr.w	r2, r3, #32
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e000      	b.n	800414c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e040      	b.n	80041e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800416a:	2b00      	cmp	r3, #0
 800416c:	d106      	bne.n	800417c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7fc feba 	bl	8000ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2224      	movs	r2, #36	@ 0x24
 8004180:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0201 	bic.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 fb6a 	bl	8004874 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f8af 	bl	8004304 <UART_SetConfig>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e01b      	b.n	80041e8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 fbe9 	bl	80049b8 <UART_CheckIdleState>
 80041e6:	4603      	mov	r3, r0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08a      	sub	sp, #40	@ 0x28
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	4613      	mov	r3, r2
 80041fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004204:	2b20      	cmp	r3, #32
 8004206:	d177      	bne.n	80042f8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <HAL_UART_Transmit+0x24>
 800420e:	88fb      	ldrh	r3, [r7, #6]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e070      	b.n	80042fa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2221      	movs	r2, #33	@ 0x21
 8004224:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004226:	f7fd f841 	bl	80012ac <HAL_GetTick>
 800422a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	88fa      	ldrh	r2, [r7, #6]
 8004230:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	88fa      	ldrh	r2, [r7, #6]
 8004238:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004244:	d108      	bne.n	8004258 <HAL_UART_Transmit+0x68>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d104      	bne.n	8004258 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	e003      	b.n	8004260 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800425c:	2300      	movs	r3, #0
 800425e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004260:	e02f      	b.n	80042c2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2200      	movs	r2, #0
 800426a:	2180      	movs	r1, #128	@ 0x80
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 fc4b 	bl	8004b08 <UART_WaitOnFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d004      	beq.n	8004282 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e03b      	b.n	80042fa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10b      	bne.n	80042a0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	881a      	ldrh	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004294:	b292      	uxth	r2, r2
 8004296:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	3302      	adds	r3, #2
 800429c:	61bb      	str	r3, [r7, #24]
 800429e:	e007      	b.n	80042b0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	781a      	ldrb	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	3301      	adds	r3, #1
 80042ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1c9      	bne.n	8004262 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2200      	movs	r2, #0
 80042d6:	2140      	movs	r1, #64	@ 0x40
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 fc15 	bl	8004b08 <UART_WaitOnFlagUntilTimeout>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d004      	beq.n	80042ee <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e005      	b.n	80042fa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2220      	movs	r2, #32
 80042f2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80042f4:	2300      	movs	r3, #0
 80042f6:	e000      	b.n	80042fa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80042f8:	2302      	movs	r3, #2
  }
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3720      	adds	r7, #32
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004308:	b08a      	sub	sp, #40	@ 0x28
 800430a:	af00      	add	r7, sp, #0
 800430c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	431a      	orrs	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	431a      	orrs	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	4313      	orrs	r3, r2
 800432a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4ba4      	ldr	r3, [pc, #656]	@ (80045c4 <UART_SetConfig+0x2c0>)
 8004334:	4013      	ands	r3, r2
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800433c:	430b      	orrs	r3, r1
 800433e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a99      	ldr	r2, [pc, #612]	@ (80045c8 <UART_SetConfig+0x2c4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d004      	beq.n	8004370 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800436c:	4313      	orrs	r3, r2
 800436e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004380:	430a      	orrs	r2, r1
 8004382:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a90      	ldr	r2, [pc, #576]	@ (80045cc <UART_SetConfig+0x2c8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d126      	bne.n	80043dc <UART_SetConfig+0xd8>
 800438e:	4b90      	ldr	r3, [pc, #576]	@ (80045d0 <UART_SetConfig+0x2cc>)
 8004390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004394:	f003 0303 	and.w	r3, r3, #3
 8004398:	2b03      	cmp	r3, #3
 800439a:	d81b      	bhi.n	80043d4 <UART_SetConfig+0xd0>
 800439c:	a201      	add	r2, pc, #4	@ (adr r2, 80043a4 <UART_SetConfig+0xa0>)
 800439e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a2:	bf00      	nop
 80043a4:	080043b5 	.word	0x080043b5
 80043a8:	080043c5 	.word	0x080043c5
 80043ac:	080043bd 	.word	0x080043bd
 80043b0:	080043cd 	.word	0x080043cd
 80043b4:	2301      	movs	r3, #1
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ba:	e116      	b.n	80045ea <UART_SetConfig+0x2e6>
 80043bc:	2302      	movs	r3, #2
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043c2:	e112      	b.n	80045ea <UART_SetConfig+0x2e6>
 80043c4:	2304      	movs	r3, #4
 80043c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ca:	e10e      	b.n	80045ea <UART_SetConfig+0x2e6>
 80043cc:	2308      	movs	r3, #8
 80043ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043d2:	e10a      	b.n	80045ea <UART_SetConfig+0x2e6>
 80043d4:	2310      	movs	r3, #16
 80043d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043da:	e106      	b.n	80045ea <UART_SetConfig+0x2e6>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a7c      	ldr	r2, [pc, #496]	@ (80045d4 <UART_SetConfig+0x2d0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d138      	bne.n	8004458 <UART_SetConfig+0x154>
 80043e6:	4b7a      	ldr	r3, [pc, #488]	@ (80045d0 <UART_SetConfig+0x2cc>)
 80043e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ec:	f003 030c 	and.w	r3, r3, #12
 80043f0:	2b0c      	cmp	r3, #12
 80043f2:	d82d      	bhi.n	8004450 <UART_SetConfig+0x14c>
 80043f4:	a201      	add	r2, pc, #4	@ (adr r2, 80043fc <UART_SetConfig+0xf8>)
 80043f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fa:	bf00      	nop
 80043fc:	08004431 	.word	0x08004431
 8004400:	08004451 	.word	0x08004451
 8004404:	08004451 	.word	0x08004451
 8004408:	08004451 	.word	0x08004451
 800440c:	08004441 	.word	0x08004441
 8004410:	08004451 	.word	0x08004451
 8004414:	08004451 	.word	0x08004451
 8004418:	08004451 	.word	0x08004451
 800441c:	08004439 	.word	0x08004439
 8004420:	08004451 	.word	0x08004451
 8004424:	08004451 	.word	0x08004451
 8004428:	08004451 	.word	0x08004451
 800442c:	08004449 	.word	0x08004449
 8004430:	2300      	movs	r3, #0
 8004432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004436:	e0d8      	b.n	80045ea <UART_SetConfig+0x2e6>
 8004438:	2302      	movs	r3, #2
 800443a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800443e:	e0d4      	b.n	80045ea <UART_SetConfig+0x2e6>
 8004440:	2304      	movs	r3, #4
 8004442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004446:	e0d0      	b.n	80045ea <UART_SetConfig+0x2e6>
 8004448:	2308      	movs	r3, #8
 800444a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800444e:	e0cc      	b.n	80045ea <UART_SetConfig+0x2e6>
 8004450:	2310      	movs	r3, #16
 8004452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004456:	e0c8      	b.n	80045ea <UART_SetConfig+0x2e6>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a5e      	ldr	r2, [pc, #376]	@ (80045d8 <UART_SetConfig+0x2d4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d125      	bne.n	80044ae <UART_SetConfig+0x1aa>
 8004462:	4b5b      	ldr	r3, [pc, #364]	@ (80045d0 <UART_SetConfig+0x2cc>)
 8004464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004468:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800446c:	2b30      	cmp	r3, #48	@ 0x30
 800446e:	d016      	beq.n	800449e <UART_SetConfig+0x19a>
 8004470:	2b30      	cmp	r3, #48	@ 0x30
 8004472:	d818      	bhi.n	80044a6 <UART_SetConfig+0x1a2>
 8004474:	2b20      	cmp	r3, #32
 8004476:	d00a      	beq.n	800448e <UART_SetConfig+0x18a>
 8004478:	2b20      	cmp	r3, #32
 800447a:	d814      	bhi.n	80044a6 <UART_SetConfig+0x1a2>
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <UART_SetConfig+0x182>
 8004480:	2b10      	cmp	r3, #16
 8004482:	d008      	beq.n	8004496 <UART_SetConfig+0x192>
 8004484:	e00f      	b.n	80044a6 <UART_SetConfig+0x1a2>
 8004486:	2300      	movs	r3, #0
 8004488:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800448c:	e0ad      	b.n	80045ea <UART_SetConfig+0x2e6>
 800448e:	2302      	movs	r3, #2
 8004490:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004494:	e0a9      	b.n	80045ea <UART_SetConfig+0x2e6>
 8004496:	2304      	movs	r3, #4
 8004498:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800449c:	e0a5      	b.n	80045ea <UART_SetConfig+0x2e6>
 800449e:	2308      	movs	r3, #8
 80044a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044a4:	e0a1      	b.n	80045ea <UART_SetConfig+0x2e6>
 80044a6:	2310      	movs	r3, #16
 80044a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ac:	e09d      	b.n	80045ea <UART_SetConfig+0x2e6>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a4a      	ldr	r2, [pc, #296]	@ (80045dc <UART_SetConfig+0x2d8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d125      	bne.n	8004504 <UART_SetConfig+0x200>
 80044b8:	4b45      	ldr	r3, [pc, #276]	@ (80045d0 <UART_SetConfig+0x2cc>)
 80044ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80044c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80044c4:	d016      	beq.n	80044f4 <UART_SetConfig+0x1f0>
 80044c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80044c8:	d818      	bhi.n	80044fc <UART_SetConfig+0x1f8>
 80044ca:	2b80      	cmp	r3, #128	@ 0x80
 80044cc:	d00a      	beq.n	80044e4 <UART_SetConfig+0x1e0>
 80044ce:	2b80      	cmp	r3, #128	@ 0x80
 80044d0:	d814      	bhi.n	80044fc <UART_SetConfig+0x1f8>
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <UART_SetConfig+0x1d8>
 80044d6:	2b40      	cmp	r3, #64	@ 0x40
 80044d8:	d008      	beq.n	80044ec <UART_SetConfig+0x1e8>
 80044da:	e00f      	b.n	80044fc <UART_SetConfig+0x1f8>
 80044dc:	2300      	movs	r3, #0
 80044de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044e2:	e082      	b.n	80045ea <UART_SetConfig+0x2e6>
 80044e4:	2302      	movs	r3, #2
 80044e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ea:	e07e      	b.n	80045ea <UART_SetConfig+0x2e6>
 80044ec:	2304      	movs	r3, #4
 80044ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044f2:	e07a      	b.n	80045ea <UART_SetConfig+0x2e6>
 80044f4:	2308      	movs	r3, #8
 80044f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044fa:	e076      	b.n	80045ea <UART_SetConfig+0x2e6>
 80044fc:	2310      	movs	r3, #16
 80044fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004502:	e072      	b.n	80045ea <UART_SetConfig+0x2e6>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a35      	ldr	r2, [pc, #212]	@ (80045e0 <UART_SetConfig+0x2dc>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d12a      	bne.n	8004564 <UART_SetConfig+0x260>
 800450e:	4b30      	ldr	r3, [pc, #192]	@ (80045d0 <UART_SetConfig+0x2cc>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004514:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004518:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800451c:	d01a      	beq.n	8004554 <UART_SetConfig+0x250>
 800451e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004522:	d81b      	bhi.n	800455c <UART_SetConfig+0x258>
 8004524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004528:	d00c      	beq.n	8004544 <UART_SetConfig+0x240>
 800452a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800452e:	d815      	bhi.n	800455c <UART_SetConfig+0x258>
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <UART_SetConfig+0x238>
 8004534:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004538:	d008      	beq.n	800454c <UART_SetConfig+0x248>
 800453a:	e00f      	b.n	800455c <UART_SetConfig+0x258>
 800453c:	2300      	movs	r3, #0
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004542:	e052      	b.n	80045ea <UART_SetConfig+0x2e6>
 8004544:	2302      	movs	r3, #2
 8004546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800454a:	e04e      	b.n	80045ea <UART_SetConfig+0x2e6>
 800454c:	2304      	movs	r3, #4
 800454e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004552:	e04a      	b.n	80045ea <UART_SetConfig+0x2e6>
 8004554:	2308      	movs	r3, #8
 8004556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800455a:	e046      	b.n	80045ea <UART_SetConfig+0x2e6>
 800455c:	2310      	movs	r3, #16
 800455e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004562:	e042      	b.n	80045ea <UART_SetConfig+0x2e6>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a17      	ldr	r2, [pc, #92]	@ (80045c8 <UART_SetConfig+0x2c4>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d13a      	bne.n	80045e4 <UART_SetConfig+0x2e0>
 800456e:	4b18      	ldr	r3, [pc, #96]	@ (80045d0 <UART_SetConfig+0x2cc>)
 8004570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004574:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004578:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800457c:	d01a      	beq.n	80045b4 <UART_SetConfig+0x2b0>
 800457e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004582:	d81b      	bhi.n	80045bc <UART_SetConfig+0x2b8>
 8004584:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004588:	d00c      	beq.n	80045a4 <UART_SetConfig+0x2a0>
 800458a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800458e:	d815      	bhi.n	80045bc <UART_SetConfig+0x2b8>
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <UART_SetConfig+0x298>
 8004594:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004598:	d008      	beq.n	80045ac <UART_SetConfig+0x2a8>
 800459a:	e00f      	b.n	80045bc <UART_SetConfig+0x2b8>
 800459c:	2300      	movs	r3, #0
 800459e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045a2:	e022      	b.n	80045ea <UART_SetConfig+0x2e6>
 80045a4:	2302      	movs	r3, #2
 80045a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045aa:	e01e      	b.n	80045ea <UART_SetConfig+0x2e6>
 80045ac:	2304      	movs	r3, #4
 80045ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045b2:	e01a      	b.n	80045ea <UART_SetConfig+0x2e6>
 80045b4:	2308      	movs	r3, #8
 80045b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ba:	e016      	b.n	80045ea <UART_SetConfig+0x2e6>
 80045bc:	2310      	movs	r3, #16
 80045be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045c2:	e012      	b.n	80045ea <UART_SetConfig+0x2e6>
 80045c4:	efff69f3 	.word	0xefff69f3
 80045c8:	40008000 	.word	0x40008000
 80045cc:	40013800 	.word	0x40013800
 80045d0:	40021000 	.word	0x40021000
 80045d4:	40004400 	.word	0x40004400
 80045d8:	40004800 	.word	0x40004800
 80045dc:	40004c00 	.word	0x40004c00
 80045e0:	40005000 	.word	0x40005000
 80045e4:	2310      	movs	r3, #16
 80045e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a9f      	ldr	r2, [pc, #636]	@ (800486c <UART_SetConfig+0x568>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d17a      	bne.n	80046ea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d824      	bhi.n	8004646 <UART_SetConfig+0x342>
 80045fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004604 <UART_SetConfig+0x300>)
 80045fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004602:	bf00      	nop
 8004604:	08004629 	.word	0x08004629
 8004608:	08004647 	.word	0x08004647
 800460c:	08004631 	.word	0x08004631
 8004610:	08004647 	.word	0x08004647
 8004614:	08004637 	.word	0x08004637
 8004618:	08004647 	.word	0x08004647
 800461c:	08004647 	.word	0x08004647
 8004620:	08004647 	.word	0x08004647
 8004624:	0800463f 	.word	0x0800463f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004628:	f7fe fab0 	bl	8002b8c <HAL_RCC_GetPCLK1Freq>
 800462c:	61f8      	str	r0, [r7, #28]
        break;
 800462e:	e010      	b.n	8004652 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004630:	4b8f      	ldr	r3, [pc, #572]	@ (8004870 <UART_SetConfig+0x56c>)
 8004632:	61fb      	str	r3, [r7, #28]
        break;
 8004634:	e00d      	b.n	8004652 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004636:	f7fe fa11 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 800463a:	61f8      	str	r0, [r7, #28]
        break;
 800463c:	e009      	b.n	8004652 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800463e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004642:	61fb      	str	r3, [r7, #28]
        break;
 8004644:	e005      	b.n	8004652 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004650:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80fb 	beq.w	8004850 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	4413      	add	r3, r2
 8004664:	69fa      	ldr	r2, [r7, #28]
 8004666:	429a      	cmp	r2, r3
 8004668:	d305      	bcc.n	8004676 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004670:	69fa      	ldr	r2, [r7, #28]
 8004672:	429a      	cmp	r2, r3
 8004674:	d903      	bls.n	800467e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800467c:	e0e8      	b.n	8004850 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	2200      	movs	r2, #0
 8004682:	461c      	mov	r4, r3
 8004684:	4615      	mov	r5, r2
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	022b      	lsls	r3, r5, #8
 8004690:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004694:	0222      	lsls	r2, r4, #8
 8004696:	68f9      	ldr	r1, [r7, #12]
 8004698:	6849      	ldr	r1, [r1, #4]
 800469a:	0849      	lsrs	r1, r1, #1
 800469c:	2000      	movs	r0, #0
 800469e:	4688      	mov	r8, r1
 80046a0:	4681      	mov	r9, r0
 80046a2:	eb12 0a08 	adds.w	sl, r2, r8
 80046a6:	eb43 0b09 	adc.w	fp, r3, r9
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	603b      	str	r3, [r7, #0]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046b8:	4650      	mov	r0, sl
 80046ba:	4659      	mov	r1, fp
 80046bc:	f7fb fdd8 	bl	8000270 <__aeabi_uldivmod>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	4613      	mov	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046ce:	d308      	bcc.n	80046e2 <UART_SetConfig+0x3de>
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046d6:	d204      	bcs.n	80046e2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	60da      	str	r2, [r3, #12]
 80046e0:	e0b6      	b.n	8004850 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80046e8:	e0b2      	b.n	8004850 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046f2:	d15e      	bne.n	80047b2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80046f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d828      	bhi.n	800474e <UART_SetConfig+0x44a>
 80046fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004704 <UART_SetConfig+0x400>)
 80046fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004702:	bf00      	nop
 8004704:	08004729 	.word	0x08004729
 8004708:	08004731 	.word	0x08004731
 800470c:	08004739 	.word	0x08004739
 8004710:	0800474f 	.word	0x0800474f
 8004714:	0800473f 	.word	0x0800473f
 8004718:	0800474f 	.word	0x0800474f
 800471c:	0800474f 	.word	0x0800474f
 8004720:	0800474f 	.word	0x0800474f
 8004724:	08004747 	.word	0x08004747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004728:	f7fe fa30 	bl	8002b8c <HAL_RCC_GetPCLK1Freq>
 800472c:	61f8      	str	r0, [r7, #28]
        break;
 800472e:	e014      	b.n	800475a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004730:	f7fe fa42 	bl	8002bb8 <HAL_RCC_GetPCLK2Freq>
 8004734:	61f8      	str	r0, [r7, #28]
        break;
 8004736:	e010      	b.n	800475a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004738:	4b4d      	ldr	r3, [pc, #308]	@ (8004870 <UART_SetConfig+0x56c>)
 800473a:	61fb      	str	r3, [r7, #28]
        break;
 800473c:	e00d      	b.n	800475a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800473e:	f7fe f98d 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 8004742:	61f8      	str	r0, [r7, #28]
        break;
 8004744:	e009      	b.n	800475a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004746:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800474a:	61fb      	str	r3, [r7, #28]
        break;
 800474c:	e005      	b.n	800475a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004758:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d077      	beq.n	8004850 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	005a      	lsls	r2, r3, #1
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	085b      	lsrs	r3, r3, #1
 800476a:	441a      	add	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	fbb2 f3f3 	udiv	r3, r2, r3
 8004774:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	2b0f      	cmp	r3, #15
 800477a:	d916      	bls.n	80047aa <UART_SetConfig+0x4a6>
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004782:	d212      	bcs.n	80047aa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	b29b      	uxth	r3, r3
 8004788:	f023 030f 	bic.w	r3, r3, #15
 800478c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	085b      	lsrs	r3, r3, #1
 8004792:	b29b      	uxth	r3, r3
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	b29a      	uxth	r2, r3
 800479a:	8afb      	ldrh	r3, [r7, #22]
 800479c:	4313      	orrs	r3, r2
 800479e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	8afa      	ldrh	r2, [r7, #22]
 80047a6:	60da      	str	r2, [r3, #12]
 80047a8:	e052      	b.n	8004850 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80047b0:	e04e      	b.n	8004850 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d827      	bhi.n	800480a <UART_SetConfig+0x506>
 80047ba:	a201      	add	r2, pc, #4	@ (adr r2, 80047c0 <UART_SetConfig+0x4bc>)
 80047bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c0:	080047e5 	.word	0x080047e5
 80047c4:	080047ed 	.word	0x080047ed
 80047c8:	080047f5 	.word	0x080047f5
 80047cc:	0800480b 	.word	0x0800480b
 80047d0:	080047fb 	.word	0x080047fb
 80047d4:	0800480b 	.word	0x0800480b
 80047d8:	0800480b 	.word	0x0800480b
 80047dc:	0800480b 	.word	0x0800480b
 80047e0:	08004803 	.word	0x08004803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047e4:	f7fe f9d2 	bl	8002b8c <HAL_RCC_GetPCLK1Freq>
 80047e8:	61f8      	str	r0, [r7, #28]
        break;
 80047ea:	e014      	b.n	8004816 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047ec:	f7fe f9e4 	bl	8002bb8 <HAL_RCC_GetPCLK2Freq>
 80047f0:	61f8      	str	r0, [r7, #28]
        break;
 80047f2:	e010      	b.n	8004816 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004870 <UART_SetConfig+0x56c>)
 80047f6:	61fb      	str	r3, [r7, #28]
        break;
 80047f8:	e00d      	b.n	8004816 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047fa:	f7fe f92f 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 80047fe:	61f8      	str	r0, [r7, #28]
        break;
 8004800:	e009      	b.n	8004816 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004802:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004806:	61fb      	str	r3, [r7, #28]
        break;
 8004808:	e005      	b.n	8004816 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004814:	bf00      	nop
    }

    if (pclk != 0U)
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d019      	beq.n	8004850 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	085a      	lsrs	r2, r3, #1
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	441a      	add	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	fbb2 f3f3 	udiv	r3, r2, r3
 800482e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	2b0f      	cmp	r3, #15
 8004834:	d909      	bls.n	800484a <UART_SetConfig+0x546>
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800483c:	d205      	bcs.n	800484a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60da      	str	r2, [r3, #12]
 8004848:	e002      	b.n	8004850 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800485c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004860:	4618      	mov	r0, r3
 8004862:	3728      	adds	r7, #40	@ 0x28
 8004864:	46bd      	mov	sp, r7
 8004866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800486a:	bf00      	nop
 800486c:	40008000 	.word	0x40008000
 8004870:	00f42400 	.word	0x00f42400

08004874 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01a      	beq.n	800498a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004972:	d10a      	bne.n	800498a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	605a      	str	r2, [r3, #4]
  }
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b098      	sub	sp, #96	@ 0x60
 80049bc:	af02      	add	r7, sp, #8
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049c8:	f7fc fc70 	bl	80012ac <HAL_GetTick>
 80049cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d12e      	bne.n	8004a3a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049e4:	2200      	movs	r2, #0
 80049e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f88c 	bl	8004b08 <UART_WaitOnFlagUntilTimeout>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d021      	beq.n	8004a3a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049fe:	e853 3f00 	ldrex	r3, [r3]
 8004a02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	461a      	mov	r2, r3
 8004a12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a16:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a1c:	e841 2300 	strex	r3, r2, [r1]
 8004a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e6      	bne.n	80049f6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e062      	b.n	8004b00 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d149      	bne.n	8004adc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a50:	2200      	movs	r2, #0
 8004a52:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f856 	bl	8004b08 <UART_WaitOnFlagUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d03c      	beq.n	8004adc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6a:	e853 3f00 	ldrex	r3, [r3]
 8004a6e:	623b      	str	r3, [r7, #32]
   return(result);
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a80:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a82:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a88:	e841 2300 	strex	r3, r2, [r1]
 8004a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e6      	bne.n	8004a62 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3308      	adds	r3, #8
 8004a9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	e853 3f00 	ldrex	r3, [r3]
 8004aa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0301 	bic.w	r3, r3, #1
 8004aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3308      	adds	r3, #8
 8004ab2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ab4:	61fa      	str	r2, [r7, #28]
 8004ab6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab8:	69b9      	ldr	r1, [r7, #24]
 8004aba:	69fa      	ldr	r2, [r7, #28]
 8004abc:	e841 2300 	strex	r3, r2, [r1]
 8004ac0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1e5      	bne.n	8004a94 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e011      	b.n	8004b00 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3758      	adds	r7, #88	@ 0x58
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	603b      	str	r3, [r7, #0]
 8004b14:	4613      	mov	r3, r2
 8004b16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b18:	e04f      	b.n	8004bba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b20:	d04b      	beq.n	8004bba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b22:	f7fc fbc3 	bl	80012ac <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d302      	bcc.n	8004b38 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e04e      	b.n	8004bda <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d037      	beq.n	8004bba <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2b80      	cmp	r3, #128	@ 0x80
 8004b4e:	d034      	beq.n	8004bba <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b40      	cmp	r3, #64	@ 0x40
 8004b54:	d031      	beq.n	8004bba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	f003 0308 	and.w	r3, r3, #8
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d110      	bne.n	8004b86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2208      	movs	r2, #8
 8004b6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 f838 	bl	8004be2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2208      	movs	r2, #8
 8004b76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e029      	b.n	8004bda <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b94:	d111      	bne.n	8004bba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 f81e 	bl	8004be2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e00f      	b.n	8004bda <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69da      	ldr	r2, [r3, #28]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	bf0c      	ite	eq
 8004bca:	2301      	moveq	r3, #1
 8004bcc:	2300      	movne	r3, #0
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	79fb      	ldrb	r3, [r7, #7]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d0a0      	beq.n	8004b1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b095      	sub	sp, #84	@ 0x54
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c08:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c0a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e6      	bne.n	8004bea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3308      	adds	r3, #8
 8004c22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	e853 3f00 	ldrex	r3, [r3]
 8004c2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	f023 0301 	bic.w	r3, r3, #1
 8004c32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3308      	adds	r3, #8
 8004c3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c44:	e841 2300 	strex	r3, r2, [r1]
 8004c48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e5      	bne.n	8004c1c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d118      	bne.n	8004c8a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	e853 3f00 	ldrex	r3, [r3]
 8004c64:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f023 0310 	bic.w	r3, r3, #16
 8004c6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	461a      	mov	r2, r3
 8004c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c76:	61bb      	str	r3, [r7, #24]
 8004c78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7a:	6979      	ldr	r1, [r7, #20]
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	e841 2300 	strex	r3, r2, [r1]
 8004c82:	613b      	str	r3, [r7, #16]
   return(result);
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1e6      	bne.n	8004c58 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004c9e:	bf00      	nop
 8004ca0:	3754      	adds	r7, #84	@ 0x54
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
	...

08004cac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004cb0:	4904      	ldr	r1, [pc, #16]	@ (8004cc4 <MX_FATFS_Init+0x18>)
 8004cb2:	4805      	ldr	r0, [pc, #20]	@ (8004cc8 <MX_FATFS_Init+0x1c>)
 8004cb4:	f003 fba2 	bl	80083fc <FATFS_LinkDriver>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	461a      	mov	r2, r3
 8004cbc:	4b03      	ldr	r3, [pc, #12]	@ (8004ccc <MX_FATFS_Init+0x20>)
 8004cbe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004cc0:	bf00      	nop
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	20003a24 	.word	0x20003a24
 8004cc8:	20000040 	.word	0x20000040
 8004ccc:	20003a20 	.word	0x20003a20

08004cd0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004cd4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004cea:	4804      	ldr	r0, [pc, #16]	@ (8004cfc <SELECT+0x1c>)
 8004cec:	f7fd f95e 	bl	8001fac <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8004cf0:	2001      	movs	r0, #1
 8004cf2:	f7fc fae7 	bl	80012c4 <HAL_Delay>
}
 8004cf6:	bf00      	nop
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	48000400 	.word	0x48000400

08004d00 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8004d04:	2201      	movs	r2, #1
 8004d06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004d0a:	4804      	ldr	r0, [pc, #16]	@ (8004d1c <DESELECT+0x1c>)
 8004d0c:	f7fd f94e 	bl	8001fac <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8004d10:	2001      	movs	r0, #1
 8004d12:	f7fc fad7 	bl	80012c4 <HAL_Delay>
}
 8004d16:	bf00      	nop
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	48000400 	.word	0x48000400

08004d20 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4603      	mov	r3, r0
 8004d28:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8004d2a:	bf00      	nop
 8004d2c:	4b08      	ldr	r3, [pc, #32]	@ (8004d50 <SPI_TxByte+0x30>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d1f8      	bne.n	8004d2c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8004d3a:	1df9      	adds	r1, r7, #7
 8004d3c:	2364      	movs	r3, #100	@ 0x64
 8004d3e:	2201      	movs	r2, #1
 8004d40:	4803      	ldr	r0, [pc, #12]	@ (8004d50 <SPI_TxByte+0x30>)
 8004d42:	f7fe fd0e 	bl	8003762 <HAL_SPI_Transmit>
}
 8004d46:	bf00      	nop
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	200001a0 	.word	0x200001a0

08004d54 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8004d60:	bf00      	nop
 8004d62:	4b08      	ldr	r3, [pc, #32]	@ (8004d84 <SPI_TxBuffer+0x30>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d1f8      	bne.n	8004d62 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8004d70:	887a      	ldrh	r2, [r7, #2]
 8004d72:	2364      	movs	r3, #100	@ 0x64
 8004d74:	6879      	ldr	r1, [r7, #4]
 8004d76:	4803      	ldr	r0, [pc, #12]	@ (8004d84 <SPI_TxBuffer+0x30>)
 8004d78:	f7fe fcf3 	bl	8003762 <HAL_SPI_Transmit>
}
 8004d7c:	bf00      	nop
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	200001a0 	.word	0x200001a0

08004d88 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8004d8e:	23ff      	movs	r3, #255	@ 0xff
 8004d90:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8004d92:	bf00      	nop
 8004d94:	4b09      	ldr	r3, [pc, #36]	@ (8004dbc <SPI_RxByte+0x34>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d1f8      	bne.n	8004d94 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8004da2:	1dba      	adds	r2, r7, #6
 8004da4:	1df9      	adds	r1, r7, #7
 8004da6:	2364      	movs	r3, #100	@ 0x64
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	2301      	movs	r3, #1
 8004dac:	4803      	ldr	r0, [pc, #12]	@ (8004dbc <SPI_RxByte+0x34>)
 8004dae:	f7fe fe4e 	bl	8003a4e <HAL_SPI_TransmitReceive>

  return data;
 8004db2:	79bb      	ldrb	r3, [r7, #6]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	200001a0 	.word	0x200001a0

08004dc0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8004dc8:	f7ff ffde 	bl	8004d88 <SPI_RxByte>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	461a      	mov	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	701a      	strb	r2, [r3, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 8004de2:	4b0a      	ldr	r3, [pc, #40]	@ (8004e0c <SD_ReadyWait+0x30>)
 8004de4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004de8:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8004dea:	f7ff ffcd 	bl	8004d88 <SPI_RxByte>
 8004dee:	4603      	mov	r3, r0
 8004df0:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	2bff      	cmp	r3, #255	@ 0xff
 8004df6:	d003      	beq.n	8004e00 <SD_ReadyWait+0x24>
 8004df8:	4b04      	ldr	r3, [pc, #16]	@ (8004e0c <SD_ReadyWait+0x30>)
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1f4      	bne.n	8004dea <SD_ReadyWait+0xe>

  return res;
 8004e00:	79fb      	ldrb	r3, [r7, #7]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20003a2a 	.word	0x20003a2a

08004e10 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8004e16:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8004e1c:	f7ff ff70 	bl	8004d00 <DESELECT>
  for(int i = 0; i < 10; i++)
 8004e20:	2300      	movs	r3, #0
 8004e22:	60bb      	str	r3, [r7, #8]
 8004e24:	e005      	b.n	8004e32 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8004e26:	20ff      	movs	r0, #255	@ 0xff
 8004e28:	f7ff ff7a 	bl	8004d20 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	60bb      	str	r3, [r7, #8]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2b09      	cmp	r3, #9
 8004e36:	ddf6      	ble.n	8004e26 <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8004e38:	f7ff ff52 	bl	8004ce0 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8004e3c:	2340      	movs	r3, #64	@ 0x40
 8004e3e:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8004e40:	2300      	movs	r3, #0
 8004e42:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8004e44:	2300      	movs	r3, #0
 8004e46:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8004e50:	2395      	movs	r3, #149	@ 0x95
 8004e52:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8004e54:	463b      	mov	r3, r7
 8004e56:	2106      	movs	r1, #6
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7ff ff7b 	bl	8004d54 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8004e5e:	e002      	b.n	8004e66 <SD_PowerOn+0x56>
  {
    cnt--;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8004e66:	f7ff ff8f 	bl	8004d88 <SPI_RxByte>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d002      	beq.n	8004e76 <SD_PowerOn+0x66>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f4      	bne.n	8004e60 <SD_PowerOn+0x50>
  }

  DESELECT();
 8004e76:	f7ff ff43 	bl	8004d00 <DESELECT>
  SPI_TxByte(0XFF);
 8004e7a:	20ff      	movs	r0, #255	@ 0xff
 8004e7c:	f7ff ff50 	bl	8004d20 <SPI_TxByte>

  PowerFlag = 1;
 8004e80:	4b03      	ldr	r3, [pc, #12]	@ (8004e90 <SD_PowerOn+0x80>)
 8004e82:	2201      	movs	r2, #1
 8004e84:	701a      	strb	r2, [r3, #0]
}
 8004e86:	bf00      	nop
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	20003a2d 	.word	0x20003a2d

08004e94 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8004e98:	4b03      	ldr	r3, [pc, #12]	@ (8004ea8 <SD_PowerOff+0x14>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	701a      	strb	r2, [r3, #0]
}
 8004e9e:	bf00      	nop
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	20003a2d 	.word	0x20003a2d

08004eac <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  return PowerFlag;
 8004eb0:	4b03      	ldr	r3, [pc, #12]	@ (8004ec0 <SD_CheckPower+0x14>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	20003a2d 	.word	0x20003a2d

08004ec4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8004ece:	4b13      	ldr	r3, [pc, #76]	@ (8004f1c <SD_RxDataBlock+0x58>)
 8004ed0:	22c8      	movs	r2, #200	@ 0xc8
 8004ed2:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8004ed4:	f7ff ff58 	bl	8004d88 <SPI_RxByte>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
 8004ede:	2bff      	cmp	r3, #255	@ 0xff
 8004ee0:	d103      	bne.n	8004eea <SD_RxDataBlock+0x26>
 8004ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8004f1c <SD_RxDataBlock+0x58>)
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f4      	bne.n	8004ed4 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
 8004eec:	2bfe      	cmp	r3, #254	@ 0xfe
 8004eee:	d001      	beq.n	8004ef4 <SD_RxDataBlock+0x30>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	e00f      	b.n	8004f14 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	607a      	str	r2, [r7, #4]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7ff ff60 	bl	8004dc0 <SPI_RxBytePtr>
  } while(len--);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	1e5a      	subs	r2, r3, #1
 8004f04:	603a      	str	r2, [r7, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1f4      	bne.n	8004ef4 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 8004f0a:	f7ff ff3d 	bl	8004d88 <SPI_RxByte>
  SPI_RxByte();
 8004f0e:	f7ff ff3b 	bl	8004d88 <SPI_RxByte>

  return TRUE;
 8004f12:	2301      	movs	r3, #1
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20003a28 	.word	0x20003a28

08004f20 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8004f30:	f7ff ff54 	bl	8004ddc <SD_ReadyWait>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2bff      	cmp	r3, #255	@ 0xff
 8004f38:	d001      	beq.n	8004f3e <SD_TxDataBlock+0x1e>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	e02f      	b.n	8004f9e <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8004f3e:	78fb      	ldrb	r3, [r7, #3]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff feed 	bl	8004d20 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8004f46:	78fb      	ldrb	r3, [r7, #3]
 8004f48:	2bfd      	cmp	r3, #253	@ 0xfd
 8004f4a:	d020      	beq.n	8004f8e <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8004f4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7ff feff 	bl	8004d54 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 8004f56:	f7ff ff17 	bl	8004d88 <SPI_RxByte>
    SPI_RxByte();
 8004f5a:	f7ff ff15 	bl	8004d88 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8004f5e:	e00b      	b.n	8004f78 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8004f60:	f7ff ff12 	bl	8004d88 <SPI_RxByte>
 8004f64:	4603      	mov	r3, r0
 8004f66:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
 8004f6a:	f003 031f 	and.w	r3, r3, #31
 8004f6e:	2b05      	cmp	r3, #5
 8004f70:	d006      	beq.n	8004f80 <SD_TxDataBlock+0x60>
      i++;
 8004f72:	7bbb      	ldrb	r3, [r7, #14]
 8004f74:	3301      	adds	r3, #1
 8004f76:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8004f78:	7bbb      	ldrb	r3, [r7, #14]
 8004f7a:	2b40      	cmp	r3, #64	@ 0x40
 8004f7c:	d9f0      	bls.n	8004f60 <SD_TxDataBlock+0x40>
 8004f7e:	e000      	b.n	8004f82 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8004f80:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8004f82:	bf00      	nop
 8004f84:	f7ff ff00 	bl	8004d88 <SPI_RxByte>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0fa      	beq.n	8004f84 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	f003 031f 	and.w	r3, r3, #31
 8004f94:	2b05      	cmp	r3, #5
 8004f96:	d101      	bne.n	8004f9c <SD_TxDataBlock+0x7c>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e000      	b.n	8004f9e <SD_TxDataBlock+0x7e>

  return FALSE;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	4603      	mov	r3, r0
 8004fae:	6039      	str	r1, [r7, #0]
 8004fb0:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8004fb2:	f7ff ff13 	bl	8004ddc <SD_ReadyWait>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2bff      	cmp	r3, #255	@ 0xff
 8004fba:	d001      	beq.n	8004fc0 <SD_SendCmd+0x1a>
 8004fbc:	23ff      	movs	r3, #255	@ 0xff
 8004fbe:	e042      	b.n	8005046 <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7ff feac 	bl	8004d20 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	0e1b      	lsrs	r3, r3, #24
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7ff fea6 	bl	8004d20 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	0c1b      	lsrs	r3, r3, #16
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7ff fea0 	bl	8004d20 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	0a1b      	lsrs	r3, r3, #8
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7ff fe9a 	bl	8004d20 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7ff fe95 	bl	8004d20 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8004ff6:	79fb      	ldrb	r3, [r7, #7]
 8004ff8:	2b40      	cmp	r3, #64	@ 0x40
 8004ffa:	d102      	bne.n	8005002 <SD_SendCmd+0x5c>
 8004ffc:	2395      	movs	r3, #149	@ 0x95
 8004ffe:	73fb      	strb	r3, [r7, #15]
 8005000:	e007      	b.n	8005012 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8005002:	79fb      	ldrb	r3, [r7, #7]
 8005004:	2b48      	cmp	r3, #72	@ 0x48
 8005006:	d102      	bne.n	800500e <SD_SendCmd+0x68>
 8005008:	2387      	movs	r3, #135	@ 0x87
 800500a:	73fb      	strb	r3, [r7, #15]
 800500c:	e001      	b.n	8005012 <SD_SendCmd+0x6c>
  else crc = 1;
 800500e:	2301      	movs	r3, #1
 8005010:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 8005012:	7bfb      	ldrb	r3, [r7, #15]
 8005014:	4618      	mov	r0, r3
 8005016:	f7ff fe83 	bl	8004d20 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	2b4c      	cmp	r3, #76	@ 0x4c
 800501e:	d101      	bne.n	8005024 <SD_SendCmd+0x7e>
 8005020:	f7ff feb2 	bl	8004d88 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 8005024:	230a      	movs	r3, #10
 8005026:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8005028:	f7ff feae 	bl	8004d88 <SPI_RxByte>
 800502c:	4603      	mov	r3, r0
 800502e:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8005030:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005034:	2b00      	cmp	r3, #0
 8005036:	da05      	bge.n	8005044 <SD_SendCmd+0x9e>
 8005038:	7bbb      	ldrb	r3, [r7, #14]
 800503a:	3b01      	subs	r3, #1
 800503c:	73bb      	strb	r3, [r7, #14]
 800503e:	7bbb      	ldrb	r3, [r7, #14]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1f1      	bne.n	8005028 <SD_SendCmd+0x82>

  return res;
 8005044:	7b7b      	ldrb	r3, [r7, #13]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8005050:	b590      	push	{r4, r7, lr}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	4603      	mov	r3, r0
 8005058:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <SD_disk_initialize+0x14>
 8005060:	2301      	movs	r3, #1
 8005062:	e0d1      	b.n	8005208 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8005064:	4b6a      	ldr	r3, [pc, #424]	@ (8005210 <SD_disk_initialize+0x1c0>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	b2db      	uxtb	r3, r3
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <SD_disk_initialize+0x2a>
 8005072:	4b67      	ldr	r3, [pc, #412]	@ (8005210 <SD_disk_initialize+0x1c0>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	b2db      	uxtb	r3, r3
 8005078:	e0c6      	b.n	8005208 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 800507a:	f7ff fec9 	bl	8004e10 <SD_PowerOn>

  /* slave select */
  SELECT();
 800507e:	f7ff fe2f 	bl	8004ce0 <SELECT>

  /* check disk type */
  type = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8005086:	2100      	movs	r1, #0
 8005088:	2040      	movs	r0, #64	@ 0x40
 800508a:	f7ff ff8c 	bl	8004fa6 <SD_SendCmd>
 800508e:	4603      	mov	r3, r0
 8005090:	2b01      	cmp	r3, #1
 8005092:	f040 80a1 	bne.w	80051d8 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8005096:	4b5f      	ldr	r3, [pc, #380]	@ (8005214 <SD_disk_initialize+0x1c4>)
 8005098:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800509c:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800509e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80050a2:	2048      	movs	r0, #72	@ 0x48
 80050a4:	f7ff ff7f 	bl	8004fa6 <SD_SendCmd>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d155      	bne.n	800515a <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 80050ae:	2300      	movs	r3, #0
 80050b0:	73fb      	strb	r3, [r7, #15]
 80050b2:	e00c      	b.n	80050ce <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 80050b4:	7bfc      	ldrb	r4, [r7, #15]
 80050b6:	f7ff fe67 	bl	8004d88 <SPI_RxByte>
 80050ba:	4603      	mov	r3, r0
 80050bc:	461a      	mov	r2, r3
 80050be:	f104 0310 	add.w	r3, r4, #16
 80050c2:	443b      	add	r3, r7
 80050c4:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
 80050ca:	3301      	adds	r3, #1
 80050cc:	73fb      	strb	r3, [r7, #15]
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d9ef      	bls.n	80050b4 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80050d4:	7abb      	ldrb	r3, [r7, #10]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d17e      	bne.n	80051d8 <SD_disk_initialize+0x188>
 80050da:	7afb      	ldrb	r3, [r7, #11]
 80050dc:	2baa      	cmp	r3, #170	@ 0xaa
 80050de:	d17b      	bne.n	80051d8 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80050e0:	2100      	movs	r1, #0
 80050e2:	2077      	movs	r0, #119	@ 0x77
 80050e4:	f7ff ff5f 	bl	8004fa6 <SD_SendCmd>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d807      	bhi.n	80050fe <SD_disk_initialize+0xae>
 80050ee:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80050f2:	2069      	movs	r0, #105	@ 0x69
 80050f4:	f7ff ff57 	bl	8004fa6 <SD_SendCmd>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d004      	beq.n	8005108 <SD_disk_initialize+0xb8>
        } while (Timer1);
 80050fe:	4b45      	ldr	r3, [pc, #276]	@ (8005214 <SD_disk_initialize+0x1c4>)
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1ec      	bne.n	80050e0 <SD_disk_initialize+0x90>
 8005106:	e000      	b.n	800510a <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8005108:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800510a:	4b42      	ldr	r3, [pc, #264]	@ (8005214 <SD_disk_initialize+0x1c4>)
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d062      	beq.n	80051d8 <SD_disk_initialize+0x188>
 8005112:	2100      	movs	r1, #0
 8005114:	207a      	movs	r0, #122	@ 0x7a
 8005116:	f7ff ff46 	bl	8004fa6 <SD_SendCmd>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d15b      	bne.n	80051d8 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8005120:	2300      	movs	r3, #0
 8005122:	73fb      	strb	r3, [r7, #15]
 8005124:	e00c      	b.n	8005140 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8005126:	7bfc      	ldrb	r4, [r7, #15]
 8005128:	f7ff fe2e 	bl	8004d88 <SPI_RxByte>
 800512c:	4603      	mov	r3, r0
 800512e:	461a      	mov	r2, r3
 8005130:	f104 0310 	add.w	r3, r4, #16
 8005134:	443b      	add	r3, r7
 8005136:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	3301      	adds	r3, #1
 800513e:	73fb      	strb	r3, [r7, #15]
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	2b03      	cmp	r3, #3
 8005144:	d9ef      	bls.n	8005126 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8005146:	7a3b      	ldrb	r3, [r7, #8]
 8005148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <SD_disk_initialize+0x104>
 8005150:	230c      	movs	r3, #12
 8005152:	e000      	b.n	8005156 <SD_disk_initialize+0x106>
 8005154:	2304      	movs	r3, #4
 8005156:	73bb      	strb	r3, [r7, #14]
 8005158:	e03e      	b.n	80051d8 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800515a:	2100      	movs	r1, #0
 800515c:	2077      	movs	r0, #119	@ 0x77
 800515e:	f7ff ff22 	bl	8004fa6 <SD_SendCmd>
 8005162:	4603      	mov	r3, r0
 8005164:	2b01      	cmp	r3, #1
 8005166:	d808      	bhi.n	800517a <SD_disk_initialize+0x12a>
 8005168:	2100      	movs	r1, #0
 800516a:	2069      	movs	r0, #105	@ 0x69
 800516c:	f7ff ff1b 	bl	8004fa6 <SD_SendCmd>
 8005170:	4603      	mov	r3, r0
 8005172:	2b01      	cmp	r3, #1
 8005174:	d801      	bhi.n	800517a <SD_disk_initialize+0x12a>
 8005176:	2302      	movs	r3, #2
 8005178:	e000      	b.n	800517c <SD_disk_initialize+0x12c>
 800517a:	2301      	movs	r3, #1
 800517c:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 800517e:	7bbb      	ldrb	r3, [r7, #14]
 8005180:	2b02      	cmp	r3, #2
 8005182:	d10e      	bne.n	80051a2 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8005184:	2100      	movs	r1, #0
 8005186:	2077      	movs	r0, #119	@ 0x77
 8005188:	f7ff ff0d 	bl	8004fa6 <SD_SendCmd>
 800518c:	4603      	mov	r3, r0
 800518e:	2b01      	cmp	r3, #1
 8005190:	d80e      	bhi.n	80051b0 <SD_disk_initialize+0x160>
 8005192:	2100      	movs	r1, #0
 8005194:	2069      	movs	r0, #105	@ 0x69
 8005196:	f7ff ff06 	bl	8004fa6 <SD_SendCmd>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d107      	bne.n	80051b0 <SD_disk_initialize+0x160>
 80051a0:	e00c      	b.n	80051bc <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80051a2:	2100      	movs	r1, #0
 80051a4:	2041      	movs	r0, #65	@ 0x41
 80051a6:	f7ff fefe 	bl	8004fa6 <SD_SendCmd>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d004      	beq.n	80051ba <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 80051b0:	4b18      	ldr	r3, [pc, #96]	@ (8005214 <SD_disk_initialize+0x1c4>)
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1e2      	bne.n	800517e <SD_disk_initialize+0x12e>
 80051b8:	e000      	b.n	80051bc <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80051ba:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80051bc:	4b15      	ldr	r3, [pc, #84]	@ (8005214 <SD_disk_initialize+0x1c4>)
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d007      	beq.n	80051d4 <SD_disk_initialize+0x184>
 80051c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80051c8:	2050      	movs	r0, #80	@ 0x50
 80051ca:	f7ff feec 	bl	8004fa6 <SD_SendCmd>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <SD_disk_initialize+0x188>
 80051d4:	2300      	movs	r3, #0
 80051d6:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 80051d8:	4a0f      	ldr	r2, [pc, #60]	@ (8005218 <SD_disk_initialize+0x1c8>)
 80051da:	7bbb      	ldrb	r3, [r7, #14]
 80051dc:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 80051de:	f7ff fd8f 	bl	8004d00 <DESELECT>
  SPI_RxByte();
 80051e2:	f7ff fdd1 	bl	8004d88 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 80051e6:	7bbb      	ldrb	r3, [r7, #14]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d008      	beq.n	80051fe <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 80051ec:	4b08      	ldr	r3, [pc, #32]	@ (8005210 <SD_disk_initialize+0x1c0>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	f023 0301 	bic.w	r3, r3, #1
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	4b05      	ldr	r3, [pc, #20]	@ (8005210 <SD_disk_initialize+0x1c0>)
 80051fa:	701a      	strb	r2, [r3, #0]
 80051fc:	e001      	b.n	8005202 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80051fe:	f7ff fe49 	bl	8004e94 <SD_PowerOff>
  }

  return Stat;
 8005202:	4b03      	ldr	r3, [pc, #12]	@ (8005210 <SD_disk_initialize+0x1c0>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	b2db      	uxtb	r3, r3
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	bd90      	pop	{r4, r7, pc}
 8005210:	2000003d 	.word	0x2000003d
 8005214:	20003a28 	.word	0x20003a28
 8005218:	20003a2c 	.word	0x20003a2c

0800521c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	4603      	mov	r3, r0
 8005224:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8005226:	79fb      	ldrb	r3, [r7, #7]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <SD_disk_status+0x14>
 800522c:	2301      	movs	r3, #1
 800522e:	e002      	b.n	8005236 <SD_disk_status+0x1a>
  return Stat;
 8005230:	4b04      	ldr	r3, [pc, #16]	@ (8005244 <SD_disk_status+0x28>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	b2db      	uxtb	r3, r3
}
 8005236:	4618      	mov	r0, r3
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	2000003d 	.word	0x2000003d

08005248 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	607a      	str	r2, [r7, #4]
 8005252:	603b      	str	r3, [r7, #0]
 8005254:	4603      	mov	r3, r0
 8005256:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8005258:	7bfb      	ldrb	r3, [r7, #15]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d102      	bne.n	8005264 <SD_disk_read+0x1c>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <SD_disk_read+0x20>
 8005264:	2304      	movs	r3, #4
 8005266:	e051      	b.n	800530c <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005268:	4b2a      	ldr	r3, [pc, #168]	@ (8005314 <SD_disk_read+0xcc>)
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	b2db      	uxtb	r3, r3
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <SD_disk_read+0x32>
 8005276:	2303      	movs	r3, #3
 8005278:	e048      	b.n	800530c <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800527a:	4b27      	ldr	r3, [pc, #156]	@ (8005318 <SD_disk_read+0xd0>)
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	f003 0304 	and.w	r3, r3, #4
 8005282:	2b00      	cmp	r3, #0
 8005284:	d102      	bne.n	800528c <SD_disk_read+0x44>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	025b      	lsls	r3, r3, #9
 800528a:	607b      	str	r3, [r7, #4]

  SELECT();
 800528c:	f7ff fd28 	bl	8004ce0 <SELECT>

  if (count == 1)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d111      	bne.n	80052ba <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	2051      	movs	r0, #81	@ 0x51
 800529a:	f7ff fe84 	bl	8004fa6 <SD_SendCmd>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d129      	bne.n	80052f8 <SD_disk_read+0xb0>
 80052a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80052a8:	68b8      	ldr	r0, [r7, #8]
 80052aa:	f7ff fe0b 	bl	8004ec4 <SD_RxDataBlock>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d021      	beq.n	80052f8 <SD_disk_read+0xb0>
 80052b4:	2300      	movs	r3, #0
 80052b6:	603b      	str	r3, [r7, #0]
 80052b8:	e01e      	b.n	80052f8 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	2052      	movs	r0, #82	@ 0x52
 80052be:	f7ff fe72 	bl	8004fa6 <SD_SendCmd>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d117      	bne.n	80052f8 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80052c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80052cc:	68b8      	ldr	r0, [r7, #8]
 80052ce:	f7ff fdf9 	bl	8004ec4 <SD_RxDataBlock>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00a      	beq.n	80052ee <SD_disk_read+0xa6>
        buff += 512;
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80052de:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	603b      	str	r3, [r7, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1ed      	bne.n	80052c8 <SD_disk_read+0x80>
 80052ec:	e000      	b.n	80052f0 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 80052ee:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 80052f0:	2100      	movs	r1, #0
 80052f2:	204c      	movs	r0, #76	@ 0x4c
 80052f4:	f7ff fe57 	bl	8004fa6 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 80052f8:	f7ff fd02 	bl	8004d00 <DESELECT>
  SPI_RxByte();
 80052fc:	f7ff fd44 	bl	8004d88 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	bf14      	ite	ne
 8005306:	2301      	movne	r3, #1
 8005308:	2300      	moveq	r3, #0
 800530a:	b2db      	uxtb	r3, r3
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	2000003d 	.word	0x2000003d
 8005318:	20003a2c 	.word	0x20003a2c

0800531c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	607a      	str	r2, [r7, #4]
 8005326:	603b      	str	r3, [r7, #0]
 8005328:	4603      	mov	r3, r0
 800532a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800532c:	7bfb      	ldrb	r3, [r7, #15]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d102      	bne.n	8005338 <SD_disk_write+0x1c>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <SD_disk_write+0x20>
 8005338:	2304      	movs	r3, #4
 800533a:	e06b      	b.n	8005414 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800533c:	4b37      	ldr	r3, [pc, #220]	@ (800541c <SD_disk_write+0x100>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	b2db      	uxtb	r3, r3
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <SD_disk_write+0x32>
 800534a:	2303      	movs	r3, #3
 800534c:	e062      	b.n	8005414 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800534e:	4b33      	ldr	r3, [pc, #204]	@ (800541c <SD_disk_write+0x100>)
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <SD_disk_write+0x44>
 800535c:	2302      	movs	r3, #2
 800535e:	e059      	b.n	8005414 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8005360:	4b2f      	ldr	r3, [pc, #188]	@ (8005420 <SD_disk_write+0x104>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d102      	bne.n	8005372 <SD_disk_write+0x56>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	025b      	lsls	r3, r3, #9
 8005370:	607b      	str	r3, [r7, #4]

  SELECT();
 8005372:	f7ff fcb5 	bl	8004ce0 <SELECT>

  if (count == 1)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d110      	bne.n	800539e <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800537c:	6879      	ldr	r1, [r7, #4]
 800537e:	2058      	movs	r0, #88	@ 0x58
 8005380:	f7ff fe11 	bl	8004fa6 <SD_SendCmd>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d13a      	bne.n	8005400 <SD_disk_write+0xe4>
 800538a:	21fe      	movs	r1, #254	@ 0xfe
 800538c:	68b8      	ldr	r0, [r7, #8]
 800538e:	f7ff fdc7 	bl	8004f20 <SD_TxDataBlock>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d033      	beq.n	8005400 <SD_disk_write+0xe4>
      count = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	e030      	b.n	8005400 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800539e:	4b20      	ldr	r3, [pc, #128]	@ (8005420 <SD_disk_write+0x104>)
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d007      	beq.n	80053ba <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80053aa:	2100      	movs	r1, #0
 80053ac:	2077      	movs	r0, #119	@ 0x77
 80053ae:	f7ff fdfa 	bl	8004fa6 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80053b2:	6839      	ldr	r1, [r7, #0]
 80053b4:	2057      	movs	r0, #87	@ 0x57
 80053b6:	f7ff fdf6 	bl	8004fa6 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	2059      	movs	r0, #89	@ 0x59
 80053be:	f7ff fdf2 	bl	8004fa6 <SD_SendCmd>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d11b      	bne.n	8005400 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80053c8:	21fc      	movs	r1, #252	@ 0xfc
 80053ca:	68b8      	ldr	r0, [r7, #8]
 80053cc:	f7ff fda8 	bl	8004f20 <SD_TxDataBlock>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <SD_disk_write+0xd0>
        buff += 512;
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80053dc:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	3b01      	subs	r3, #1
 80053e2:	603b      	str	r3, [r7, #0]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1ee      	bne.n	80053c8 <SD_disk_write+0xac>
 80053ea:	e000      	b.n	80053ee <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80053ec:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80053ee:	21fd      	movs	r1, #253	@ 0xfd
 80053f0:	2000      	movs	r0, #0
 80053f2:	f7ff fd95 	bl	8004f20 <SD_TxDataBlock>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <SD_disk_write+0xe4>
      {
        count = 1;
 80053fc:	2301      	movs	r3, #1
 80053fe:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8005400:	f7ff fc7e 	bl	8004d00 <DESELECT>
  SPI_RxByte();
 8005404:	f7ff fcc0 	bl	8004d88 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	bf14      	ite	ne
 800540e:	2301      	movne	r3, #1
 8005410:	2300      	moveq	r3, #0
 8005412:	b2db      	uxtb	r3, r3
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	2000003d 	.word	0x2000003d
 8005420:	20003a2c 	.word	0x20003a2c

08005424 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8005424:	b590      	push	{r4, r7, lr}
 8005426:	b08b      	sub	sp, #44	@ 0x2c
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	603a      	str	r2, [r7, #0]
 800542e:	71fb      	strb	r3, [r7, #7]
 8005430:	460b      	mov	r3, r1
 8005432:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <SD_disk_ioctl+0x1e>
 800543e:	2304      	movs	r3, #4
 8005440:	e113      	b.n	800566a <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8005448:	79bb      	ldrb	r3, [r7, #6]
 800544a:	2b05      	cmp	r3, #5
 800544c:	d124      	bne.n	8005498 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b02      	cmp	r3, #2
 8005454:	d012      	beq.n	800547c <SD_disk_ioctl+0x58>
 8005456:	2b02      	cmp	r3, #2
 8005458:	dc1a      	bgt.n	8005490 <SD_disk_ioctl+0x6c>
 800545a:	2b00      	cmp	r3, #0
 800545c:	d002      	beq.n	8005464 <SD_disk_ioctl+0x40>
 800545e:	2b01      	cmp	r3, #1
 8005460:	d006      	beq.n	8005470 <SD_disk_ioctl+0x4c>
 8005462:	e015      	b.n	8005490 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8005464:	f7ff fd16 	bl	8004e94 <SD_PowerOff>
      res = RES_OK;
 8005468:	2300      	movs	r3, #0
 800546a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800546e:	e0fa      	b.n	8005666 <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8005470:	f7ff fcce 	bl	8004e10 <SD_PowerOn>
      res = RES_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800547a:	e0f4      	b.n	8005666 <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	1c5c      	adds	r4, r3, #1
 8005480:	f7ff fd14 	bl	8004eac <SD_CheckPower>
 8005484:	4603      	mov	r3, r0
 8005486:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8005488:	2300      	movs	r3, #0
 800548a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800548e:	e0ea      	b.n	8005666 <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8005490:	2304      	movs	r3, #4
 8005492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005496:	e0e6      	b.n	8005666 <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005498:	4b76      	ldr	r3, [pc, #472]	@ (8005674 <SD_disk_ioctl+0x250>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	b2db      	uxtb	r3, r3
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <SD_disk_ioctl+0x86>
 80054a6:	2303      	movs	r3, #3
 80054a8:	e0df      	b.n	800566a <SD_disk_ioctl+0x246>

    SELECT();
 80054aa:	f7ff fc19 	bl	8004ce0 <SELECT>

    switch (ctrl)
 80054ae:	79bb      	ldrb	r3, [r7, #6]
 80054b0:	2b0d      	cmp	r3, #13
 80054b2:	f200 80c9 	bhi.w	8005648 <SD_disk_ioctl+0x224>
 80054b6:	a201      	add	r2, pc, #4	@ (adr r2, 80054bc <SD_disk_ioctl+0x98>)
 80054b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054bc:	080055b3 	.word	0x080055b3
 80054c0:	080054f5 	.word	0x080054f5
 80054c4:	080055a3 	.word	0x080055a3
 80054c8:	08005649 	.word	0x08005649
 80054cc:	08005649 	.word	0x08005649
 80054d0:	08005649 	.word	0x08005649
 80054d4:	08005649 	.word	0x08005649
 80054d8:	08005649 	.word	0x08005649
 80054dc:	08005649 	.word	0x08005649
 80054e0:	08005649 	.word	0x08005649
 80054e4:	08005649 	.word	0x08005649
 80054e8:	080055c5 	.word	0x080055c5
 80054ec:	080055e9 	.word	0x080055e9
 80054f0:	0800560d 	.word	0x0800560d
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80054f4:	2100      	movs	r1, #0
 80054f6:	2049      	movs	r0, #73	@ 0x49
 80054f8:	f7ff fd55 	bl	8004fa6 <SD_SendCmd>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f040 80a6 	bne.w	8005650 <SD_disk_ioctl+0x22c>
 8005504:	f107 030c 	add.w	r3, r7, #12
 8005508:	2110      	movs	r1, #16
 800550a:	4618      	mov	r0, r3
 800550c:	f7ff fcda 	bl	8004ec4 <SD_RxDataBlock>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 809c 	beq.w	8005650 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8005518:	7b3b      	ldrb	r3, [r7, #12]
 800551a:	099b      	lsrs	r3, r3, #6
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b01      	cmp	r3, #1
 8005520:	d10d      	bne.n	800553e <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8005522:	7d7b      	ldrb	r3, [r7, #21]
 8005524:	461a      	mov	r2, r3
 8005526:	7d3b      	ldrb	r3, [r7, #20]
 8005528:	021b      	lsls	r3, r3, #8
 800552a:	b29b      	uxth	r3, r3
 800552c:	4413      	add	r3, r2
 800552e:	b29b      	uxth	r3, r3
 8005530:	3301      	adds	r3, #1
 8005532:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8005534:	8bfb      	ldrh	r3, [r7, #30]
 8005536:	029a      	lsls	r2, r3, #10
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	e02d      	b.n	800559a <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800553e:	7c7b      	ldrb	r3, [r7, #17]
 8005540:	f003 030f 	and.w	r3, r3, #15
 8005544:	b2da      	uxtb	r2, r3
 8005546:	7dbb      	ldrb	r3, [r7, #22]
 8005548:	09db      	lsrs	r3, r3, #7
 800554a:	b2db      	uxtb	r3, r3
 800554c:	4413      	add	r3, r2
 800554e:	b2da      	uxtb	r2, r3
 8005550:	7d7b      	ldrb	r3, [r7, #21]
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	b2db      	uxtb	r3, r3
 8005556:	f003 0306 	and.w	r3, r3, #6
 800555a:	b2db      	uxtb	r3, r3
 800555c:	4413      	add	r3, r2
 800555e:	b2db      	uxtb	r3, r3
 8005560:	3302      	adds	r3, #2
 8005562:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8005566:	7d3b      	ldrb	r3, [r7, #20]
 8005568:	099b      	lsrs	r3, r3, #6
 800556a:	b2db      	uxtb	r3, r3
 800556c:	461a      	mov	r2, r3
 800556e:	7cfb      	ldrb	r3, [r7, #19]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	b29b      	uxth	r3, r3
 8005574:	4413      	add	r3, r2
 8005576:	b29a      	uxth	r2, r3
 8005578:	7cbb      	ldrb	r3, [r7, #18]
 800557a:	029b      	lsls	r3, r3, #10
 800557c:	b29b      	uxth	r3, r3
 800557e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005582:	b29b      	uxth	r3, r3
 8005584:	4413      	add	r3, r2
 8005586:	b29b      	uxth	r3, r3
 8005588:	3301      	adds	r3, #1
 800558a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800558c:	8bfa      	ldrh	r2, [r7, #30]
 800558e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005592:	3b09      	subs	r3, #9
 8005594:	409a      	lsls	r2, r3
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80055a0:	e056      	b.n	8005650 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055a8:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80055b0:	e055      	b.n	800565e <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80055b2:	f7ff fc13 	bl	8004ddc <SD_ReadyWait>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2bff      	cmp	r3, #255	@ 0xff
 80055ba:	d14b      	bne.n	8005654 <SD_disk_ioctl+0x230>
 80055bc:	2300      	movs	r3, #0
 80055be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80055c2:	e047      	b.n	8005654 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80055c4:	2100      	movs	r1, #0
 80055c6:	2049      	movs	r0, #73	@ 0x49
 80055c8:	f7ff fced 	bl	8004fa6 <SD_SendCmd>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d142      	bne.n	8005658 <SD_disk_ioctl+0x234>
 80055d2:	2110      	movs	r1, #16
 80055d4:	6a38      	ldr	r0, [r7, #32]
 80055d6:	f7ff fc75 	bl	8004ec4 <SD_RxDataBlock>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d03b      	beq.n	8005658 <SD_disk_ioctl+0x234>
 80055e0:	2300      	movs	r3, #0
 80055e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80055e6:	e037      	b.n	8005658 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80055e8:	2100      	movs	r1, #0
 80055ea:	204a      	movs	r0, #74	@ 0x4a
 80055ec:	f7ff fcdb 	bl	8004fa6 <SD_SendCmd>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d132      	bne.n	800565c <SD_disk_ioctl+0x238>
 80055f6:	2110      	movs	r1, #16
 80055f8:	6a38      	ldr	r0, [r7, #32]
 80055fa:	f7ff fc63 	bl	8004ec4 <SD_RxDataBlock>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d02b      	beq.n	800565c <SD_disk_ioctl+0x238>
 8005604:	2300      	movs	r3, #0
 8005606:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800560a:	e027      	b.n	800565c <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 800560c:	2100      	movs	r1, #0
 800560e:	207a      	movs	r0, #122	@ 0x7a
 8005610:	f7ff fcc9 	bl	8004fa6 <SD_SendCmd>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d116      	bne.n	8005648 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 800561a:	2300      	movs	r3, #0
 800561c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005620:	e00b      	b.n	800563a <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8005622:	6a3c      	ldr	r4, [r7, #32]
 8005624:	1c63      	adds	r3, r4, #1
 8005626:	623b      	str	r3, [r7, #32]
 8005628:	f7ff fbae 	bl	8004d88 <SPI_RxByte>
 800562c:	4603      	mov	r3, r0
 800562e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8005630:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005634:	3301      	adds	r3, #1
 8005636:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800563a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800563e:	2b03      	cmp	r3, #3
 8005640:	d9ef      	bls.n	8005622 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8005648:	2304      	movs	r3, #4
 800564a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800564e:	e006      	b.n	800565e <SD_disk_ioctl+0x23a>
      break;
 8005650:	bf00      	nop
 8005652:	e004      	b.n	800565e <SD_disk_ioctl+0x23a>
      break;
 8005654:	bf00      	nop
 8005656:	e002      	b.n	800565e <SD_disk_ioctl+0x23a>
      break;
 8005658:	bf00      	nop
 800565a:	e000      	b.n	800565e <SD_disk_ioctl+0x23a>
      break;
 800565c:	bf00      	nop
    }

    DESELECT();
 800565e:	f7ff fb4f 	bl	8004d00 <DESELECT>
    SPI_RxByte();
 8005662:	f7ff fb91 	bl	8004d88 <SPI_RxByte>
  }

  return res;
 8005666:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800566a:	4618      	mov	r0, r3
 800566c:	372c      	adds	r7, #44	@ 0x2c
 800566e:	46bd      	mov	sp, r7
 8005670:	bd90      	pop	{r4, r7, pc}
 8005672:	bf00      	nop
 8005674:	2000003d 	.word	0x2000003d

08005678 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	4603      	mov	r3, r0
 8005680:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8005682:	79fb      	ldrb	r3, [r7, #7]
 8005684:	4618      	mov	r0, r3
 8005686:	f7ff fce3 	bl	8005050 <SD_disk_initialize>
 800568a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800568c:	4618      	mov	r0, r3
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7ff fdbb 	bl	800521c <SD_disk_status>
 80056a6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60b9      	str	r1, [r7, #8]
 80056b8:	607a      	str	r2, [r7, #4]
 80056ba:	603b      	str	r3, [r7, #0]
 80056bc:	4603      	mov	r3, r0
 80056be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80056c0:	7bf8      	ldrb	r0, [r7, #15]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	68b9      	ldr	r1, [r7, #8]
 80056c8:	f7ff fdbe 	bl	8005248 <SD_disk_read>
 80056cc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b084      	sub	sp, #16
 80056da:	af00      	add	r7, sp, #0
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	603b      	str	r3, [r7, #0]
 80056e2:	4603      	mov	r3, r0
 80056e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80056e6:	7bf8      	ldrb	r0, [r7, #15]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	68b9      	ldr	r1, [r7, #8]
 80056ee:	f7ff fe15 	bl	800531c <SD_disk_write>
 80056f2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	4603      	mov	r3, r0
 8005704:	603a      	str	r2, [r7, #0]
 8005706:	71fb      	strb	r3, [r7, #7]
 8005708:	460b      	mov	r3, r1
 800570a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800570c:	79b9      	ldrb	r1, [r7, #6]
 800570e:	79fb      	ldrb	r3, [r7, #7]
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff fe86 	bl	8005424 <SD_disk_ioctl>
 8005718:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	4603      	mov	r3, r0
 800572c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	4a08      	ldr	r2, [pc, #32]	@ (8005754 <disk_status+0x30>)
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	79fa      	ldrb	r2, [r7, #7]
 800573c:	4905      	ldr	r1, [pc, #20]	@ (8005754 <disk_status+0x30>)
 800573e:	440a      	add	r2, r1
 8005740:	7a12      	ldrb	r2, [r2, #8]
 8005742:	4610      	mov	r0, r2
 8005744:	4798      	blx	r3
 8005746:	4603      	mov	r3, r0
 8005748:	73fb      	strb	r3, [r7, #15]
  return stat;
 800574a:	7bfb      	ldrb	r3, [r7, #15]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20003c58 	.word	0x20003c58

08005758 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	4603      	mov	r3, r0
 8005760:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005766:	79fb      	ldrb	r3, [r7, #7]
 8005768:	4a0d      	ldr	r2, [pc, #52]	@ (80057a0 <disk_initialize+0x48>)
 800576a:	5cd3      	ldrb	r3, [r2, r3]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d111      	bne.n	8005794 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005770:	79fb      	ldrb	r3, [r7, #7]
 8005772:	4a0b      	ldr	r2, [pc, #44]	@ (80057a0 <disk_initialize+0x48>)
 8005774:	2101      	movs	r1, #1
 8005776:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005778:	79fb      	ldrb	r3, [r7, #7]
 800577a:	4a09      	ldr	r2, [pc, #36]	@ (80057a0 <disk_initialize+0x48>)
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	79fa      	ldrb	r2, [r7, #7]
 8005786:	4906      	ldr	r1, [pc, #24]	@ (80057a0 <disk_initialize+0x48>)
 8005788:	440a      	add	r2, r1
 800578a:	7a12      	ldrb	r2, [r2, #8]
 800578c:	4610      	mov	r0, r2
 800578e:	4798      	blx	r3
 8005790:	4603      	mov	r3, r0
 8005792:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005794:	7bfb      	ldrb	r3, [r7, #15]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	20003c58 	.word	0x20003c58

080057a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80057a4:	b590      	push	{r4, r7, lr}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	607a      	str	r2, [r7, #4]
 80057ae:	603b      	str	r3, [r7, #0]
 80057b0:	4603      	mov	r3, r0
 80057b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80057b4:	7bfb      	ldrb	r3, [r7, #15]
 80057b6:	4a0a      	ldr	r2, [pc, #40]	@ (80057e0 <disk_read+0x3c>)
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	689c      	ldr	r4, [r3, #8]
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
 80057c2:	4a07      	ldr	r2, [pc, #28]	@ (80057e0 <disk_read+0x3c>)
 80057c4:	4413      	add	r3, r2
 80057c6:	7a18      	ldrb	r0, [r3, #8]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	68b9      	ldr	r1, [r7, #8]
 80057ce:	47a0      	blx	r4
 80057d0:	4603      	mov	r3, r0
 80057d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80057d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd90      	pop	{r4, r7, pc}
 80057de:	bf00      	nop
 80057e0:	20003c58 	.word	0x20003c58

080057e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80057e4:	b590      	push	{r4, r7, lr}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60b9      	str	r1, [r7, #8]
 80057ec:	607a      	str	r2, [r7, #4]
 80057ee:	603b      	str	r3, [r7, #0]
 80057f0:	4603      	mov	r3, r0
 80057f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
 80057f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005820 <disk_write+0x3c>)
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4413      	add	r3, r2
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	68dc      	ldr	r4, [r3, #12]
 8005800:	7bfb      	ldrb	r3, [r7, #15]
 8005802:	4a07      	ldr	r2, [pc, #28]	@ (8005820 <disk_write+0x3c>)
 8005804:	4413      	add	r3, r2
 8005806:	7a18      	ldrb	r0, [r3, #8]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	47a0      	blx	r4
 8005810:	4603      	mov	r3, r0
 8005812:	75fb      	strb	r3, [r7, #23]
  return res;
 8005814:	7dfb      	ldrb	r3, [r7, #23]
}
 8005816:	4618      	mov	r0, r3
 8005818:	371c      	adds	r7, #28
 800581a:	46bd      	mov	sp, r7
 800581c:	bd90      	pop	{r4, r7, pc}
 800581e:	bf00      	nop
 8005820:	20003c58 	.word	0x20003c58

08005824 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	4603      	mov	r3, r0
 800582c:	603a      	str	r2, [r7, #0]
 800582e:	71fb      	strb	r3, [r7, #7]
 8005830:	460b      	mov	r3, r1
 8005832:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	4a09      	ldr	r2, [pc, #36]	@ (800585c <disk_ioctl+0x38>)
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	79fa      	ldrb	r2, [r7, #7]
 8005842:	4906      	ldr	r1, [pc, #24]	@ (800585c <disk_ioctl+0x38>)
 8005844:	440a      	add	r2, r1
 8005846:	7a10      	ldrb	r0, [r2, #8]
 8005848:	79b9      	ldrb	r1, [r7, #6]
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	4798      	blx	r3
 800584e:	4603      	mov	r3, r0
 8005850:	73fb      	strb	r3, [r7, #15]
  return res;
 8005852:	7bfb      	ldrb	r3, [r7, #15]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	20003c58 	.word	0x20003c58

08005860 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	3301      	adds	r3, #1
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005870:	89fb      	ldrh	r3, [r7, #14]
 8005872:	021b      	lsls	r3, r3, #8
 8005874:	b21a      	sxth	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	b21b      	sxth	r3, r3
 800587c:	4313      	orrs	r3, r2
 800587e:	b21b      	sxth	r3, r3
 8005880:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005882:	89fb      	ldrh	r3, [r7, #14]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	3303      	adds	r3, #3
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	021b      	lsls	r3, r3, #8
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	3202      	adds	r2, #2
 80058a8:	7812      	ldrb	r2, [r2, #0]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	021b      	lsls	r3, r3, #8
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	3201      	adds	r2, #1
 80058b6:	7812      	ldrb	r2, [r2, #0]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	021b      	lsls	r3, r3, #8
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	7812      	ldrb	r2, [r2, #0]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]
	return rv;
 80058c8:	68fb      	ldr	r3, [r7, #12]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	460b      	mov	r3, r1
 80058e0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	887a      	ldrh	r2, [r7, #2]
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	887b      	ldrh	r3, [r7, #2]
 80058f0:	0a1b      	lsrs	r3, r3, #8
 80058f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	607a      	str	r2, [r7, #4]
 80058fa:	887a      	ldrh	r2, [r7, #2]
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	701a      	strb	r2, [r3, #0]
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	701a      	strb	r2, [r3, #0]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	0a1b      	lsrs	r3, r3, #8
 8005926:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	607a      	str	r2, [r7, #4]
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	b2d2      	uxtb	r2, r2
 8005932:	701a      	strb	r2, [r3, #0]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	0a1b      	lsrs	r3, r3, #8
 8005938:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	1c5a      	adds	r2, r3, #1
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	683a      	ldr	r2, [r7, #0]
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	701a      	strb	r2, [r3, #0]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	0a1b      	lsrs	r3, r3, #8
 800594a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	1c5a      	adds	r2, r3, #1
 8005950:	607a      	str	r2, [r7, #4]
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	701a      	strb	r2, [r3, #0]
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00d      	beq.n	800599a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	1c53      	adds	r3, r2, #1
 8005982:	613b      	str	r3, [r7, #16]
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	1c59      	adds	r1, r3, #1
 8005988:	6179      	str	r1, [r7, #20]
 800598a:	7812      	ldrb	r2, [r2, #0]
 800598c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	3b01      	subs	r3, #1
 8005992:	607b      	str	r3, [r7, #4]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1f1      	bne.n	800597e <mem_cpy+0x1a>
	}
}
 800599a:	bf00      	nop
 800599c:	371c      	adds	r7, #28
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80059a6:	b480      	push	{r7}
 80059a8:	b087      	sub	sp, #28
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	1c5a      	adds	r2, r3, #1
 80059ba:	617a      	str	r2, [r7, #20]
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	b2d2      	uxtb	r2, r2
 80059c0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3b01      	subs	r3, #1
 80059c6:	607b      	str	r3, [r7, #4]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1f3      	bne.n	80059b6 <mem_set+0x10>
}
 80059ce:	bf00      	nop
 80059d0:	bf00      	nop
 80059d2:	371c      	adds	r7, #28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80059dc:	b480      	push	{r7}
 80059de:	b089      	sub	sp, #36	@ 0x24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	61fb      	str	r3, [r7, #28]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	61fa      	str	r2, [r7, #28]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	4619      	mov	r1, r3
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	61ba      	str	r2, [r7, #24]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	1acb      	subs	r3, r1, r3
 8005a08:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	607b      	str	r3, [r7, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <mem_cmp+0x40>
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d0eb      	beq.n	80059f4 <mem_cmp+0x18>

	return r;
 8005a1c:	697b      	ldr	r3, [r7, #20]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3724      	adds	r7, #36	@ 0x24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005a2a:	b480      	push	{r7}
 8005a2c:	b083      	sub	sp, #12
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005a34:	e002      	b.n	8005a3c <chk_chr+0x12>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	607b      	str	r3, [r7, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d005      	beq.n	8005a50 <chk_chr+0x26>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d1f2      	bne.n	8005a36 <chk_chr+0xc>
	return *str;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	781b      	ldrb	r3, [r3, #0]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60bb      	str	r3, [r7, #8]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	e029      	b.n	8005ac8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005a74:	4a27      	ldr	r2, [pc, #156]	@ (8005b14 <chk_lock+0xb4>)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	4413      	add	r3, r2
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d01d      	beq.n	8005abe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005a82:	4a24      	ldr	r2, [pc, #144]	@ (8005b14 <chk_lock+0xb4>)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	011b      	lsls	r3, r3, #4
 8005a88:	4413      	add	r3, r2
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d116      	bne.n	8005ac2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005a94:	4a1f      	ldr	r2, [pc, #124]	@ (8005b14 <chk_lock+0xb4>)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	011b      	lsls	r3, r3, #4
 8005a9a:	4413      	add	r3, r2
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d10c      	bne.n	8005ac2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005aa8:	4a1a      	ldr	r2, [pc, #104]	@ (8005b14 <chk_lock+0xb4>)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	011b      	lsls	r3, r3, #4
 8005aae:	4413      	add	r3, r2
 8005ab0:	3308      	adds	r3, #8
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d102      	bne.n	8005ac2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005abc:	e007      	b.n	8005ace <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d9d2      	bls.n	8005a74 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d109      	bne.n	8005ae8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d102      	bne.n	8005ae0 <chk_lock+0x80>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d101      	bne.n	8005ae4 <chk_lock+0x84>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	e010      	b.n	8005b06 <chk_lock+0xa6>
 8005ae4:	2312      	movs	r3, #18
 8005ae6:	e00e      	b.n	8005b06 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d108      	bne.n	8005b00 <chk_lock+0xa0>
 8005aee:	4a09      	ldr	r2, [pc, #36]	@ (8005b14 <chk_lock+0xb4>)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	4413      	add	r3, r2
 8005af6:	330c      	adds	r3, #12
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005afe:	d101      	bne.n	8005b04 <chk_lock+0xa4>
 8005b00:	2310      	movs	r3, #16
 8005b02:	e000      	b.n	8005b06 <chk_lock+0xa6>
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	20003a38 	.word	0x20003a38

08005b18 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	607b      	str	r3, [r7, #4]
 8005b22:	e002      	b.n	8005b2a <enq_lock+0x12>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3301      	adds	r3, #1
 8005b28:	607b      	str	r3, [r7, #4]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d806      	bhi.n	8005b3e <enq_lock+0x26>
 8005b30:	4a09      	ldr	r2, [pc, #36]	@ (8005b58 <enq_lock+0x40>)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	4413      	add	r3, r2
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1f2      	bne.n	8005b24 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	bf14      	ite	ne
 8005b44:	2301      	movne	r3, #1
 8005b46:	2300      	moveq	r3, #0
 8005b48:	b2db      	uxtb	r3, r3
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	20003a38 	.word	0x20003a38

08005b5c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b66:	2300      	movs	r3, #0
 8005b68:	60fb      	str	r3, [r7, #12]
 8005b6a:	e01f      	b.n	8005bac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005b6c:	4a41      	ldr	r2, [pc, #260]	@ (8005c74 <inc_lock+0x118>)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	4413      	add	r3, r2
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d113      	bne.n	8005ba6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005b7e:	4a3d      	ldr	r2, [pc, #244]	@ (8005c74 <inc_lock+0x118>)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	4413      	add	r3, r2
 8005b86:	3304      	adds	r3, #4
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d109      	bne.n	8005ba6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005b92:	4a38      	ldr	r2, [pc, #224]	@ (8005c74 <inc_lock+0x118>)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	4413      	add	r3, r2
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d006      	beq.n	8005bb4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d9dc      	bls.n	8005b6c <inc_lock+0x10>
 8005bb2:	e000      	b.n	8005bb6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005bb4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d132      	bne.n	8005c22 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	e002      	b.n	8005bc8 <inc_lock+0x6c>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d806      	bhi.n	8005bdc <inc_lock+0x80>
 8005bce:	4a29      	ldr	r2, [pc, #164]	@ (8005c74 <inc_lock+0x118>)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	011b      	lsls	r3, r3, #4
 8005bd4:	4413      	add	r3, r2
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1f2      	bne.n	8005bc2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d101      	bne.n	8005be6 <inc_lock+0x8a>
 8005be2:	2300      	movs	r3, #0
 8005be4:	e040      	b.n	8005c68 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	4922      	ldr	r1, [pc, #136]	@ (8005c74 <inc_lock+0x118>)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	440b      	add	r3, r1
 8005bf2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	491e      	ldr	r1, [pc, #120]	@ (8005c74 <inc_lock+0x118>)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	011b      	lsls	r3, r3, #4
 8005bfe:	440b      	add	r3, r1
 8005c00:	3304      	adds	r3, #4
 8005c02:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	695a      	ldr	r2, [r3, #20]
 8005c08:	491a      	ldr	r1, [pc, #104]	@ (8005c74 <inc_lock+0x118>)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	011b      	lsls	r3, r3, #4
 8005c0e:	440b      	add	r3, r1
 8005c10:	3308      	adds	r3, #8
 8005c12:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005c14:	4a17      	ldr	r2, [pc, #92]	@ (8005c74 <inc_lock+0x118>)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	011b      	lsls	r3, r3, #4
 8005c1a:	4413      	add	r3, r2
 8005c1c:	330c      	adds	r3, #12
 8005c1e:	2200      	movs	r2, #0
 8005c20:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d009      	beq.n	8005c3c <inc_lock+0xe0>
 8005c28:	4a12      	ldr	r2, [pc, #72]	@ (8005c74 <inc_lock+0x118>)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	011b      	lsls	r3, r3, #4
 8005c2e:	4413      	add	r3, r2
 8005c30:	330c      	adds	r3, #12
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <inc_lock+0xe0>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	e015      	b.n	8005c68 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d108      	bne.n	8005c54 <inc_lock+0xf8>
 8005c42:	4a0c      	ldr	r2, [pc, #48]	@ (8005c74 <inc_lock+0x118>)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	4413      	add	r3, r2
 8005c4a:	330c      	adds	r3, #12
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	e001      	b.n	8005c58 <inc_lock+0xfc>
 8005c54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c58:	4906      	ldr	r1, [pc, #24]	@ (8005c74 <inc_lock+0x118>)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	011b      	lsls	r3, r3, #4
 8005c5e:	440b      	add	r3, r1
 8005c60:	330c      	adds	r3, #12
 8005c62:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	3301      	adds	r3, #1
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	20003a38 	.word	0x20003a38

08005c78 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	607b      	str	r3, [r7, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d825      	bhi.n	8005cd8 <dec_lock+0x60>
		n = Files[i].ctr;
 8005c8c:	4a17      	ldr	r2, [pc, #92]	@ (8005cec <dec_lock+0x74>)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	011b      	lsls	r3, r3, #4
 8005c92:	4413      	add	r3, r2
 8005c94:	330c      	adds	r3, #12
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005c9a:	89fb      	ldrh	r3, [r7, #14]
 8005c9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ca0:	d101      	bne.n	8005ca6 <dec_lock+0x2e>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005ca6:	89fb      	ldrh	r3, [r7, #14]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <dec_lock+0x3a>
 8005cac:	89fb      	ldrh	r3, [r7, #14]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005cb2:	4a0e      	ldr	r2, [pc, #56]	@ (8005cec <dec_lock+0x74>)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	011b      	lsls	r3, r3, #4
 8005cb8:	4413      	add	r3, r2
 8005cba:	330c      	adds	r3, #12
 8005cbc:	89fa      	ldrh	r2, [r7, #14]
 8005cbe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005cc0:	89fb      	ldrh	r3, [r7, #14]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d105      	bne.n	8005cd2 <dec_lock+0x5a>
 8005cc6:	4a09      	ldr	r2, [pc, #36]	@ (8005cec <dec_lock+0x74>)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	4413      	add	r3, r2
 8005cce:	2200      	movs	r2, #0
 8005cd0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	737b      	strb	r3, [r7, #13]
 8005cd6:	e001      	b.n	8005cdc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005cd8:	2302      	movs	r3, #2
 8005cda:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005cdc:	7b7b      	ldrb	r3, [r7, #13]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	20003a38 	.word	0x20003a38

08005cf0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	e010      	b.n	8005d20 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005cfe:	4a0d      	ldr	r2, [pc, #52]	@ (8005d34 <clear_lock+0x44>)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	4413      	add	r3, r2
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d105      	bne.n	8005d1a <clear_lock+0x2a>
 8005d0e:	4a09      	ldr	r2, [pc, #36]	@ (8005d34 <clear_lock+0x44>)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	011b      	lsls	r3, r3, #4
 8005d14:	4413      	add	r3, r2
 8005d16:	2200      	movs	r2, #0
 8005d18:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d9eb      	bls.n	8005cfe <clear_lock+0xe>
	}
}
 8005d26:	bf00      	nop
 8005d28:	bf00      	nop
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	20003a38 	.word	0x20003a38

08005d38 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	78db      	ldrb	r3, [r3, #3]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d034      	beq.n	8005db6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d50:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	7858      	ldrb	r0, [r3, #1]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	f7ff fd40 	bl	80057e4 <disk_write>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	73fb      	strb	r3, [r7, #15]
 8005d6e:	e022      	b.n	8005db6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	1ad2      	subs	r2, r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d217      	bcs.n	8005db6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	789b      	ldrb	r3, [r3, #2]
 8005d8a:	613b      	str	r3, [r7, #16]
 8005d8c:	e010      	b.n	8005db0 <sync_window+0x78>
					wsect += fs->fsize;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	4413      	add	r3, r2
 8005d96:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	7858      	ldrb	r0, [r3, #1]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005da2:	2301      	movs	r3, #1
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	f7ff fd1d 	bl	80057e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	613b      	str	r3, [r7, #16]
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d8eb      	bhi.n	8005d8e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d01b      	beq.n	8005e10 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7ff ffad 	bl	8005d38 <sync_window>
 8005dde:	4603      	mov	r3, r0
 8005de0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d113      	bne.n	8005e10 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	7858      	ldrb	r0, [r3, #1]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005df2:	2301      	movs	r3, #1
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	f7ff fcd5 	bl	80057a4 <disk_read>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d004      	beq.n	8005e0a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005e00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e04:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff ff87 	bl	8005d38 <sync_window>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d159      	bne.n	8005ee8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d149      	bne.n	8005ed0 <sync_fs+0xb4>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	791b      	ldrb	r3, [r3, #4]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d145      	bne.n	8005ed0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	899b      	ldrh	r3, [r3, #12]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	2100      	movs	r1, #0
 8005e52:	f7ff fda8 	bl	80059a6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	3338      	adds	r3, #56	@ 0x38
 8005e5a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005e5e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7ff fd37 	bl	80058d6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3338      	adds	r3, #56	@ 0x38
 8005e6c:	4921      	ldr	r1, [pc, #132]	@ (8005ef4 <sync_fs+0xd8>)
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7ff fd4c 	bl	800590c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3338      	adds	r3, #56	@ 0x38
 8005e78:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005e7c:	491e      	ldr	r1, [pc, #120]	@ (8005ef8 <sync_fs+0xdc>)
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7ff fd44 	bl	800590c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3338      	adds	r3, #56	@ 0x38
 8005e88:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	4619      	mov	r1, r3
 8005e92:	4610      	mov	r0, r2
 8005e94:	f7ff fd3a 	bl	800590c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3338      	adds	r3, #56	@ 0x38
 8005e9c:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	f7ff fd30 	bl	800590c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	7858      	ldrb	r0, [r3, #1]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	f7ff fc8d 	bl	80057e4 <disk_write>
			fs->fsi_flag = 0;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	785b      	ldrb	r3, [r3, #1]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff fca3 	bl	8005824 <disk_ioctl>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <sync_fs+0xcc>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	41615252 	.word	0x41615252
 8005ef8:	61417272 	.word	0x61417272

08005efc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	3b02      	subs	r3, #2
 8005f0a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	3b02      	subs	r3, #2
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d301      	bcc.n	8005f1c <clust2sect+0x20>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	e008      	b.n	8005f2e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	895b      	ldrh	r3, [r3, #10]
 8005f20:	461a      	mov	r2, r3
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	fb03 f202 	mul.w	r2, r3, r2
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f2c:	4413      	add	r3, r2
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b086      	sub	sp, #24
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d904      	bls.n	8005f5a <get_fat+0x20>
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d302      	bcc.n	8005f60 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	617b      	str	r3, [r7, #20]
 8005f5e:	e0ba      	b.n	80060d6 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005f60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f64:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	f000 8082 	beq.w	8006074 <get_fat+0x13a>
 8005f70:	2b03      	cmp	r3, #3
 8005f72:	f300 80a6 	bgt.w	80060c2 <get_fat+0x188>
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d002      	beq.n	8005f80 <get_fat+0x46>
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d055      	beq.n	800602a <get_fat+0xf0>
 8005f7e:	e0a0      	b.n	80060c2 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	085b      	lsrs	r3, r3, #1
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	899b      	ldrh	r3, [r3, #12]
 8005f96:	4619      	mov	r1, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f9e:	4413      	add	r3, r2
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6938      	ldr	r0, [r7, #16]
 8005fa4:	f7ff ff0c 	bl	8005dc0 <move_window>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f040 808c 	bne.w	80060c8 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	60fa      	str	r2, [r7, #12]
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	8992      	ldrh	r2, [r2, #12]
 8005fba:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fbe:	fb01 f202 	mul.w	r2, r1, r2
 8005fc2:	1a9b      	subs	r3, r3, r2
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005fcc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	899b      	ldrh	r3, [r3, #12]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fde:	4413      	add	r3, r2
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	6938      	ldr	r0, [r7, #16]
 8005fe4:	f7ff feec 	bl	8005dc0 <move_window>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d16e      	bne.n	80060cc <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	899b      	ldrh	r3, [r3, #12]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ffa:	fb01 f202 	mul.w	r2, r1, r2
 8005ffe:	1a9b      	subs	r3, r3, r2
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	4413      	add	r3, r2
 8006004:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006008:	021b      	lsls	r3, r3, #8
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	4313      	orrs	r3, r2
 800600e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d002      	beq.n	8006020 <get_fat+0xe6>
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	091b      	lsrs	r3, r3, #4
 800601e:	e002      	b.n	8006026 <get_fat+0xec>
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006026:	617b      	str	r3, [r7, #20]
			break;
 8006028:	e055      	b.n	80060d6 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	899b      	ldrh	r3, [r3, #12]
 8006032:	085b      	lsrs	r3, r3, #1
 8006034:	b29b      	uxth	r3, r3
 8006036:	4619      	mov	r1, r3
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	fbb3 f3f1 	udiv	r3, r3, r1
 800603e:	4413      	add	r3, r2
 8006040:	4619      	mov	r1, r3
 8006042:	6938      	ldr	r0, [r7, #16]
 8006044:	f7ff febc 	bl	8005dc0 <move_window>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d140      	bne.n	80060d0 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	8992      	ldrh	r2, [r2, #12]
 800605c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006060:	fb00 f202 	mul.w	r2, r0, r2
 8006064:	1a9b      	subs	r3, r3, r2
 8006066:	440b      	add	r3, r1
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff fbf9 	bl	8005860 <ld_word>
 800606e:	4603      	mov	r3, r0
 8006070:	617b      	str	r3, [r7, #20]
			break;
 8006072:	e030      	b.n	80060d6 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	899b      	ldrh	r3, [r3, #12]
 800607c:	089b      	lsrs	r3, r3, #2
 800607e:	b29b      	uxth	r3, r3
 8006080:	4619      	mov	r1, r3
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	fbb3 f3f1 	udiv	r3, r3, r1
 8006088:	4413      	add	r3, r2
 800608a:	4619      	mov	r1, r3
 800608c:	6938      	ldr	r0, [r7, #16]
 800608e:	f7ff fe97 	bl	8005dc0 <move_window>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d11d      	bne.n	80060d4 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	8992      	ldrh	r2, [r2, #12]
 80060a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80060aa:	fb00 f202 	mul.w	r2, r0, r2
 80060ae:	1a9b      	subs	r3, r3, r2
 80060b0:	440b      	add	r3, r1
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7ff fbec 	bl	8005890 <ld_dword>
 80060b8:	4603      	mov	r3, r0
 80060ba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80060be:	617b      	str	r3, [r7, #20]
			break;
 80060c0:	e009      	b.n	80060d6 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80060c2:	2301      	movs	r3, #1
 80060c4:	617b      	str	r3, [r7, #20]
 80060c6:	e006      	b.n	80060d6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060c8:	bf00      	nop
 80060ca:	e004      	b.n	80060d6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060cc:	bf00      	nop
 80060ce:	e002      	b.n	80060d6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80060d0:	bf00      	nop
 80060d2:	e000      	b.n	80060d6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80060d4:	bf00      	nop
		}
	}

	return val;
 80060d6:	697b      	ldr	r3, [r7, #20]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80060e0:	b590      	push	{r4, r7, lr}
 80060e2:	b089      	sub	sp, #36	@ 0x24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80060ec:	2302      	movs	r3, #2
 80060ee:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	f240 8109 	bls.w	800630a <put_fat+0x22a>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	429a      	cmp	r2, r3
 8006100:	f080 8103 	bcs.w	800630a <put_fat+0x22a>
		switch (fs->fs_type) {
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b03      	cmp	r3, #3
 800610a:	f000 80b6 	beq.w	800627a <put_fat+0x19a>
 800610e:	2b03      	cmp	r3, #3
 8006110:	f300 80fb 	bgt.w	800630a <put_fat+0x22a>
 8006114:	2b01      	cmp	r3, #1
 8006116:	d003      	beq.n	8006120 <put_fat+0x40>
 8006118:	2b02      	cmp	r3, #2
 800611a:	f000 8083 	beq.w	8006224 <put_fat+0x144>
 800611e:	e0f4      	b.n	800630a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	61bb      	str	r3, [r7, #24]
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	085b      	lsrs	r3, r3, #1
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	4413      	add	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	899b      	ldrh	r3, [r3, #12]
 8006136:	4619      	mov	r1, r3
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	fbb3 f3f1 	udiv	r3, r3, r1
 800613e:	4413      	add	r3, r2
 8006140:	4619      	mov	r1, r3
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f7ff fe3c 	bl	8005dc0 <move_window>
 8006148:	4603      	mov	r3, r0
 800614a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800614c:	7ffb      	ldrb	r3, [r7, #31]
 800614e:	2b00      	cmp	r3, #0
 8006150:	f040 80d4 	bne.w	80062fc <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	1c5a      	adds	r2, r3, #1
 800615e:	61ba      	str	r2, [r7, #24]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	8992      	ldrh	r2, [r2, #12]
 8006164:	fbb3 f0f2 	udiv	r0, r3, r2
 8006168:	fb00 f202 	mul.w	r2, r0, r2
 800616c:	1a9b      	subs	r3, r3, r2
 800616e:	440b      	add	r3, r1
 8006170:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00d      	beq.n	8006198 <put_fat+0xb8>
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	b25b      	sxtb	r3, r3
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	b25a      	sxtb	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	b2db      	uxtb	r3, r3
 800618c:	011b      	lsls	r3, r3, #4
 800618e:	b25b      	sxtb	r3, r3
 8006190:	4313      	orrs	r3, r2
 8006192:	b25b      	sxtb	r3, r3
 8006194:	b2db      	uxtb	r3, r3
 8006196:	e001      	b.n	800619c <put_fat+0xbc>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	b2db      	uxtb	r3, r3
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2201      	movs	r2, #1
 80061a4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	899b      	ldrh	r3, [r3, #12]
 80061ae:	4619      	mov	r1, r3
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80061b6:	4413      	add	r3, r2
 80061b8:	4619      	mov	r1, r3
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f7ff fe00 	bl	8005dc0 <move_window>
 80061c0:	4603      	mov	r3, r0
 80061c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061c4:	7ffb      	ldrb	r3, [r7, #31]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f040 809a 	bne.w	8006300 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	899b      	ldrh	r3, [r3, #12]
 80061d6:	461a      	mov	r2, r3
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	fbb3 f0f2 	udiv	r0, r3, r2
 80061de:	fb00 f202 	mul.w	r2, r0, r2
 80061e2:	1a9b      	subs	r3, r3, r2
 80061e4:	440b      	add	r3, r1
 80061e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <put_fat+0x11a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	091b      	lsrs	r3, r3, #4
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	e00e      	b.n	8006218 <put_fat+0x138>
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	b25b      	sxtb	r3, r3
 8006200:	f023 030f 	bic.w	r3, r3, #15
 8006204:	b25a      	sxtb	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	0a1b      	lsrs	r3, r3, #8
 800620a:	b25b      	sxtb	r3, r3
 800620c:	f003 030f 	and.w	r3, r3, #15
 8006210:	b25b      	sxtb	r3, r3
 8006212:	4313      	orrs	r3, r2
 8006214:	b25b      	sxtb	r3, r3
 8006216:	b2db      	uxtb	r3, r3
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2201      	movs	r2, #1
 8006220:	70da      	strb	r2, [r3, #3]
			break;
 8006222:	e072      	b.n	800630a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	899b      	ldrh	r3, [r3, #12]
 800622c:	085b      	lsrs	r3, r3, #1
 800622e:	b29b      	uxth	r3, r3
 8006230:	4619      	mov	r1, r3
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	fbb3 f3f1 	udiv	r3, r3, r1
 8006238:	4413      	add	r3, r2
 800623a:	4619      	mov	r1, r3
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f7ff fdbf 	bl	8005dc0 <move_window>
 8006242:	4603      	mov	r3, r0
 8006244:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006246:	7ffb      	ldrb	r3, [r7, #31]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d15b      	bne.n	8006304 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	8992      	ldrh	r2, [r2, #12]
 800625a:	fbb3 f0f2 	udiv	r0, r3, r2
 800625e:	fb00 f202 	mul.w	r2, r0, r2
 8006262:	1a9b      	subs	r3, r3, r2
 8006264:	440b      	add	r3, r1
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	b292      	uxth	r2, r2
 800626a:	4611      	mov	r1, r2
 800626c:	4618      	mov	r0, r3
 800626e:	f7ff fb32 	bl	80058d6 <st_word>
			fs->wflag = 1;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2201      	movs	r2, #1
 8006276:	70da      	strb	r2, [r3, #3]
			break;
 8006278:	e047      	b.n	800630a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	899b      	ldrh	r3, [r3, #12]
 8006282:	089b      	lsrs	r3, r3, #2
 8006284:	b29b      	uxth	r3, r3
 8006286:	4619      	mov	r1, r3
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	fbb3 f3f1 	udiv	r3, r3, r1
 800628e:	4413      	add	r3, r2
 8006290:	4619      	mov	r1, r3
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f7ff fd94 	bl	8005dc0 <move_window>
 8006298:	4603      	mov	r3, r0
 800629a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800629c:	7ffb      	ldrb	r3, [r7, #31]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d132      	bne.n	8006308 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	8992      	ldrh	r2, [r2, #12]
 80062b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80062ba:	fb00 f202 	mul.w	r2, r0, r2
 80062be:	1a9b      	subs	r3, r3, r2
 80062c0:	440b      	add	r3, r1
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7ff fae4 	bl	8005890 <ld_dword>
 80062c8:	4603      	mov	r3, r0
 80062ca:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80062ce:	4323      	orrs	r3, r4
 80062d0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	8992      	ldrh	r2, [r2, #12]
 80062e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80062e4:	fb00 f202 	mul.w	r2, r0, r2
 80062e8:	1a9b      	subs	r3, r3, r2
 80062ea:	440b      	add	r3, r1
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff fb0c 	bl	800590c <st_dword>
			fs->wflag = 1;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2201      	movs	r2, #1
 80062f8:	70da      	strb	r2, [r3, #3]
			break;
 80062fa:	e006      	b.n	800630a <put_fat+0x22a>
			if (res != FR_OK) break;
 80062fc:	bf00      	nop
 80062fe:	e004      	b.n	800630a <put_fat+0x22a>
			if (res != FR_OK) break;
 8006300:	bf00      	nop
 8006302:	e002      	b.n	800630a <put_fat+0x22a>
			if (res != FR_OK) break;
 8006304:	bf00      	nop
 8006306:	e000      	b.n	800630a <put_fat+0x22a>
			if (res != FR_OK) break;
 8006308:	bf00      	nop
		}
	}
	return res;
 800630a:	7ffb      	ldrb	r3, [r7, #31]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3724      	adds	r7, #36	@ 0x24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd90      	pop	{r4, r7, pc}

08006314 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b088      	sub	sp, #32
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006320:	2300      	movs	r3, #0
 8006322:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d904      	bls.n	800633a <remove_chain+0x26>
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	429a      	cmp	r2, r3
 8006338:	d301      	bcc.n	800633e <remove_chain+0x2a>
 800633a:	2302      	movs	r3, #2
 800633c:	e04b      	b.n	80063d6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00c      	beq.n	800635e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006344:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006348:	6879      	ldr	r1, [r7, #4]
 800634a:	69b8      	ldr	r0, [r7, #24]
 800634c:	f7ff fec8 	bl	80060e0 <put_fat>
 8006350:	4603      	mov	r3, r0
 8006352:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006354:	7ffb      	ldrb	r3, [r7, #31]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <remove_chain+0x4a>
 800635a:	7ffb      	ldrb	r3, [r7, #31]
 800635c:	e03b      	b.n	80063d6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800635e:	68b9      	ldr	r1, [r7, #8]
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f7ff fdea 	bl	8005f3a <get_fat>
 8006366:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d031      	beq.n	80063d2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <remove_chain+0x64>
 8006374:	2302      	movs	r3, #2
 8006376:	e02e      	b.n	80063d6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800637e:	d101      	bne.n	8006384 <remove_chain+0x70>
 8006380:	2301      	movs	r3, #1
 8006382:	e028      	b.n	80063d6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006384:	2200      	movs	r2, #0
 8006386:	68b9      	ldr	r1, [r7, #8]
 8006388:	69b8      	ldr	r0, [r7, #24]
 800638a:	f7ff fea9 	bl	80060e0 <put_fat>
 800638e:	4603      	mov	r3, r0
 8006390:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006392:	7ffb      	ldrb	r3, [r7, #31]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d001      	beq.n	800639c <remove_chain+0x88>
 8006398:	7ffb      	ldrb	r3, [r7, #31]
 800639a:	e01c      	b.n	80063d6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	699a      	ldr	r2, [r3, #24]
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	69db      	ldr	r3, [r3, #28]
 80063a4:	3b02      	subs	r3, #2
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d20b      	bcs.n	80063c2 <remove_chain+0xae>
			fs->free_clst++;
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	1c5a      	adds	r2, r3, #1
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	791b      	ldrb	r3, [r3, #4]
 80063b8:	f043 0301 	orr.w	r3, r3, #1
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d3c6      	bcc.n	800635e <remove_chain+0x4a>
 80063d0:	e000      	b.n	80063d4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80063d2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3720      	adds	r7, #32
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b088      	sub	sp, #32
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10d      	bne.n	8006410 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d004      	beq.n	800640a <create_chain+0x2c>
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	69db      	ldr	r3, [r3, #28]
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	429a      	cmp	r2, r3
 8006408:	d31b      	bcc.n	8006442 <create_chain+0x64>
 800640a:	2301      	movs	r3, #1
 800640c:	61bb      	str	r3, [r7, #24]
 800640e:	e018      	b.n	8006442 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006410:	6839      	ldr	r1, [r7, #0]
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff fd91 	bl	8005f3a <get_fat>
 8006418:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d801      	bhi.n	8006424 <create_chain+0x46>
 8006420:	2301      	movs	r3, #1
 8006422:	e070      	b.n	8006506 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800642a:	d101      	bne.n	8006430 <create_chain+0x52>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	e06a      	b.n	8006506 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	429a      	cmp	r2, r3
 8006438:	d201      	bcs.n	800643e <create_chain+0x60>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	e063      	b.n	8006506 <create_chain+0x128>
		scl = clst;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	3301      	adds	r3, #1
 800644a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	69fa      	ldr	r2, [r7, #28]
 8006452:	429a      	cmp	r2, r3
 8006454:	d307      	bcc.n	8006466 <create_chain+0x88>
				ncl = 2;
 8006456:	2302      	movs	r3, #2
 8006458:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800645a:	69fa      	ldr	r2, [r7, #28]
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	429a      	cmp	r2, r3
 8006460:	d901      	bls.n	8006466 <create_chain+0x88>
 8006462:	2300      	movs	r3, #0
 8006464:	e04f      	b.n	8006506 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006466:	69f9      	ldr	r1, [r7, #28]
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7ff fd66 	bl	8005f3a <get_fat>
 800646e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00e      	beq.n	8006494 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d003      	beq.n	8006484 <create_chain+0xa6>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006482:	d101      	bne.n	8006488 <create_chain+0xaa>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	e03e      	b.n	8006506 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006488:	69fa      	ldr	r2, [r7, #28]
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	429a      	cmp	r2, r3
 800648e:	d1da      	bne.n	8006446 <create_chain+0x68>
 8006490:	2300      	movs	r3, #0
 8006492:	e038      	b.n	8006506 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006494:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006496:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800649a:	69f9      	ldr	r1, [r7, #28]
 800649c:	6938      	ldr	r0, [r7, #16]
 800649e:	f7ff fe1f 	bl	80060e0 <put_fat>
 80064a2:	4603      	mov	r3, r0
 80064a4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80064a6:	7dfb      	ldrb	r3, [r7, #23]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d109      	bne.n	80064c0 <create_chain+0xe2>
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d006      	beq.n	80064c0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80064b2:	69fa      	ldr	r2, [r7, #28]
 80064b4:	6839      	ldr	r1, [r7, #0]
 80064b6:	6938      	ldr	r0, [r7, #16]
 80064b8:	f7ff fe12 	bl	80060e0 <put_fat>
 80064bc:	4603      	mov	r3, r0
 80064be:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80064c0:	7dfb      	ldrb	r3, [r7, #23]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d116      	bne.n	80064f4 <create_chain+0x116>
		fs->last_clst = ncl;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	69fa      	ldr	r2, [r7, #28]
 80064ca:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	699a      	ldr	r2, [r3, #24]
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	3b02      	subs	r3, #2
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d804      	bhi.n	80064e4 <create_chain+0x106>
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	1e5a      	subs	r2, r3, #1
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	791b      	ldrb	r3, [r3, #4]
 80064e8:	f043 0301 	orr.w	r3, r3, #1
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	711a      	strb	r2, [r3, #4]
 80064f2:	e007      	b.n	8006504 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80064f4:	7dfb      	ldrb	r3, [r7, #23]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d102      	bne.n	8006500 <create_chain+0x122>
 80064fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80064fe:	e000      	b.n	8006502 <create_chain+0x124>
 8006500:	2301      	movs	r3, #1
 8006502:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006504:	69fb      	ldr	r3, [r7, #28]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3720      	adds	r7, #32
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800650e:	b480      	push	{r7}
 8006510:	b087      	sub	sp, #28
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006522:	3304      	adds	r3, #4
 8006524:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	899b      	ldrh	r3, [r3, #12]
 800652a:	461a      	mov	r2, r3
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	8952      	ldrh	r2, [r2, #10]
 8006536:	fbb3 f3f2 	udiv	r3, r3, r2
 800653a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	1d1a      	adds	r2, r3, #4
 8006540:	613a      	str	r2, [r7, #16]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <clmt_clust+0x42>
 800654c:	2300      	movs	r3, #0
 800654e:	e010      	b.n	8006572 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	429a      	cmp	r2, r3
 8006556:	d307      	bcc.n	8006568 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	3304      	adds	r3, #4
 8006564:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006566:	e7e9      	b.n	800653c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006568:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	4413      	add	r3, r2
}
 8006572:	4618      	mov	r0, r3
 8006574:	371c      	adds	r7, #28
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b086      	sub	sp, #24
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006594:	d204      	bcs.n	80065a0 <dir_sdi+0x22>
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	f003 031f 	and.w	r3, r3, #31
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80065a0:	2302      	movs	r3, #2
 80065a2:	e071      	b.n	8006688 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d106      	bne.n	80065c4 <dir_sdi+0x46>
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d902      	bls.n	80065c4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10c      	bne.n	80065e4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	095b      	lsrs	r3, r3, #5
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	8912      	ldrh	r2, [r2, #8]
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d301      	bcc.n	80065da <dir_sdi+0x5c>
 80065d6:	2302      	movs	r3, #2
 80065d8:	e056      	b.n	8006688 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	61da      	str	r2, [r3, #28]
 80065e2:	e02d      	b.n	8006640 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	895b      	ldrh	r3, [r3, #10]
 80065e8:	461a      	mov	r2, r3
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	899b      	ldrh	r3, [r3, #12]
 80065ee:	fb02 f303 	mul.w	r3, r2, r3
 80065f2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80065f4:	e019      	b.n	800662a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6979      	ldr	r1, [r7, #20]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7ff fc9d 	bl	8005f3a <get_fat>
 8006600:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006608:	d101      	bne.n	800660e <dir_sdi+0x90>
 800660a:	2301      	movs	r3, #1
 800660c:	e03c      	b.n	8006688 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d904      	bls.n	800661e <dir_sdi+0xa0>
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	429a      	cmp	r2, r3
 800661c:	d301      	bcc.n	8006622 <dir_sdi+0xa4>
 800661e:	2302      	movs	r3, #2
 8006620:	e032      	b.n	8006688 <dir_sdi+0x10a>
			ofs -= csz;
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	429a      	cmp	r2, r3
 8006630:	d2e1      	bcs.n	80065f6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006632:	6979      	ldr	r1, [r7, #20]
 8006634:	6938      	ldr	r0, [r7, #16]
 8006636:	f7ff fc61 	bl	8005efc <clust2sect>
 800663a:	4602      	mov	r2, r0
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <dir_sdi+0xd4>
 800664e:	2302      	movs	r3, #2
 8006650:	e01a      	b.n	8006688 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	69da      	ldr	r2, [r3, #28]
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	899b      	ldrh	r3, [r3, #12]
 800665a:	4619      	mov	r1, r3
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006662:	441a      	add	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	899b      	ldrh	r3, [r3, #12]
 8006672:	461a      	mov	r2, r3
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	fbb3 f0f2 	udiv	r0, r3, r2
 800667a:	fb00 f202 	mul.w	r2, r0, r2
 800667e:	1a9b      	subs	r3, r3, r2
 8006680:	18ca      	adds	r2, r1, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	3320      	adds	r3, #32
 80066a6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d003      	beq.n	80066b8 <dir_next+0x28>
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066b6:	d301      	bcc.n	80066bc <dir_next+0x2c>
 80066b8:	2304      	movs	r3, #4
 80066ba:	e0bb      	b.n	8006834 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	899b      	ldrh	r3, [r3, #12]
 80066c0:	461a      	mov	r2, r3
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80066c8:	fb01 f202 	mul.w	r2, r1, r2
 80066cc:	1a9b      	subs	r3, r3, r2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f040 809d 	bne.w	800680e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10b      	bne.n	80066fe <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	095b      	lsrs	r3, r3, #5
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	8912      	ldrh	r2, [r2, #8]
 80066ee:	4293      	cmp	r3, r2
 80066f0:	f0c0 808d 	bcc.w	800680e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	61da      	str	r2, [r3, #28]
 80066fa:	2304      	movs	r3, #4
 80066fc:	e09a      	b.n	8006834 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	899b      	ldrh	r3, [r3, #12]
 8006702:	461a      	mov	r2, r3
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	fbb3 f3f2 	udiv	r3, r3, r2
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	8952      	ldrh	r2, [r2, #10]
 800670e:	3a01      	subs	r2, #1
 8006710:	4013      	ands	r3, r2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d17b      	bne.n	800680e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	4619      	mov	r1, r3
 800671e:	4610      	mov	r0, r2
 8006720:	f7ff fc0b 	bl	8005f3a <get_fat>
 8006724:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d801      	bhi.n	8006730 <dir_next+0xa0>
 800672c:	2302      	movs	r3, #2
 800672e:	e081      	b.n	8006834 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006736:	d101      	bne.n	800673c <dir_next+0xac>
 8006738:	2301      	movs	r3, #1
 800673a:	e07b      	b.n	8006834 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	429a      	cmp	r2, r3
 8006744:	d359      	bcc.n	80067fa <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d104      	bne.n	8006756 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	61da      	str	r2, [r3, #28]
 8006752:	2304      	movs	r3, #4
 8006754:	e06e      	b.n	8006834 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	4619      	mov	r1, r3
 800675e:	4610      	mov	r0, r2
 8006760:	f7ff fe3d 	bl	80063de <create_chain>
 8006764:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <dir_next+0xe0>
 800676c:	2307      	movs	r3, #7
 800676e:	e061      	b.n	8006834 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d101      	bne.n	800677a <dir_next+0xea>
 8006776:	2302      	movs	r3, #2
 8006778:	e05c      	b.n	8006834 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006780:	d101      	bne.n	8006786 <dir_next+0xf6>
 8006782:	2301      	movs	r3, #1
 8006784:	e056      	b.n	8006834 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f7ff fad6 	bl	8005d38 <sync_window>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <dir_next+0x106>
 8006792:	2301      	movs	r3, #1
 8006794:	e04e      	b.n	8006834 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	899b      	ldrh	r3, [r3, #12]
 80067a0:	461a      	mov	r2, r3
 80067a2:	2100      	movs	r1, #0
 80067a4:	f7ff f8ff 	bl	80059a6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80067a8:	2300      	movs	r3, #0
 80067aa:	613b      	str	r3, [r7, #16]
 80067ac:	6979      	ldr	r1, [r7, #20]
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f7ff fba4 	bl	8005efc <clust2sect>
 80067b4:	4602      	mov	r2, r0
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80067ba:	e012      	b.n	80067e2 <dir_next+0x152>
						fs->wflag = 1;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2201      	movs	r2, #1
 80067c0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f7ff fab8 	bl	8005d38 <sync_window>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <dir_next+0x142>
 80067ce:	2301      	movs	r3, #1
 80067d0:	e030      	b.n	8006834 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	3301      	adds	r3, #1
 80067d6:	613b      	str	r3, [r7, #16]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	895b      	ldrh	r3, [r3, #10]
 80067e6:	461a      	mov	r2, r3
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d3e6      	bcc.n	80067bc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	1ad2      	subs	r2, r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006800:	6979      	ldr	r1, [r7, #20]
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f7ff fb7a 	bl	8005efc <clust2sect>
 8006808:	4602      	mov	r2, r0
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	899b      	ldrh	r3, [r3, #12]
 800681e:	461a      	mov	r2, r3
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	fbb3 f0f2 	udiv	r0, r3, r2
 8006826:	fb00 f202 	mul.w	r2, r0, r2
 800682a:	1a9b      	subs	r3, r3, r2
 800682c:	18ca      	adds	r2, r1, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800684c:	2100      	movs	r1, #0
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff fe95 	bl	800657e <dir_sdi>
 8006854:	4603      	mov	r3, r0
 8006856:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006858:	7dfb      	ldrb	r3, [r7, #23]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d12b      	bne.n	80068b6 <dir_alloc+0x7a>
		n = 0;
 800685e:	2300      	movs	r3, #0
 8006860:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	4619      	mov	r1, r3
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f7ff faa9 	bl	8005dc0 <move_window>
 800686e:	4603      	mov	r3, r0
 8006870:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006872:	7dfb      	ldrb	r3, [r7, #23]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d11d      	bne.n	80068b4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	2be5      	cmp	r3, #229	@ 0xe5
 8006880:	d004      	beq.n	800688c <dir_alloc+0x50>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d107      	bne.n	800689c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	3301      	adds	r3, #1
 8006890:	613b      	str	r3, [r7, #16]
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	429a      	cmp	r2, r3
 8006898:	d102      	bne.n	80068a0 <dir_alloc+0x64>
 800689a:	e00c      	b.n	80068b6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800689c:	2300      	movs	r3, #0
 800689e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80068a0:	2101      	movs	r1, #1
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7ff fef4 	bl	8006690 <dir_next>
 80068a8:	4603      	mov	r3, r0
 80068aa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80068ac:	7dfb      	ldrb	r3, [r7, #23]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d0d7      	beq.n	8006862 <dir_alloc+0x26>
 80068b2:	e000      	b.n	80068b6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80068b4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80068b6:	7dfb      	ldrb	r3, [r7, #23]
 80068b8:	2b04      	cmp	r3, #4
 80068ba:	d101      	bne.n	80068c0 <dir_alloc+0x84>
 80068bc:	2307      	movs	r3, #7
 80068be:	75fb      	strb	r3, [r7, #23]
	return res;
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3718      	adds	r7, #24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b084      	sub	sp, #16
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	331a      	adds	r3, #26
 80068d8:	4618      	mov	r0, r3
 80068da:	f7fe ffc1 	bl	8005860 <ld_word>
 80068de:	4603      	mov	r3, r0
 80068e0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	2b03      	cmp	r3, #3
 80068e8:	d109      	bne.n	80068fe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	3314      	adds	r3, #20
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7fe ffb6 	bl	8005860 <ld_word>
 80068f4:	4603      	mov	r3, r0
 80068f6:	041b      	lsls	r3, r3, #16
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80068fe:	68fb      	ldr	r3, [r7, #12]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	331a      	adds	r3, #26
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	b292      	uxth	r2, r2
 800691c:	4611      	mov	r1, r2
 800691e:	4618      	mov	r0, r3
 8006920:	f7fe ffd9 	bl	80058d6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	2b03      	cmp	r3, #3
 800692a:	d109      	bne.n	8006940 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f103 0214 	add.w	r2, r3, #20
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	0c1b      	lsrs	r3, r3, #16
 8006936:	b29b      	uxth	r3, r3
 8006938:	4619      	mov	r1, r3
 800693a:	4610      	mov	r0, r2
 800693c:	f7fe ffcb 	bl	80058d6 <st_word>
	}
}
 8006940:	bf00      	nop
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006948:	b590      	push	{r4, r7, lr}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	331a      	adds	r3, #26
 8006956:	4618      	mov	r0, r3
 8006958:	f7fe ff82 	bl	8005860 <ld_word>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <cmp_lfn+0x1e>
 8006962:	2300      	movs	r3, #0
 8006964:	e059      	b.n	8006a1a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800696e:	1e5a      	subs	r2, r3, #1
 8006970:	4613      	mov	r3, r2
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	4413      	add	r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800697c:	2301      	movs	r3, #1
 800697e:	81fb      	strh	r3, [r7, #14]
 8006980:	2300      	movs	r3, #0
 8006982:	613b      	str	r3, [r7, #16]
 8006984:	e033      	b.n	80069ee <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006986:	4a27      	ldr	r2, [pc, #156]	@ (8006a24 <cmp_lfn+0xdc>)
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	4413      	add	r3, r2
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	4413      	add	r3, r2
 8006994:	4618      	mov	r0, r3
 8006996:	f7fe ff63 	bl	8005860 <ld_word>
 800699a:	4603      	mov	r3, r0
 800699c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800699e:	89fb      	ldrh	r3, [r7, #14]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d01a      	beq.n	80069da <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	2bfe      	cmp	r3, #254	@ 0xfe
 80069a8:	d812      	bhi.n	80069d0 <cmp_lfn+0x88>
 80069aa:	89bb      	ldrh	r3, [r7, #12]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f001 fd71 	bl	8008494 <ff_wtoupper>
 80069b2:	4603      	mov	r3, r0
 80069b4:	461c      	mov	r4, r3
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	617a      	str	r2, [r7, #20]
 80069bc:	005b      	lsls	r3, r3, #1
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	4413      	add	r3, r2
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f001 fd65 	bl	8008494 <ff_wtoupper>
 80069ca:	4603      	mov	r3, r0
 80069cc:	429c      	cmp	r4, r3
 80069ce:	d001      	beq.n	80069d4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80069d0:	2300      	movs	r3, #0
 80069d2:	e022      	b.n	8006a1a <cmp_lfn+0xd2>
			}
			wc = uc;
 80069d4:	89bb      	ldrh	r3, [r7, #12]
 80069d6:	81fb      	strh	r3, [r7, #14]
 80069d8:	e006      	b.n	80069e8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80069da:	89bb      	ldrh	r3, [r7, #12]
 80069dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d001      	beq.n	80069e8 <cmp_lfn+0xa0>
 80069e4:	2300      	movs	r3, #0
 80069e6:	e018      	b.n	8006a1a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	3301      	adds	r3, #1
 80069ec:	613b      	str	r3, [r7, #16]
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	2b0c      	cmp	r3, #12
 80069f2:	d9c8      	bls.n	8006986 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00b      	beq.n	8006a18 <cmp_lfn+0xd0>
 8006a00:	89fb      	ldrh	r3, [r7, #14]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d008      	beq.n	8006a18 <cmp_lfn+0xd0>
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	881b      	ldrh	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <cmp_lfn+0xd0>
 8006a14:	2300      	movs	r3, #0
 8006a16:	e000      	b.n	8006a1a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006a18:	2301      	movs	r3, #1
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	371c      	adds	r7, #28
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd90      	pop	{r4, r7, pc}
 8006a22:	bf00      	nop
 8006a24:	08009774 	.word	0x08009774

08006a28 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b088      	sub	sp, #32
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	4611      	mov	r1, r2
 8006a34:	461a      	mov	r2, r3
 8006a36:	460b      	mov	r3, r1
 8006a38:	71fb      	strb	r3, [r7, #7]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	330d      	adds	r3, #13
 8006a42:	79ba      	ldrb	r2, [r7, #6]
 8006a44:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	330b      	adds	r3, #11
 8006a4a:	220f      	movs	r2, #15
 8006a4c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	330c      	adds	r3, #12
 8006a52:	2200      	movs	r2, #0
 8006a54:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	331a      	adds	r3, #26
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fe ff3a 	bl	80058d6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006a62:	79fb      	ldrb	r3, [r7, #7]
 8006a64:	1e5a      	subs	r2, r3, #1
 8006a66:	4613      	mov	r3, r2
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	4413      	add	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	82fb      	strh	r3, [r7, #22]
 8006a76:	2300      	movs	r3, #0
 8006a78:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006a7a:	8afb      	ldrh	r3, [r7, #22]
 8006a7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d007      	beq.n	8006a94 <put_lfn+0x6c>
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	1c5a      	adds	r2, r3, #1
 8006a88:	61fa      	str	r2, [r7, #28]
 8006a8a:	005b      	lsls	r3, r3, #1
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	4413      	add	r3, r2
 8006a90:	881b      	ldrh	r3, [r3, #0]
 8006a92:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006a94:	4a17      	ldr	r2, [pc, #92]	@ (8006af4 <put_lfn+0xcc>)
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	4413      	add	r3, r2
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	8afa      	ldrh	r2, [r7, #22]
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe ff15 	bl	80058d6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006aac:	8afb      	ldrh	r3, [r7, #22]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d102      	bne.n	8006ab8 <put_lfn+0x90>
 8006ab2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006ab6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	3301      	adds	r3, #1
 8006abc:	61bb      	str	r3, [r7, #24]
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	2b0c      	cmp	r3, #12
 8006ac2:	d9da      	bls.n	8006a7a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006ac4:	8afb      	ldrh	r3, [r7, #22]
 8006ac6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d006      	beq.n	8006adc <put_lfn+0xb4>
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d103      	bne.n	8006ae4 <put_lfn+0xbc>
 8006adc:	79fb      	ldrb	r3, [r7, #7]
 8006ade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ae2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	79fa      	ldrb	r2, [r7, #7]
 8006ae8:	701a      	strb	r2, [r3, #0]
}
 8006aea:	bf00      	nop
 8006aec:	3720      	adds	r7, #32
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	08009774 	.word	0x08009774

08006af8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08c      	sub	sp, #48	@ 0x30
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006b06:	220b      	movs	r2, #11
 8006b08:	68b9      	ldr	r1, [r7, #8]
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f7fe ff2a 	bl	8005964 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	2b05      	cmp	r3, #5
 8006b14:	d92b      	bls.n	8006b6e <gen_numname+0x76>
		sr = seq;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006b1a:	e022      	b.n	8006b62 <gen_numname+0x6a>
			wc = *lfn++;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	1c9a      	adds	r2, r3, #2
 8006b20:	607a      	str	r2, [r7, #4]
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8006b26:	2300      	movs	r3, #0
 8006b28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b2a:	e017      	b.n	8006b5c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	005a      	lsls	r2, r3, #1
 8006b30:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	4413      	add	r3, r2
 8006b38:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006b3a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006b3c:	085b      	lsrs	r3, r3, #1
 8006b3e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <gen_numname+0x5e>
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8006b50:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8006b54:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b58:	3301      	adds	r3, #1
 8006b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5e:	2b0f      	cmp	r3, #15
 8006b60:	d9e4      	bls.n	8006b2c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1d8      	bne.n	8006b1c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006b6e:	2307      	movs	r3, #7
 8006b70:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	f003 030f 	and.w	r3, r3, #15
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	3330      	adds	r3, #48	@ 0x30
 8006b7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8006b82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b86:	2b39      	cmp	r3, #57	@ 0x39
 8006b88:	d904      	bls.n	8006b94 <gen_numname+0x9c>
 8006b8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b8e:	3307      	adds	r3, #7
 8006b90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8006b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b96:	1e5a      	subs	r2, r3, #1
 8006b98:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006b9a:	3330      	adds	r3, #48	@ 0x30
 8006b9c:	443b      	add	r3, r7
 8006b9e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8006ba2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	091b      	lsrs	r3, r3, #4
 8006baa:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1df      	bne.n	8006b72 <gen_numname+0x7a>
	ns[i] = '~';
 8006bb2:	f107 0214 	add.w	r2, r7, #20
 8006bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb8:	4413      	add	r3, r2
 8006bba:	227e      	movs	r2, #126	@ 0x7e
 8006bbc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bc2:	e002      	b.n	8006bca <gen_numname+0xd2>
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d205      	bcs.n	8006bde <gen_numname+0xe6>
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd6:	4413      	add	r3, r2
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	2b20      	cmp	r3, #32
 8006bdc:	d1f2      	bne.n	8006bc4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be0:	2b07      	cmp	r3, #7
 8006be2:	d807      	bhi.n	8006bf4 <gen_numname+0xfc>
 8006be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006bea:	3330      	adds	r3, #48	@ 0x30
 8006bec:	443b      	add	r3, r7
 8006bee:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006bf2:	e000      	b.n	8006bf6 <gen_numname+0xfe>
 8006bf4:	2120      	movs	r1, #32
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf8:	1c5a      	adds	r2, r3, #1
 8006bfa:	627a      	str	r2, [r7, #36]	@ 0x24
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	4413      	add	r3, r2
 8006c00:	460a      	mov	r2, r1
 8006c02:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c06:	2b07      	cmp	r3, #7
 8006c08:	d9e9      	bls.n	8006bde <gen_numname+0xe6>
}
 8006c0a:	bf00      	nop
 8006c0c:	bf00      	nop
 8006c0e:	3730      	adds	r7, #48	@ 0x30
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006c20:	230b      	movs	r3, #11
 8006c22:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	0852      	lsrs	r2, r2, #1
 8006c2a:	01db      	lsls	r3, r3, #7
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	1c59      	adds	r1, r3, #1
 8006c34:	6079      	str	r1, [r7, #4]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	4413      	add	r3, r2
 8006c3a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	60bb      	str	r3, [r7, #8]
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1ed      	bne.n	8006c24 <sum_sfn+0x10>
	return sum;
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b086      	sub	sp, #24
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006c64:	2100      	movs	r1, #0
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7ff fc89 	bl	800657e <dir_sdi>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006c70:	7dfb      	ldrb	r3, [r7, #23]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <dir_find+0x24>
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
 8006c78:	e0a9      	b.n	8006dce <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006c7a:	23ff      	movs	r3, #255	@ 0xff
 8006c7c:	753b      	strb	r3, [r7, #20]
 8006c7e:	7d3b      	ldrb	r3, [r7, #20]
 8006c80:	757b      	strb	r3, [r7, #21]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006c88:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6938      	ldr	r0, [r7, #16]
 8006c92:	f7ff f895 	bl	8005dc0 <move_window>
 8006c96:	4603      	mov	r3, r0
 8006c98:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006c9a:	7dfb      	ldrb	r3, [r7, #23]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f040 8090 	bne.w	8006dc2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006caa:	7dbb      	ldrb	r3, [r7, #22]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d102      	bne.n	8006cb6 <dir_find+0x60>
 8006cb0:	2304      	movs	r3, #4
 8006cb2:	75fb      	strb	r3, [r7, #23]
 8006cb4:	e08a      	b.n	8006dcc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	330b      	adds	r3, #11
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cc2:	73fb      	strb	r3, [r7, #15]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	7bfa      	ldrb	r2, [r7, #15]
 8006cc8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006cca:	7dbb      	ldrb	r3, [r7, #22]
 8006ccc:	2be5      	cmp	r3, #229	@ 0xe5
 8006cce:	d007      	beq.n	8006ce0 <dir_find+0x8a>
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
 8006cd2:	f003 0308 	and.w	r3, r3, #8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d009      	beq.n	8006cee <dir_find+0x98>
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
 8006cdc:	2b0f      	cmp	r3, #15
 8006cde:	d006      	beq.n	8006cee <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006ce0:	23ff      	movs	r3, #255	@ 0xff
 8006ce2:	757b      	strb	r3, [r7, #21]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006cea:	631a      	str	r2, [r3, #48]	@ 0x30
 8006cec:	e05e      	b.n	8006dac <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
 8006cf0:	2b0f      	cmp	r3, #15
 8006cf2:	d136      	bne.n	8006d62 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d154      	bne.n	8006dac <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006d02:	7dbb      	ldrb	r3, [r7, #22]
 8006d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00d      	beq.n	8006d28 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a1b      	ldr	r3, [r3, #32]
 8006d10:	7b5b      	ldrb	r3, [r3, #13]
 8006d12:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006d14:	7dbb      	ldrb	r3, [r7, #22]
 8006d16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d1a:	75bb      	strb	r3, [r7, #22]
 8006d1c:	7dbb      	ldrb	r3, [r7, #22]
 8006d1e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	695a      	ldr	r2, [r3, #20]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006d28:	7dba      	ldrb	r2, [r7, #22]
 8006d2a:	7d7b      	ldrb	r3, [r7, #21]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d115      	bne.n	8006d5c <dir_find+0x106>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	330d      	adds	r3, #13
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	7d3a      	ldrb	r2, [r7, #20]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d10e      	bne.n	8006d5c <dir_find+0x106>
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	691a      	ldr	r2, [r3, #16]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	4619      	mov	r1, r3
 8006d48:	4610      	mov	r0, r2
 8006d4a:	f7ff fdfd 	bl	8006948 <cmp_lfn>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d003      	beq.n	8006d5c <dir_find+0x106>
 8006d54:	7d7b      	ldrb	r3, [r7, #21]
 8006d56:	3b01      	subs	r3, #1
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	e000      	b.n	8006d5e <dir_find+0x108>
 8006d5c:	23ff      	movs	r3, #255	@ 0xff
 8006d5e:	757b      	strb	r3, [r7, #21]
 8006d60:	e024      	b.n	8006dac <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006d62:	7d7b      	ldrb	r3, [r7, #21]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d109      	bne.n	8006d7c <dir_find+0x126>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7ff ff51 	bl	8006c14 <sum_sfn>
 8006d72:	4603      	mov	r3, r0
 8006d74:	461a      	mov	r2, r3
 8006d76:	7d3b      	ldrb	r3, [r7, #20]
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d024      	beq.n	8006dc6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10a      	bne.n	8006da0 <dir_find+0x14a>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a18      	ldr	r0, [r3, #32]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3324      	adds	r3, #36	@ 0x24
 8006d92:	220b      	movs	r2, #11
 8006d94:	4619      	mov	r1, r3
 8006d96:	f7fe fe21 	bl	80059dc <mem_cmp>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d014      	beq.n	8006dca <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006da0:	23ff      	movs	r3, #255	@ 0xff
 8006da2:	757b      	strb	r3, [r7, #21]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006daa:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006dac:	2100      	movs	r1, #0
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7ff fc6e 	bl	8006690 <dir_next>
 8006db4:	4603      	mov	r3, r0
 8006db6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006db8:	7dfb      	ldrb	r3, [r7, #23]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f43f af65 	beq.w	8006c8a <dir_find+0x34>
 8006dc0:	e004      	b.n	8006dcc <dir_find+0x176>
		if (res != FR_OK) break;
 8006dc2:	bf00      	nop
 8006dc4:	e002      	b.n	8006dcc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006dc6:	bf00      	nop
 8006dc8:	e000      	b.n	8006dcc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006dca:	bf00      	nop

	return res;
 8006dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3718      	adds	r7, #24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
	...

08006dd8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b08c      	sub	sp, #48	@ 0x30
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006dec:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d001      	beq.n	8006df8 <dir_register+0x20>
 8006df4:	2306      	movs	r3, #6
 8006df6:	e0e0      	b.n	8006fba <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006df8:	2300      	movs	r3, #0
 8006dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dfc:	e002      	b.n	8006e04 <dir_register+0x2c>
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e00:	3301      	adds	r3, #1
 8006e02:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	691a      	ldr	r2, [r3, #16]
 8006e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0a:	005b      	lsls	r3, r3, #1
 8006e0c:	4413      	add	r3, r2
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1f4      	bne.n	8006dfe <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8006e1a:	f107 030c 	add.w	r3, r7, #12
 8006e1e:	220c      	movs	r2, #12
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7fe fd9f 	bl	8005964 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006e26:	7dfb      	ldrb	r3, [r7, #23]
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d032      	beq.n	8006e96 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2240      	movs	r2, #64	@ 0x40
 8006e34:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8006e38:	2301      	movs	r3, #1
 8006e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e3c:	e016      	b.n	8006e6c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	691a      	ldr	r2, [r3, #16]
 8006e48:	f107 010c 	add.w	r1, r7, #12
 8006e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4e:	f7ff fe53 	bl	8006af8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7ff feff 	bl	8006c56 <dir_find>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8006e5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d106      	bne.n	8006e74 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e68:	3301      	adds	r3, #1
 8006e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e6e:	2b63      	cmp	r3, #99	@ 0x63
 8006e70:	d9e5      	bls.n	8006e3e <dir_register+0x66>
 8006e72:	e000      	b.n	8006e76 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006e74:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e78:	2b64      	cmp	r3, #100	@ 0x64
 8006e7a:	d101      	bne.n	8006e80 <dir_register+0xa8>
 8006e7c:	2307      	movs	r3, #7
 8006e7e:	e09c      	b.n	8006fba <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006e80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006e84:	2b04      	cmp	r3, #4
 8006e86:	d002      	beq.n	8006e8e <dir_register+0xb6>
 8006e88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006e8c:	e095      	b.n	8006fba <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006e8e:	7dfa      	ldrb	r2, [r7, #23]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006e96:	7dfb      	ldrb	r3, [r7, #23]
 8006e98:	f003 0302 	and.w	r3, r3, #2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d007      	beq.n	8006eb0 <dir_register+0xd8>
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea2:	330c      	adds	r3, #12
 8006ea4:	4a47      	ldr	r2, [pc, #284]	@ (8006fc4 <dir_register+0x1ec>)
 8006ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eaa:	089b      	lsrs	r3, r3, #2
 8006eac:	3301      	adds	r3, #1
 8006eae:	e000      	b.n	8006eb2 <dir_register+0xda>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006eb4:	6a39      	ldr	r1, [r7, #32]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7ff fcc0 	bl	800683c <dir_alloc>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006ec2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d148      	bne.n	8006f5c <dir_register+0x184>
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	623b      	str	r3, [r7, #32]
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d042      	beq.n	8006f5c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	695a      	ldr	r2, [r3, #20]
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	015b      	lsls	r3, r3, #5
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7ff fb4b 	bl	800657e <dir_sdi>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8006eee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d132      	bne.n	8006f5c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	3324      	adds	r3, #36	@ 0x24
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7ff fe8a 	bl	8006c14 <sum_sfn>
 8006f00:	4603      	mov	r3, r0
 8006f02:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	4619      	mov	r1, r3
 8006f0a:	69f8      	ldr	r0, [r7, #28]
 8006f0c:	f7fe ff58 	bl	8005dc0 <move_window>
 8006f10:	4603      	mov	r3, r0
 8006f12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8006f16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d11d      	bne.n	8006f5a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	6918      	ldr	r0, [r3, #16]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a19      	ldr	r1, [r3, #32]
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	b2da      	uxtb	r2, r3
 8006f2a:	7efb      	ldrb	r3, [r7, #27]
 8006f2c:	f7ff fd7c 	bl	8006a28 <put_lfn>
				fs->wflag = 1;
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	2201      	movs	r2, #1
 8006f34:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006f36:	2100      	movs	r1, #0
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f7ff fba9 	bl	8006690 <dir_next>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8006f44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d107      	bne.n	8006f5c <dir_register+0x184>
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	623b      	str	r3, [r7, #32]
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1d5      	bne.n	8006f04 <dir_register+0x12c>
 8006f58:	e000      	b.n	8006f5c <dir_register+0x184>
				if (res != FR_OK) break;
 8006f5a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006f5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d128      	bne.n	8006fb6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	69db      	ldr	r3, [r3, #28]
 8006f68:	4619      	mov	r1, r3
 8006f6a:	69f8      	ldr	r0, [r7, #28]
 8006f6c:	f7fe ff28 	bl	8005dc0 <move_window>
 8006f70:	4603      	mov	r3, r0
 8006f72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8006f76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d11b      	bne.n	8006fb6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	2220      	movs	r2, #32
 8006f84:	2100      	movs	r1, #0
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fe fd0d 	bl	80059a6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a18      	ldr	r0, [r3, #32]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	3324      	adds	r3, #36	@ 0x24
 8006f94:	220b      	movs	r2, #11
 8006f96:	4619      	mov	r1, r3
 8006f98:	f7fe fce4 	bl	8005964 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	330c      	adds	r3, #12
 8006fa8:	f002 0218 	and.w	r2, r2, #24
 8006fac:	b2d2      	uxtb	r2, r2
 8006fae:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006fb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3730      	adds	r7, #48	@ 0x30
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	4ec4ec4f 	.word	0x4ec4ec4f

08006fc8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b08a      	sub	sp, #40	@ 0x28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	613b      	str	r3, [r7, #16]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	617b      	str	r3, [r7, #20]
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	1c5a      	adds	r2, r3, #1
 8006fec:	61ba      	str	r2, [r7, #24]
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006ff6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ff8:	2b1f      	cmp	r3, #31
 8006ffa:	d940      	bls.n	800707e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006ffc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ffe:	2b2f      	cmp	r3, #47	@ 0x2f
 8007000:	d006      	beq.n	8007010 <create_name+0x48>
 8007002:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007004:	2b5c      	cmp	r3, #92	@ 0x5c
 8007006:	d110      	bne.n	800702a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007008:	e002      	b.n	8007010 <create_name+0x48>
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	3301      	adds	r3, #1
 800700e:	61bb      	str	r3, [r7, #24]
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	4413      	add	r3, r2
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	2b2f      	cmp	r3, #47	@ 0x2f
 800701a:	d0f6      	beq.n	800700a <create_name+0x42>
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	4413      	add	r3, r2
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	2b5c      	cmp	r3, #92	@ 0x5c
 8007026:	d0f0      	beq.n	800700a <create_name+0x42>
			break;
 8007028:	e02a      	b.n	8007080 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2bfe      	cmp	r3, #254	@ 0xfe
 800702e:	d901      	bls.n	8007034 <create_name+0x6c>
 8007030:	2306      	movs	r3, #6
 8007032:	e17d      	b.n	8007330 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007034:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007036:	b2db      	uxtb	r3, r3
 8007038:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800703a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800703c:	2101      	movs	r1, #1
 800703e:	4618      	mov	r0, r3
 8007040:	f001 f9ec 	bl	800841c <ff_convert>
 8007044:	4603      	mov	r3, r0
 8007046:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007048:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <create_name+0x8a>
 800704e:	2306      	movs	r3, #6
 8007050:	e16e      	b.n	8007330 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007052:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007054:	2b7f      	cmp	r3, #127	@ 0x7f
 8007056:	d809      	bhi.n	800706c <create_name+0xa4>
 8007058:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800705a:	4619      	mov	r1, r3
 800705c:	488d      	ldr	r0, [pc, #564]	@ (8007294 <create_name+0x2cc>)
 800705e:	f7fe fce4 	bl	8005a2a <chk_chr>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <create_name+0xa4>
 8007068:	2306      	movs	r3, #6
 800706a:	e161      	b.n	8007330 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	1c5a      	adds	r2, r3, #1
 8007070:	617a      	str	r2, [r7, #20]
 8007072:	005b      	lsls	r3, r3, #1
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4413      	add	r3, r2
 8007078:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800707a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800707c:	e7b4      	b.n	8006fe8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800707e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	441a      	add	r2, r3
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800708a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800708c:	2b1f      	cmp	r3, #31
 800708e:	d801      	bhi.n	8007094 <create_name+0xcc>
 8007090:	2304      	movs	r3, #4
 8007092:	e000      	b.n	8007096 <create_name+0xce>
 8007094:	2300      	movs	r3, #0
 8007096:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800709a:	e011      	b.n	80070c0 <create_name+0xf8>
		w = lfn[di - 1];
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80070a2:	3b01      	subs	r3, #1
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	4413      	add	r3, r2
 80070aa:	881b      	ldrh	r3, [r3, #0]
 80070ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80070ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070b0:	2b20      	cmp	r3, #32
 80070b2:	d002      	beq.n	80070ba <create_name+0xf2>
 80070b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80070b8:	d106      	bne.n	80070c8 <create_name+0x100>
		di--;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	3b01      	subs	r3, #1
 80070be:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1ea      	bne.n	800709c <create_name+0xd4>
 80070c6:	e000      	b.n	80070ca <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80070c8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	4413      	add	r3, r2
 80070d2:	2200      	movs	r2, #0
 80070d4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d101      	bne.n	80070e0 <create_name+0x118>
 80070dc:	2306      	movs	r3, #6
 80070de:	e127      	b.n	8007330 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	3324      	adds	r3, #36	@ 0x24
 80070e4:	220b      	movs	r2, #11
 80070e6:	2120      	movs	r1, #32
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fe fc5c 	bl	80059a6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80070ee:	2300      	movs	r3, #0
 80070f0:	61bb      	str	r3, [r7, #24]
 80070f2:	e002      	b.n	80070fa <create_name+0x132>
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	3301      	adds	r3, #1
 80070f8:	61bb      	str	r3, [r7, #24]
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	4413      	add	r3, r2
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	2b20      	cmp	r3, #32
 8007106:	d0f5      	beq.n	80070f4 <create_name+0x12c>
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	005b      	lsls	r3, r3, #1
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	4413      	add	r3, r2
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	2b2e      	cmp	r3, #46	@ 0x2e
 8007114:	d0ee      	beq.n	80070f4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d009      	beq.n	8007130 <create_name+0x168>
 800711c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007120:	f043 0303 	orr.w	r3, r3, #3
 8007124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007128:	e002      	b.n	8007130 <create_name+0x168>
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	3b01      	subs	r3, #1
 800712e:	617b      	str	r3, [r7, #20]
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d009      	beq.n	800714a <create_name+0x182>
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800713c:	3b01      	subs	r3, #1
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	4413      	add	r3, r2
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	2b2e      	cmp	r3, #46	@ 0x2e
 8007148:	d1ef      	bne.n	800712a <create_name+0x162>

	i = b = 0; ni = 8;
 800714a:	2300      	movs	r3, #0
 800714c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007150:	2300      	movs	r3, #0
 8007152:	623b      	str	r3, [r7, #32]
 8007154:	2308      	movs	r3, #8
 8007156:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	61ba      	str	r2, [r7, #24]
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	4413      	add	r3, r2
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007168:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 8090 	beq.w	8007290 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007170:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007172:	2b20      	cmp	r3, #32
 8007174:	d006      	beq.n	8007184 <create_name+0x1bc>
 8007176:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007178:	2b2e      	cmp	r3, #46	@ 0x2e
 800717a:	d10a      	bne.n	8007192 <create_name+0x1ca>
 800717c:	69ba      	ldr	r2, [r7, #24]
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	429a      	cmp	r2, r3
 8007182:	d006      	beq.n	8007192 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007188:	f043 0303 	orr.w	r3, r3, #3
 800718c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007190:	e07d      	b.n	800728e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007192:	6a3a      	ldr	r2, [r7, #32]
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	429a      	cmp	r2, r3
 8007198:	d203      	bcs.n	80071a2 <create_name+0x1da>
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d123      	bne.n	80071ea <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	2b0b      	cmp	r3, #11
 80071a6:	d106      	bne.n	80071b6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80071a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071ac:	f043 0303 	orr.w	r3, r3, #3
 80071b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80071b4:	e075      	b.n	80072a2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d005      	beq.n	80071ca <create_name+0x202>
 80071be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071c2:	f043 0303 	orr.w	r3, r3, #3
 80071c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80071ca:	69ba      	ldr	r2, [r7, #24]
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d866      	bhi.n	80072a0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	61bb      	str	r3, [r7, #24]
 80071d6:	2308      	movs	r3, #8
 80071d8:	623b      	str	r3, [r7, #32]
 80071da:	230b      	movs	r3, #11
 80071dc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80071de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80071e8:	e051      	b.n	800728e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80071ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80071ee:	d914      	bls.n	800721a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80071f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071f2:	2100      	movs	r1, #0
 80071f4:	4618      	mov	r0, r3
 80071f6:	f001 f911 	bl	800841c <ff_convert>
 80071fa:	4603      	mov	r3, r0
 80071fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80071fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007200:	2b00      	cmp	r3, #0
 8007202:	d004      	beq.n	800720e <create_name+0x246>
 8007204:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007206:	3b80      	subs	r3, #128	@ 0x80
 8007208:	4a23      	ldr	r2, [pc, #140]	@ (8007298 <create_name+0x2d0>)
 800720a:	5cd3      	ldrb	r3, [r2, r3]
 800720c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800720e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007212:	f043 0302 	orr.w	r3, r3, #2
 8007216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800721a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800721c:	2b00      	cmp	r3, #0
 800721e:	d007      	beq.n	8007230 <create_name+0x268>
 8007220:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007222:	4619      	mov	r1, r3
 8007224:	481d      	ldr	r0, [pc, #116]	@ (800729c <create_name+0x2d4>)
 8007226:	f7fe fc00 	bl	8005a2a <chk_chr>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d008      	beq.n	8007242 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007230:	235f      	movs	r3, #95	@ 0x5f
 8007232:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007234:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007238:	f043 0303 	orr.w	r3, r3, #3
 800723c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007240:	e01b      	b.n	800727a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007242:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007244:	2b40      	cmp	r3, #64	@ 0x40
 8007246:	d909      	bls.n	800725c <create_name+0x294>
 8007248:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800724a:	2b5a      	cmp	r3, #90	@ 0x5a
 800724c:	d806      	bhi.n	800725c <create_name+0x294>
					b |= 2;
 800724e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007252:	f043 0302 	orr.w	r3, r3, #2
 8007256:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800725a:	e00e      	b.n	800727a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800725c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800725e:	2b60      	cmp	r3, #96	@ 0x60
 8007260:	d90b      	bls.n	800727a <create_name+0x2b2>
 8007262:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007264:	2b7a      	cmp	r3, #122	@ 0x7a
 8007266:	d808      	bhi.n	800727a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007268:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800726c:	f043 0301 	orr.w	r3, r3, #1
 8007270:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007274:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007276:	3b20      	subs	r3, #32
 8007278:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	1c5a      	adds	r2, r3, #1
 800727e:	623a      	str	r2, [r7, #32]
 8007280:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007282:	b2d1      	uxtb	r1, r2
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	4413      	add	r3, r2
 8007288:	460a      	mov	r2, r1
 800728a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800728e:	e763      	b.n	8007158 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007290:	bf00      	nop
 8007292:	e006      	b.n	80072a2 <create_name+0x2da>
 8007294:	08009664 	.word	0x08009664
 8007298:	080096f4 	.word	0x080096f4
 800729c:	08009670 	.word	0x08009670
			if (si > di) break;			/* No extension */
 80072a0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80072a8:	2be5      	cmp	r3, #229	@ 0xe5
 80072aa:	d103      	bne.n	80072b4 <create_name+0x2ec>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2205      	movs	r2, #5
 80072b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	2b08      	cmp	r3, #8
 80072b8:	d104      	bne.n	80072c4 <create_name+0x2fc>
 80072ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80072c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80072c8:	f003 030c 	and.w	r3, r3, #12
 80072cc:	2b0c      	cmp	r3, #12
 80072ce:	d005      	beq.n	80072dc <create_name+0x314>
 80072d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80072d4:	f003 0303 	and.w	r3, r3, #3
 80072d8:	2b03      	cmp	r3, #3
 80072da:	d105      	bne.n	80072e8 <create_name+0x320>
 80072dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072e0:	f043 0302 	orr.w	r3, r3, #2
 80072e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80072e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d117      	bne.n	8007324 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80072f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80072f8:	f003 0303 	and.w	r3, r3, #3
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d105      	bne.n	800730c <create_name+0x344>
 8007300:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007304:	f043 0310 	orr.w	r3, r3, #16
 8007308:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800730c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007310:	f003 030c 	and.w	r3, r3, #12
 8007314:	2b04      	cmp	r3, #4
 8007316:	d105      	bne.n	8007324 <create_name+0x35c>
 8007318:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800731c:	f043 0308 	orr.w	r3, r3, #8
 8007320:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800732a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800732e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007330:	4618      	mov	r0, r3
 8007332:	3728      	adds	r7, #40	@ 0x28
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800734c:	e002      	b.n	8007354 <follow_path+0x1c>
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	3301      	adds	r3, #1
 8007352:	603b      	str	r3, [r7, #0]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	2b2f      	cmp	r3, #47	@ 0x2f
 800735a:	d0f8      	beq.n	800734e <follow_path+0x16>
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	2b5c      	cmp	r3, #92	@ 0x5c
 8007362:	d0f4      	beq.n	800734e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	2200      	movs	r2, #0
 8007368:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b1f      	cmp	r3, #31
 8007370:	d80a      	bhi.n	8007388 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2280      	movs	r2, #128	@ 0x80
 8007376:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800737a:	2100      	movs	r1, #0
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7ff f8fe 	bl	800657e <dir_sdi>
 8007382:	4603      	mov	r3, r0
 8007384:	75fb      	strb	r3, [r7, #23]
 8007386:	e048      	b.n	800741a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007388:	463b      	mov	r3, r7
 800738a:	4619      	mov	r1, r3
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7ff fe1b 	bl	8006fc8 <create_name>
 8007392:	4603      	mov	r3, r0
 8007394:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007396:	7dfb      	ldrb	r3, [r7, #23]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d139      	bne.n	8007410 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f7ff fc5a 	bl	8006c56 <dir_find>
 80073a2:	4603      	mov	r3, r0
 80073a4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80073ac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00a      	beq.n	80073ca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80073b4:	7dfb      	ldrb	r3, [r7, #23]
 80073b6:	2b04      	cmp	r3, #4
 80073b8:	d12c      	bne.n	8007414 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80073ba:	7afb      	ldrb	r3, [r7, #11]
 80073bc:	f003 0304 	and.w	r3, r3, #4
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d127      	bne.n	8007414 <follow_path+0xdc>
 80073c4:	2305      	movs	r3, #5
 80073c6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80073c8:	e024      	b.n	8007414 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80073ca:	7afb      	ldrb	r3, [r7, #11]
 80073cc:	f003 0304 	and.w	r3, r3, #4
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d121      	bne.n	8007418 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	799b      	ldrb	r3, [r3, #6]
 80073d8:	f003 0310 	and.w	r3, r3, #16
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d102      	bne.n	80073e6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80073e0:	2305      	movs	r3, #5
 80073e2:	75fb      	strb	r3, [r7, #23]
 80073e4:	e019      	b.n	800741a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	8992      	ldrh	r2, [r2, #12]
 80073f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80073f8:	fb00 f202 	mul.w	r2, r0, r2
 80073fc:	1a9b      	subs	r3, r3, r2
 80073fe:	440b      	add	r3, r1
 8007400:	4619      	mov	r1, r3
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f7ff fa61 	bl	80068ca <ld_clust>
 8007408:	4602      	mov	r2, r0
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800740e:	e7bb      	b.n	8007388 <follow_path+0x50>
			if (res != FR_OK) break;
 8007410:	bf00      	nop
 8007412:	e002      	b.n	800741a <follow_path+0xe2>
				break;
 8007414:	bf00      	nop
 8007416:	e000      	b.n	800741a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007418:	bf00      	nop
			}
		}
	}

	return res;
 800741a:	7dfb      	ldrb	r3, [r7, #23]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3718      	adds	r7, #24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007424:	b480      	push	{r7}
 8007426:	b087      	sub	sp, #28
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800742c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007430:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d031      	beq.n	800749e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	e002      	b.n	8007448 <get_ldnumber+0x24>
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	3301      	adds	r3, #1
 8007446:	617b      	str	r3, [r7, #20]
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	2b1f      	cmp	r3, #31
 800744e:	d903      	bls.n	8007458 <get_ldnumber+0x34>
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	2b3a      	cmp	r3, #58	@ 0x3a
 8007456:	d1f4      	bne.n	8007442 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	2b3a      	cmp	r3, #58	@ 0x3a
 800745e:	d11c      	bne.n	800749a <get_ldnumber+0x76>
			tp = *path;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	1c5a      	adds	r2, r3, #1
 800746a:	60fa      	str	r2, [r7, #12]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	3b30      	subs	r3, #48	@ 0x30
 8007470:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	2b09      	cmp	r3, #9
 8007476:	d80e      	bhi.n	8007496 <get_ldnumber+0x72>
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	429a      	cmp	r2, r3
 800747e:	d10a      	bne.n	8007496 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d107      	bne.n	8007496 <get_ldnumber+0x72>
					vol = (int)i;
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	3301      	adds	r3, #1
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	e002      	b.n	80074a0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800749a:	2300      	movs	r3, #0
 800749c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800749e:	693b      	ldr	r3, [r7, #16]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	371c      	adds	r7, #28
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	70da      	strb	r2, [r3, #3]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80074c2:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7fe fc7a 	bl	8005dc0 <move_window>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <check_fs+0x2a>
 80074d2:	2304      	movs	r3, #4
 80074d4:	e038      	b.n	8007548 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3338      	adds	r3, #56	@ 0x38
 80074da:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fe f9be 	bl	8005860 <ld_word>
 80074e4:	4603      	mov	r3, r0
 80074e6:	461a      	mov	r2, r3
 80074e8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d001      	beq.n	80074f4 <check_fs+0x48>
 80074f0:	2303      	movs	r3, #3
 80074f2:	e029      	b.n	8007548 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80074fa:	2be9      	cmp	r3, #233	@ 0xe9
 80074fc:	d009      	beq.n	8007512 <check_fs+0x66>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007504:	2beb      	cmp	r3, #235	@ 0xeb
 8007506:	d11e      	bne.n	8007546 <check_fs+0x9a>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800750e:	2b90      	cmp	r3, #144	@ 0x90
 8007510:	d119      	bne.n	8007546 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3338      	adds	r3, #56	@ 0x38
 8007516:	3336      	adds	r3, #54	@ 0x36
 8007518:	4618      	mov	r0, r3
 800751a:	f7fe f9b9 	bl	8005890 <ld_dword>
 800751e:	4603      	mov	r3, r0
 8007520:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007524:	4a0a      	ldr	r2, [pc, #40]	@ (8007550 <check_fs+0xa4>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d101      	bne.n	800752e <check_fs+0x82>
 800752a:	2300      	movs	r3, #0
 800752c:	e00c      	b.n	8007548 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	3338      	adds	r3, #56	@ 0x38
 8007532:	3352      	adds	r3, #82	@ 0x52
 8007534:	4618      	mov	r0, r3
 8007536:	f7fe f9ab 	bl	8005890 <ld_dword>
 800753a:	4603      	mov	r3, r0
 800753c:	4a05      	ldr	r2, [pc, #20]	@ (8007554 <check_fs+0xa8>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d101      	bne.n	8007546 <check_fs+0x9a>
 8007542:	2300      	movs	r3, #0
 8007544:	e000      	b.n	8007548 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007546:	2302      	movs	r3, #2
}
 8007548:	4618      	mov	r0, r3
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	00544146 	.word	0x00544146
 8007554:	33544146 	.word	0x33544146

08007558 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b096      	sub	sp, #88	@ 0x58
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	4613      	mov	r3, r2
 8007564:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f7ff ff59 	bl	8007424 <get_ldnumber>
 8007572:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007576:	2b00      	cmp	r3, #0
 8007578:	da01      	bge.n	800757e <find_volume+0x26>
 800757a:	230b      	movs	r3, #11
 800757c:	e265      	b.n	8007a4a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800757e:	4a9f      	ldr	r2, [pc, #636]	@ (80077fc <find_volume+0x2a4>)
 8007580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007586:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <find_volume+0x3a>
 800758e:	230c      	movs	r3, #12
 8007590:	e25b      	b.n	8007a4a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007596:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007598:	79fb      	ldrb	r3, [r7, #7]
 800759a:	f023 0301 	bic.w	r3, r3, #1
 800759e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80075a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d01a      	beq.n	80075de <find_volume+0x86>
		stat = disk_status(fs->drv);
 80075a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075aa:	785b      	ldrb	r3, [r3, #1]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fe f8b9 	bl	8005724 <disk_status>
 80075b2:	4603      	mov	r3, r0
 80075b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80075b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10c      	bne.n	80075de <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80075c4:	79fb      	ldrb	r3, [r7, #7]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d007      	beq.n	80075da <find_volume+0x82>
 80075ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80075ce:	f003 0304 	and.w	r3, r3, #4
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d001      	beq.n	80075da <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80075d6:	230a      	movs	r3, #10
 80075d8:	e237      	b.n	8007a4a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80075da:	2300      	movs	r3, #0
 80075dc:	e235      	b.n	8007a4a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80075de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e0:	2200      	movs	r2, #0
 80075e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80075e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80075ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ee:	785b      	ldrb	r3, [r3, #1]
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fe f8b1 	bl	8005758 <disk_initialize>
 80075f6:	4603      	mov	r3, r0
 80075f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80075fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007608:	2303      	movs	r3, #3
 800760a:	e21e      	b.n	8007a4a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800760c:	79fb      	ldrb	r3, [r7, #7]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d007      	beq.n	8007622 <find_volume+0xca>
 8007612:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007616:	f003 0304 	and.w	r3, r3, #4
 800761a:	2b00      	cmp	r3, #0
 800761c:	d001      	beq.n	8007622 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800761e:	230a      	movs	r3, #10
 8007620:	e213      	b.n	8007a4a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007624:	7858      	ldrb	r0, [r3, #1]
 8007626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007628:	330c      	adds	r3, #12
 800762a:	461a      	mov	r2, r3
 800762c:	2102      	movs	r1, #2
 800762e:	f7fe f8f9 	bl	8005824 <disk_ioctl>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <find_volume+0xe4>
 8007638:	2301      	movs	r3, #1
 800763a:	e206      	b.n	8007a4a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800763c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763e:	899b      	ldrh	r3, [r3, #12]
 8007640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007644:	d80d      	bhi.n	8007662 <find_volume+0x10a>
 8007646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007648:	899b      	ldrh	r3, [r3, #12]
 800764a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800764e:	d308      	bcc.n	8007662 <find_volume+0x10a>
 8007650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007652:	899b      	ldrh	r3, [r3, #12]
 8007654:	461a      	mov	r2, r3
 8007656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007658:	899b      	ldrh	r3, [r3, #12]
 800765a:	3b01      	subs	r3, #1
 800765c:	4013      	ands	r3, r2
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <find_volume+0x10e>
 8007662:	2301      	movs	r3, #1
 8007664:	e1f1      	b.n	8007a4a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007666:	2300      	movs	r3, #0
 8007668:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800766a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800766c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800766e:	f7ff ff1d 	bl	80074ac <check_fs>
 8007672:	4603      	mov	r3, r0
 8007674:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007678:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800767c:	2b02      	cmp	r3, #2
 800767e:	d149      	bne.n	8007714 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007680:	2300      	movs	r3, #0
 8007682:	643b      	str	r3, [r7, #64]	@ 0x40
 8007684:	e01e      	b.n	80076c4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007688:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800768c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800768e:	011b      	lsls	r3, r3, #4
 8007690:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007694:	4413      	add	r3, r2
 8007696:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769a:	3304      	adds	r3, #4
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d006      	beq.n	80076b0 <find_volume+0x158>
 80076a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a4:	3308      	adds	r3, #8
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fe f8f2 	bl	8005890 <ld_dword>
 80076ac:	4602      	mov	r2, r0
 80076ae:	e000      	b.n	80076b2 <find_volume+0x15a>
 80076b0:	2200      	movs	r2, #0
 80076b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	3358      	adds	r3, #88	@ 0x58
 80076b8:	443b      	add	r3, r7
 80076ba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80076be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076c0:	3301      	adds	r3, #1
 80076c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80076c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d9dd      	bls.n	8007686 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80076ca:	2300      	movs	r3, #0
 80076cc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80076ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <find_volume+0x182>
 80076d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076d6:	3b01      	subs	r3, #1
 80076d8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80076da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	3358      	adds	r3, #88	@ 0x58
 80076e0:	443b      	add	r3, r7
 80076e2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80076e6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80076e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d005      	beq.n	80076fa <find_volume+0x1a2>
 80076ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80076f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80076f2:	f7ff fedb 	bl	80074ac <check_fs>
 80076f6:	4603      	mov	r3, r0
 80076f8:	e000      	b.n	80076fc <find_volume+0x1a4>
 80076fa:	2303      	movs	r3, #3
 80076fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007700:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007704:	2b01      	cmp	r3, #1
 8007706:	d905      	bls.n	8007714 <find_volume+0x1bc>
 8007708:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800770a:	3301      	adds	r3, #1
 800770c:	643b      	str	r3, [r7, #64]	@ 0x40
 800770e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007710:	2b03      	cmp	r3, #3
 8007712:	d9e2      	bls.n	80076da <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007714:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007718:	2b04      	cmp	r3, #4
 800771a:	d101      	bne.n	8007720 <find_volume+0x1c8>
 800771c:	2301      	movs	r3, #1
 800771e:	e194      	b.n	8007a4a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007720:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007724:	2b01      	cmp	r3, #1
 8007726:	d901      	bls.n	800772c <find_volume+0x1d4>
 8007728:	230d      	movs	r3, #13
 800772a:	e18e      	b.n	8007a4a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800772c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800772e:	3338      	adds	r3, #56	@ 0x38
 8007730:	330b      	adds	r3, #11
 8007732:	4618      	mov	r0, r3
 8007734:	f7fe f894 	bl	8005860 <ld_word>
 8007738:	4603      	mov	r3, r0
 800773a:	461a      	mov	r2, r3
 800773c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773e:	899b      	ldrh	r3, [r3, #12]
 8007740:	429a      	cmp	r2, r3
 8007742:	d001      	beq.n	8007748 <find_volume+0x1f0>
 8007744:	230d      	movs	r3, #13
 8007746:	e180      	b.n	8007a4a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774a:	3338      	adds	r3, #56	@ 0x38
 800774c:	3316      	adds	r3, #22
 800774e:	4618      	mov	r0, r3
 8007750:	f7fe f886 	bl	8005860 <ld_word>
 8007754:	4603      	mov	r3, r0
 8007756:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007758:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800775a:	2b00      	cmp	r3, #0
 800775c:	d106      	bne.n	800776c <find_volume+0x214>
 800775e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007760:	3338      	adds	r3, #56	@ 0x38
 8007762:	3324      	adds	r3, #36	@ 0x24
 8007764:	4618      	mov	r0, r3
 8007766:	f7fe f893 	bl	8005890 <ld_dword>
 800776a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800776c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800776e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007770:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007774:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8007778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800777c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777e:	789b      	ldrb	r3, [r3, #2]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d005      	beq.n	8007790 <find_volume+0x238>
 8007784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007786:	789b      	ldrb	r3, [r3, #2]
 8007788:	2b02      	cmp	r3, #2
 800778a:	d001      	beq.n	8007790 <find_volume+0x238>
 800778c:	230d      	movs	r3, #13
 800778e:	e15c      	b.n	8007a4a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007792:	789b      	ldrb	r3, [r3, #2]
 8007794:	461a      	mov	r2, r3
 8007796:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007798:	fb02 f303 	mul.w	r3, r2, r3
 800779c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800779e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077a4:	461a      	mov	r2, r3
 80077a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80077aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ac:	895b      	ldrh	r3, [r3, #10]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d008      	beq.n	80077c4 <find_volume+0x26c>
 80077b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b4:	895b      	ldrh	r3, [r3, #10]
 80077b6:	461a      	mov	r2, r3
 80077b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ba:	895b      	ldrh	r3, [r3, #10]
 80077bc:	3b01      	subs	r3, #1
 80077be:	4013      	ands	r3, r2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <find_volume+0x270>
 80077c4:	230d      	movs	r3, #13
 80077c6:	e140      	b.n	8007a4a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80077c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ca:	3338      	adds	r3, #56	@ 0x38
 80077cc:	3311      	adds	r3, #17
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fe f846 	bl	8005860 <ld_word>
 80077d4:	4603      	mov	r3, r0
 80077d6:	461a      	mov	r2, r3
 80077d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80077dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077de:	891b      	ldrh	r3, [r3, #8]
 80077e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077e2:	8992      	ldrh	r2, [r2, #12]
 80077e4:	0952      	lsrs	r2, r2, #5
 80077e6:	b292      	uxth	r2, r2
 80077e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80077ec:	fb01 f202 	mul.w	r2, r1, r2
 80077f0:	1a9b      	subs	r3, r3, r2
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d003      	beq.n	8007800 <find_volume+0x2a8>
 80077f8:	230d      	movs	r3, #13
 80077fa:	e126      	b.n	8007a4a <find_volume+0x4f2>
 80077fc:	20003a30 	.word	0x20003a30

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007802:	3338      	adds	r3, #56	@ 0x38
 8007804:	3313      	adds	r3, #19
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe f82a 	bl	8005860 <ld_word>
 800780c:	4603      	mov	r3, r0
 800780e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007812:	2b00      	cmp	r3, #0
 8007814:	d106      	bne.n	8007824 <find_volume+0x2cc>
 8007816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007818:	3338      	adds	r3, #56	@ 0x38
 800781a:	3320      	adds	r3, #32
 800781c:	4618      	mov	r0, r3
 800781e:	f7fe f837 	bl	8005890 <ld_dword>
 8007822:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007826:	3338      	adds	r3, #56	@ 0x38
 8007828:	330e      	adds	r3, #14
 800782a:	4618      	mov	r0, r3
 800782c:	f7fe f818 	bl	8005860 <ld_word>
 8007830:	4603      	mov	r3, r0
 8007832:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007834:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <find_volume+0x2e6>
 800783a:	230d      	movs	r3, #13
 800783c:	e105      	b.n	8007a4a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800783e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007840:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007842:	4413      	add	r3, r2
 8007844:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007846:	8911      	ldrh	r1, [r2, #8]
 8007848:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800784a:	8992      	ldrh	r2, [r2, #12]
 800784c:	0952      	lsrs	r2, r2, #5
 800784e:	b292      	uxth	r2, r2
 8007850:	fbb1 f2f2 	udiv	r2, r1, r2
 8007854:	b292      	uxth	r2, r2
 8007856:	4413      	add	r3, r2
 8007858:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800785a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800785c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785e:	429a      	cmp	r2, r3
 8007860:	d201      	bcs.n	8007866 <find_volume+0x30e>
 8007862:	230d      	movs	r3, #13
 8007864:	e0f1      	b.n	8007a4a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007866:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800786e:	8952      	ldrh	r2, [r2, #10]
 8007870:	fbb3 f3f2 	udiv	r3, r3, r2
 8007874:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <find_volume+0x328>
 800787c:	230d      	movs	r3, #13
 800787e:	e0e4      	b.n	8007a4a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007880:	2303      	movs	r3, #3
 8007882:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007888:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800788c:	4293      	cmp	r3, r2
 800788e:	d802      	bhi.n	8007896 <find_volume+0x33e>
 8007890:	2302      	movs	r3, #2
 8007892:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007898:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800789c:	4293      	cmp	r3, r2
 800789e:	d802      	bhi.n	80078a6 <find_volume+0x34e>
 80078a0:	2301      	movs	r3, #1
 80078a2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80078a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a8:	1c9a      	adds	r2, r3, #2
 80078aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ac:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80078ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80078b2:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80078b4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80078b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078b8:	441a      	add	r2, r3
 80078ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078bc:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80078be:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80078c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c2:	441a      	add	r2, r3
 80078c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c6:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80078c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80078cc:	2b03      	cmp	r3, #3
 80078ce:	d11e      	bne.n	800790e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80078d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d2:	3338      	adds	r3, #56	@ 0x38
 80078d4:	332a      	adds	r3, #42	@ 0x2a
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fd ffc2 	bl	8005860 <ld_word>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d001      	beq.n	80078e6 <find_volume+0x38e>
 80078e2:	230d      	movs	r3, #13
 80078e4:	e0b1      	b.n	8007a4a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80078e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e8:	891b      	ldrh	r3, [r3, #8]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <find_volume+0x39a>
 80078ee:	230d      	movs	r3, #13
 80078f0:	e0ab      	b.n	8007a4a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80078f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f4:	3338      	adds	r3, #56	@ 0x38
 80078f6:	332c      	adds	r3, #44	@ 0x2c
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fd ffc9 	bl	8005890 <ld_dword>
 80078fe:	4602      	mov	r2, r0
 8007900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007902:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007906:	69db      	ldr	r3, [r3, #28]
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	647b      	str	r3, [r7, #68]	@ 0x44
 800790c:	e01f      	b.n	800794e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800790e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007910:	891b      	ldrh	r3, [r3, #8]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <find_volume+0x3c2>
 8007916:	230d      	movs	r3, #13
 8007918:	e097      	b.n	8007a4a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800791a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800791c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800791e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007920:	441a      	add	r2, r3
 8007922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007924:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007926:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800792a:	2b02      	cmp	r3, #2
 800792c:	d103      	bne.n	8007936 <find_volume+0x3de>
 800792e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	005b      	lsls	r3, r3, #1
 8007934:	e00a      	b.n	800794c <find_volume+0x3f4>
 8007936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007938:	69da      	ldr	r2, [r3, #28]
 800793a:	4613      	mov	r3, r2
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	4413      	add	r3, r2
 8007940:	085a      	lsrs	r2, r3, #1
 8007942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800794c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800794e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007950:	6a1a      	ldr	r2, [r3, #32]
 8007952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007954:	899b      	ldrh	r3, [r3, #12]
 8007956:	4619      	mov	r1, r3
 8007958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800795a:	440b      	add	r3, r1
 800795c:	3b01      	subs	r3, #1
 800795e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007960:	8989      	ldrh	r1, [r1, #12]
 8007962:	fbb3 f3f1 	udiv	r3, r3, r1
 8007966:	429a      	cmp	r2, r3
 8007968:	d201      	bcs.n	800796e <find_volume+0x416>
 800796a:	230d      	movs	r3, #13
 800796c:	e06d      	b.n	8007a4a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800796e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007970:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007974:	619a      	str	r2, [r3, #24]
 8007976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007978:	699a      	ldr	r2, [r3, #24]
 800797a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800797e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007980:	2280      	movs	r2, #128	@ 0x80
 8007982:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007984:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007988:	2b03      	cmp	r3, #3
 800798a:	d149      	bne.n	8007a20 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800798c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798e:	3338      	adds	r3, #56	@ 0x38
 8007990:	3330      	adds	r3, #48	@ 0x30
 8007992:	4618      	mov	r0, r3
 8007994:	f7fd ff64 	bl	8005860 <ld_word>
 8007998:	4603      	mov	r3, r0
 800799a:	2b01      	cmp	r3, #1
 800799c:	d140      	bne.n	8007a20 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800799e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079a0:	3301      	adds	r3, #1
 80079a2:	4619      	mov	r1, r3
 80079a4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80079a6:	f7fe fa0b 	bl	8005dc0 <move_window>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d137      	bne.n	8007a20 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80079b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b2:	2200      	movs	r2, #0
 80079b4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80079b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b8:	3338      	adds	r3, #56	@ 0x38
 80079ba:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fd ff4e 	bl	8005860 <ld_word>
 80079c4:	4603      	mov	r3, r0
 80079c6:	461a      	mov	r2, r3
 80079c8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d127      	bne.n	8007a20 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80079d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d2:	3338      	adds	r3, #56	@ 0x38
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7fd ff5b 	bl	8005890 <ld_dword>
 80079da:	4603      	mov	r3, r0
 80079dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007a54 <find_volume+0x4fc>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d11e      	bne.n	8007a20 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80079e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e4:	3338      	adds	r3, #56	@ 0x38
 80079e6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fd ff50 	bl	8005890 <ld_dword>
 80079f0:	4603      	mov	r3, r0
 80079f2:	4a19      	ldr	r2, [pc, #100]	@ (8007a58 <find_volume+0x500>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d113      	bne.n	8007a20 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80079f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fa:	3338      	adds	r3, #56	@ 0x38
 80079fc:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fd ff45 	bl	8005890 <ld_dword>
 8007a06:	4602      	mov	r2, r0
 8007a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a0a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a0e:	3338      	adds	r3, #56	@ 0x38
 8007a10:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7fd ff3b 	bl	8005890 <ld_dword>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a1e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a22:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007a26:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007a28:	4b0c      	ldr	r3, [pc, #48]	@ (8007a5c <find_volume+0x504>)
 8007a2a:	881b      	ldrh	r3, [r3, #0]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	4b0a      	ldr	r3, [pc, #40]	@ (8007a5c <find_volume+0x504>)
 8007a32:	801a      	strh	r2, [r3, #0]
 8007a34:	4b09      	ldr	r3, [pc, #36]	@ (8007a5c <find_volume+0x504>)
 8007a36:	881a      	ldrh	r2, [r3, #0]
 8007a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3e:	4a08      	ldr	r2, [pc, #32]	@ (8007a60 <find_volume+0x508>)
 8007a40:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007a42:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007a44:	f7fe f954 	bl	8005cf0 <clear_lock>
#endif
	return FR_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3758      	adds	r7, #88	@ 0x58
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	41615252 	.word	0x41615252
 8007a58:	61417272 	.word	0x61417272
 8007a5c:	20003a34 	.word	0x20003a34
 8007a60:	20003a58 	.word	0x20003a58

08007a64 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007a6e:	2309      	movs	r3, #9
 8007a70:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d01c      	beq.n	8007ab2 <validate+0x4e>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d018      	beq.n	8007ab2 <validate+0x4e>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d013      	beq.n	8007ab2 <validate+0x4e>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	889a      	ldrh	r2, [r3, #4]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	88db      	ldrh	r3, [r3, #6]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d10c      	bne.n	8007ab2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	785b      	ldrb	r3, [r3, #1]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fd fe40 	bl	8005724 <disk_status>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <validate+0x4e>
			res = FR_OK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d102      	bne.n	8007abe <validate+0x5a>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	e000      	b.n	8007ac0 <validate+0x5c>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	6013      	str	r3, [r2, #0]
	return res;
 8007ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
	...

08007ad0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	4613      	mov	r3, r2
 8007adc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007ae2:	f107 0310 	add.w	r3, r7, #16
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7ff fc9c 	bl	8007424 <get_ldnumber>
 8007aec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	da01      	bge.n	8007af8 <f_mount+0x28>
 8007af4:	230b      	movs	r3, #11
 8007af6:	e02b      	b.n	8007b50 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007af8:	4a17      	ldr	r2, [pc, #92]	@ (8007b58 <f_mount+0x88>)
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b00:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d005      	beq.n	8007b14 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007b08:	69b8      	ldr	r0, [r7, #24]
 8007b0a:	f7fe f8f1 	bl	8005cf0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	2200      	movs	r2, #0
 8007b12:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d002      	beq.n	8007b20 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	490d      	ldr	r1, [pc, #52]	@ (8007b58 <f_mount+0x88>)
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d002      	beq.n	8007b36 <f_mount+0x66>
 8007b30:	79fb      	ldrb	r3, [r7, #7]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d001      	beq.n	8007b3a <f_mount+0x6a>
 8007b36:	2300      	movs	r3, #0
 8007b38:	e00a      	b.n	8007b50 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007b3a:	f107 010c 	add.w	r1, r7, #12
 8007b3e:	f107 0308 	add.w	r3, r7, #8
 8007b42:	2200      	movs	r2, #0
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7ff fd07 	bl	8007558 <find_volume>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3720      	adds	r7, #32
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	20003a30 	.word	0x20003a30

08007b5c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b09a      	sub	sp, #104	@ 0x68
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	4613      	mov	r3, r2
 8007b68:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <f_open+0x18>
 8007b70:	2309      	movs	r3, #9
 8007b72:	e1b7      	b.n	8007ee4 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007b74:	79fb      	ldrb	r3, [r7, #7]
 8007b76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b7a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007b7c:	79fa      	ldrb	r2, [r7, #7]
 8007b7e:	f107 0114 	add.w	r1, r7, #20
 8007b82:	f107 0308 	add.w	r3, r7, #8
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7ff fce6 	bl	8007558 <find_volume>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8007b92:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f040 819b 	bne.w	8007ed2 <f_open+0x376>
		dj.obj.fs = fs;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	f107 0318 	add.w	r3, r7, #24
 8007ba6:	4611      	mov	r1, r2
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7ff fbc5 	bl	8007338 <follow_path>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007bb4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d118      	bne.n	8007bee <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007bbc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007bc0:	b25b      	sxtb	r3, r3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	da03      	bge.n	8007bce <f_open+0x72>
				res = FR_INVALID_NAME;
 8007bc6:	2306      	movs	r3, #6
 8007bc8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007bcc:	e00f      	b.n	8007bee <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007bce:	79fb      	ldrb	r3, [r7, #7]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	bf8c      	ite	hi
 8007bd4:	2301      	movhi	r3, #1
 8007bd6:	2300      	movls	r3, #0
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	461a      	mov	r2, r3
 8007bdc:	f107 0318 	add.w	r3, r7, #24
 8007be0:	4611      	mov	r1, r2
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fd ff3c 	bl	8005a60 <chk_lock>
 8007be8:	4603      	mov	r3, r0
 8007bea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007bee:	79fb      	ldrb	r3, [r7, #7]
 8007bf0:	f003 031c 	and.w	r3, r3, #28
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d07f      	beq.n	8007cf8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007bf8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d017      	beq.n	8007c30 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007c00:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007c04:	2b04      	cmp	r3, #4
 8007c06:	d10e      	bne.n	8007c26 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007c08:	f7fd ff86 	bl	8005b18 <enq_lock>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d006      	beq.n	8007c20 <f_open+0xc4>
 8007c12:	f107 0318 	add.w	r3, r7, #24
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7ff f8de 	bl	8006dd8 <dir_register>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	e000      	b.n	8007c22 <f_open+0xc6>
 8007c20:	2312      	movs	r3, #18
 8007c22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007c26:	79fb      	ldrb	r3, [r7, #7]
 8007c28:	f043 0308 	orr.w	r3, r3, #8
 8007c2c:	71fb      	strb	r3, [r7, #7]
 8007c2e:	e010      	b.n	8007c52 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007c30:	7fbb      	ldrb	r3, [r7, #30]
 8007c32:	f003 0311 	and.w	r3, r3, #17
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <f_open+0xe6>
					res = FR_DENIED;
 8007c3a:	2307      	movs	r3, #7
 8007c3c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007c40:	e007      	b.n	8007c52 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007c42:	79fb      	ldrb	r3, [r7, #7]
 8007c44:	f003 0304 	and.w	r3, r3, #4
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d002      	beq.n	8007c52 <f_open+0xf6>
 8007c4c:	2308      	movs	r3, #8
 8007c4e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007c52:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d168      	bne.n	8007d2c <f_open+0x1d0>
 8007c5a:	79fb      	ldrb	r3, [r7, #7]
 8007c5c:	f003 0308 	and.w	r3, r3, #8
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d063      	beq.n	8007d2c <f_open+0x1d0>
				dw = GET_FATTIME();
 8007c64:	f7fd f834 	bl	8004cd0 <get_fattime>
 8007c68:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c6c:	330e      	adds	r3, #14
 8007c6e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fd fe4b 	bl	800590c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c78:	3316      	adds	r3, #22
 8007c7a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fd fe45 	bl	800590c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c84:	330b      	adds	r3, #11
 8007c86:	2220      	movs	r2, #32
 8007c88:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c8e:	4611      	mov	r1, r2
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fe fe1a 	bl	80068ca <ld_clust>
 8007c96:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7fe fe32 	bl	8006908 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca6:	331c      	adds	r3, #28
 8007ca8:	2100      	movs	r1, #0
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fd fe2e 	bl	800590c <st_dword>
					fs->wflag = 1;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d037      	beq.n	8007d2c <f_open+0x1d0>
						dw = fs->winsect;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cc0:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007cc2:	f107 0318 	add.w	r3, r7, #24
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fe fb22 	bl	8006314 <remove_chain>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8007cd6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d126      	bne.n	8007d2c <f_open+0x1d0>
							res = move_window(fs, dw);
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fe f86c 	bl	8005dc0 <move_window>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007cf2:	3a01      	subs	r2, #1
 8007cf4:	615a      	str	r2, [r3, #20]
 8007cf6:	e019      	b.n	8007d2c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007cf8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d115      	bne.n	8007d2c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007d00:	7fbb      	ldrb	r3, [r7, #30]
 8007d02:	f003 0310 	and.w	r3, r3, #16
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d003      	beq.n	8007d12 <f_open+0x1b6>
					res = FR_NO_FILE;
 8007d0a:	2304      	movs	r3, #4
 8007d0c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007d10:	e00c      	b.n	8007d2c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007d12:	79fb      	ldrb	r3, [r7, #7]
 8007d14:	f003 0302 	and.w	r3, r3, #2
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d007      	beq.n	8007d2c <f_open+0x1d0>
 8007d1c:	7fbb      	ldrb	r3, [r7, #30]
 8007d1e:	f003 0301 	and.w	r3, r3, #1
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d002      	beq.n	8007d2c <f_open+0x1d0>
						res = FR_DENIED;
 8007d26:	2307      	movs	r3, #7
 8007d28:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007d2c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d126      	bne.n	8007d82 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007d34:	79fb      	ldrb	r3, [r7, #7]
 8007d36:	f003 0308 	and.w	r3, r3, #8
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007d3e:	79fb      	ldrb	r3, [r7, #7]
 8007d40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d44:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007d4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d54:	79fb      	ldrb	r3, [r7, #7]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	bf8c      	ite	hi
 8007d5a:	2301      	movhi	r3, #1
 8007d5c:	2300      	movls	r3, #0
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	461a      	mov	r2, r3
 8007d62:	f107 0318 	add.w	r3, r7, #24
 8007d66:	4611      	mov	r1, r2
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7fd fef7 	bl	8005b5c <inc_lock>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d102      	bne.n	8007d82 <f_open+0x226>
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007d82:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f040 80a3 	bne.w	8007ed2 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d90:	4611      	mov	r1, r2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7fe fd99 	bl	80068ca <ld_clust>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da0:	331c      	adds	r3, #28
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fd fd74 	bl	8005890 <ld_dword>
 8007da8:	4602      	mov	r2, r0
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	88da      	ldrh	r2, [r3, #6]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	79fa      	ldrb	r2, [r7, #7]
 8007dc6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3330      	adds	r3, #48	@ 0x30
 8007dde:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007de2:	2100      	movs	r1, #0
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fd fdde 	bl	80059a6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007dea:	79fb      	ldrb	r3, [r7, #7]
 8007dec:	f003 0320 	and.w	r3, r3, #32
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d06e      	beq.n	8007ed2 <f_open+0x376>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d06a      	beq.n	8007ed2 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	68da      	ldr	r2, [r3, #12]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	895b      	ldrh	r3, [r3, #10]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	899b      	ldrh	r3, [r3, #12]
 8007e0e:	fb02 f303 	mul.w	r3, r2, r3
 8007e12:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e20:	e016      	b.n	8007e50 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fe f887 	bl	8005f3a <get_fat>
 8007e2c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007e2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d802      	bhi.n	8007e3a <f_open+0x2de>
 8007e34:	2302      	movs	r3, #2
 8007e36:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007e3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e40:	d102      	bne.n	8007e48 <f_open+0x2ec>
 8007e42:	2301      	movs	r3, #1
 8007e44:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007e48:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007e4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e50:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d103      	bne.n	8007e60 <f_open+0x304>
 8007e58:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007e5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d8e0      	bhi.n	8007e22 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007e64:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007e66:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d131      	bne.n	8007ed2 <f_open+0x376>
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	899b      	ldrh	r3, [r3, #12]
 8007e72:	461a      	mov	r2, r3
 8007e74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e76:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e7a:	fb01 f202 	mul.w	r2, r1, r2
 8007e7e:	1a9b      	subs	r3, r3, r2
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d026      	beq.n	8007ed2 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7fe f837 	bl	8005efc <clust2sect>
 8007e8e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8007e90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d103      	bne.n	8007e9e <f_open+0x342>
						res = FR_INT_ERR;
 8007e96:	2302      	movs	r3, #2
 8007e98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007e9c:	e019      	b.n	8007ed2 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	899b      	ldrh	r3, [r3, #12]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ea6:	fbb3 f2f2 	udiv	r2, r3, r2
 8007eaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007eac:	441a      	add	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	7858      	ldrb	r0, [r3, #1]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6a1a      	ldr	r2, [r3, #32]
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	f7fd fc6f 	bl	80057a4 <disk_read>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d002      	beq.n	8007ed2 <f_open+0x376>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007ed2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d002      	beq.n	8007ee0 <f_open+0x384>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007ee0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3768      	adds	r7, #104	@ 0x68
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08c      	sub	sp, #48	@ 0x30
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
 8007ef8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2200      	movs	r2, #0
 8007f02:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f107 0210 	add.w	r2, r7, #16
 8007f0a:	4611      	mov	r1, r2
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7ff fda9 	bl	8007a64 <validate>
 8007f12:	4603      	mov	r3, r0
 8007f14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007f18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d107      	bne.n	8007f30 <f_write+0x44>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	7d5b      	ldrb	r3, [r3, #21]
 8007f24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007f28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d002      	beq.n	8007f36 <f_write+0x4a>
 8007f30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007f34:	e16a      	b.n	800820c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	7d1b      	ldrb	r3, [r3, #20]
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d101      	bne.n	8007f46 <f_write+0x5a>
 8007f42:	2307      	movs	r3, #7
 8007f44:	e162      	b.n	800820c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	699a      	ldr	r2, [r3, #24]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	441a      	add	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	f080 814c 	bcs.w	80081f0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	43db      	mvns	r3, r3
 8007f5e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007f60:	e146      	b.n	80081f0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	8992      	ldrh	r2, [r2, #12]
 8007f6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f6e:	fb01 f202 	mul.w	r2, r1, r2
 8007f72:	1a9b      	subs	r3, r3, r2
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f040 80f1 	bne.w	800815c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	8992      	ldrh	r2, [r2, #12]
 8007f82:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	8952      	ldrh	r2, [r2, #10]
 8007f8a:	3a01      	subs	r2, #1
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d143      	bne.n	800801e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10c      	bne.n	8007fb8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d11a      	bne.n	8007fe0 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2100      	movs	r1, #0
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fe fa15 	bl	80063de <create_chain>
 8007fb4:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007fb6:	e013      	b.n	8007fe0 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d007      	beq.n	8007fd0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f7fe faa1 	bl	800650e <clmt_clust>
 8007fcc:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007fce:	e007      	b.n	8007fe0 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	69db      	ldr	r3, [r3, #28]
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	4610      	mov	r0, r2
 8007fda:	f7fe fa00 	bl	80063de <create_chain>
 8007fde:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	f000 8109 	beq.w	80081fa <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d104      	bne.n	8007ff8 <f_write+0x10c>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2202      	movs	r2, #2
 8007ff2:	755a      	strb	r2, [r3, #21]
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	e109      	b.n	800820c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ffe:	d104      	bne.n	800800a <f_write+0x11e>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2201      	movs	r2, #1
 8008004:	755a      	strb	r2, [r3, #21]
 8008006:	2301      	movs	r3, #1
 8008008:	e100      	b.n	800820c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800800e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d102      	bne.n	800801e <f_write+0x132>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800801c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	7d1b      	ldrb	r3, [r3, #20]
 8008022:	b25b      	sxtb	r3, r3
 8008024:	2b00      	cmp	r3, #0
 8008026:	da18      	bge.n	800805a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	7858      	ldrb	r0, [r3, #1]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6a1a      	ldr	r2, [r3, #32]
 8008036:	2301      	movs	r3, #1
 8008038:	f7fd fbd4 	bl	80057e4 <disk_write>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d004      	beq.n	800804c <f_write+0x160>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2201      	movs	r2, #1
 8008046:	755a      	strb	r2, [r3, #21]
 8008048:	2301      	movs	r3, #1
 800804a:	e0df      	b.n	800820c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	7d1b      	ldrb	r3, [r3, #20]
 8008050:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008054:	b2da      	uxtb	r2, r3
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	69db      	ldr	r3, [r3, #28]
 8008060:	4619      	mov	r1, r3
 8008062:	4610      	mov	r0, r2
 8008064:	f7fd ff4a 	bl	8005efc <clust2sect>
 8008068:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d104      	bne.n	800807a <f_write+0x18e>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2202      	movs	r2, #2
 8008074:	755a      	strb	r2, [r3, #21]
 8008076:	2302      	movs	r3, #2
 8008078:	e0c8      	b.n	800820c <f_write+0x320>
			sect += csect;
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	4413      	add	r3, r2
 8008080:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	899b      	ldrh	r3, [r3, #12]
 8008086:	461a      	mov	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	fbb3 f3f2 	udiv	r3, r3, r2
 800808e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d043      	beq.n	800811e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008096:	69ba      	ldr	r2, [r7, #24]
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	4413      	add	r3, r2
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	8952      	ldrh	r2, [r2, #10]
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d905      	bls.n	80080b0 <f_write+0x1c4>
					cc = fs->csize - csect;
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	895b      	ldrh	r3, [r3, #10]
 80080a8:	461a      	mov	r2, r3
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	1ad3      	subs	r3, r2, r3
 80080ae:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	7858      	ldrb	r0, [r3, #1]
 80080b4:	6a3b      	ldr	r3, [r7, #32]
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	69f9      	ldr	r1, [r7, #28]
 80080ba:	f7fd fb93 	bl	80057e4 <disk_write>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d004      	beq.n	80080ce <f_write+0x1e2>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2201      	movs	r2, #1
 80080c8:	755a      	strb	r2, [r3, #21]
 80080ca:	2301      	movs	r3, #1
 80080cc:	e09e      	b.n	800820c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6a1a      	ldr	r2, [r3, #32]
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	6a3a      	ldr	r2, [r7, #32]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d918      	bls.n	800810e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6a1a      	ldr	r2, [r3, #32]
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	8992      	ldrh	r2, [r2, #12]
 80080ee:	fb02 f303 	mul.w	r3, r2, r3
 80080f2:	69fa      	ldr	r2, [r7, #28]
 80080f4:	18d1      	adds	r1, r2, r3
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	899b      	ldrh	r3, [r3, #12]
 80080fa:	461a      	mov	r2, r3
 80080fc:	f7fd fc32 	bl	8005964 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	7d1b      	ldrb	r3, [r3, #20]
 8008104:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008108:	b2da      	uxtb	r2, r3
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	899b      	ldrh	r3, [r3, #12]
 8008112:	461a      	mov	r2, r3
 8008114:	6a3b      	ldr	r3, [r7, #32]
 8008116:	fb02 f303 	mul.w	r3, r2, r3
 800811a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800811c:	e04b      	b.n	80081b6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	429a      	cmp	r2, r3
 8008126:	d016      	beq.n	8008156 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	699a      	ldr	r2, [r3, #24]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008130:	429a      	cmp	r2, r3
 8008132:	d210      	bcs.n	8008156 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	7858      	ldrb	r0, [r3, #1]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800813e:	2301      	movs	r3, #1
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	f7fd fb2f 	bl	80057a4 <disk_read>
 8008146:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008148:	2b00      	cmp	r3, #0
 800814a:	d004      	beq.n	8008156 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2201      	movs	r2, #1
 8008150:	755a      	strb	r2, [r3, #21]
 8008152:	2301      	movs	r3, #1
 8008154:	e05a      	b.n	800820c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	697a      	ldr	r2, [r7, #20]
 800815a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	899b      	ldrh	r3, [r3, #12]
 8008160:	4618      	mov	r0, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	8992      	ldrh	r2, [r2, #12]
 800816a:	fbb3 f1f2 	udiv	r1, r3, r2
 800816e:	fb01 f202 	mul.w	r2, r1, r2
 8008172:	1a9b      	subs	r3, r3, r2
 8008174:	1ac3      	subs	r3, r0, r3
 8008176:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	429a      	cmp	r2, r3
 800817e:	d901      	bls.n	8008184 <f_write+0x298>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	8992      	ldrh	r2, [r2, #12]
 8008192:	fbb3 f0f2 	udiv	r0, r3, r2
 8008196:	fb00 f202 	mul.w	r2, r0, r2
 800819a:	1a9b      	subs	r3, r3, r2
 800819c:	440b      	add	r3, r1
 800819e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081a0:	69f9      	ldr	r1, [r7, #28]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7fd fbde 	bl	8005964 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	7d1b      	ldrb	r3, [r3, #20]
 80081ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80081b6:	69fa      	ldr	r2, [r7, #28]
 80081b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ba:	4413      	add	r3, r2
 80081bc:	61fb      	str	r3, [r7, #28]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	699a      	ldr	r2, [r3, #24]
 80081c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c4:	441a      	add	r2, r3
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	619a      	str	r2, [r3, #24]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	68da      	ldr	r2, [r3, #12]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	bf38      	it	cc
 80081d6:	461a      	movcc	r2, r3
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	60da      	str	r2, [r3, #12]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e2:	441a      	add	r2, r3
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f47f aeb5 	bne.w	8007f62 <f_write+0x76>
 80081f8:	e000      	b.n	80081fc <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80081fa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	7d1b      	ldrb	r3, [r3, #20]
 8008200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008204:	b2da      	uxtb	r2, r3
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3730      	adds	r7, #48	@ 0x30
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b086      	sub	sp, #24
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f107 0208 	add.w	r2, r7, #8
 8008222:	4611      	mov	r1, r2
 8008224:	4618      	mov	r0, r3
 8008226:	f7ff fc1d 	bl	8007a64 <validate>
 800822a:	4603      	mov	r3, r0
 800822c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800822e:	7dfb      	ldrb	r3, [r7, #23]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d168      	bne.n	8008306 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	7d1b      	ldrb	r3, [r3, #20]
 8008238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800823c:	2b00      	cmp	r3, #0
 800823e:	d062      	beq.n	8008306 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	7d1b      	ldrb	r3, [r3, #20]
 8008244:	b25b      	sxtb	r3, r3
 8008246:	2b00      	cmp	r3, #0
 8008248:	da15      	bge.n	8008276 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	7858      	ldrb	r0, [r3, #1]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a1a      	ldr	r2, [r3, #32]
 8008258:	2301      	movs	r3, #1
 800825a:	f7fd fac3 	bl	80057e4 <disk_write>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d001      	beq.n	8008268 <f_sync+0x54>
 8008264:	2301      	movs	r3, #1
 8008266:	e04f      	b.n	8008308 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	7d1b      	ldrb	r3, [r3, #20]
 800826c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008270:	b2da      	uxtb	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008276:	f7fc fd2b 	bl	8004cd0 <get_fattime>
 800827a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008282:	4619      	mov	r1, r3
 8008284:	4610      	mov	r0, r2
 8008286:	f7fd fd9b 	bl	8005dc0 <move_window>
 800828a:	4603      	mov	r3, r0
 800828c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800828e:	7dfb      	ldrb	r3, [r7, #23]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d138      	bne.n	8008306 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008298:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	330b      	adds	r3, #11
 800829e:	781a      	ldrb	r2, [r3, #0]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	330b      	adds	r3, #11
 80082a4:	f042 0220 	orr.w	r2, r2, #32
 80082a8:	b2d2      	uxtb	r2, r2
 80082aa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6818      	ldr	r0, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	461a      	mov	r2, r3
 80082b6:	68f9      	ldr	r1, [r7, #12]
 80082b8:	f7fe fb26 	bl	8006908 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f103 021c 	add.w	r2, r3, #28
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	4619      	mov	r1, r3
 80082c8:	4610      	mov	r0, r2
 80082ca:	f7fd fb1f 	bl	800590c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	3316      	adds	r3, #22
 80082d2:	6939      	ldr	r1, [r7, #16]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fd fb19 	bl	800590c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	3312      	adds	r3, #18
 80082de:	2100      	movs	r1, #0
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fd faf8 	bl	80058d6 <st_word>
					fs->wflag = 1;
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	2201      	movs	r2, #1
 80082ea:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fd fd94 	bl	8005e1c <sync_fs>
 80082f4:	4603      	mov	r3, r0
 80082f6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	7d1b      	ldrb	r3, [r3, #20]
 80082fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008300:	b2da      	uxtb	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008306:	7dfb      	ldrb	r3, [r7, #23]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3718      	adds	r7, #24
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f7ff ff7b 	bl	8008214 <f_sync>
 800831e:	4603      	mov	r3, r0
 8008320:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008322:	7bfb      	ldrb	r3, [r7, #15]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d118      	bne.n	800835a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f107 0208 	add.w	r2, r7, #8
 800832e:	4611      	mov	r1, r2
 8008330:	4618      	mov	r0, r3
 8008332:	f7ff fb97 	bl	8007a64 <validate>
 8008336:	4603      	mov	r3, r0
 8008338:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800833a:	7bfb      	ldrb	r3, [r7, #15]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10c      	bne.n	800835a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	4618      	mov	r0, r3
 8008346:	f7fd fc97 	bl	8005c78 <dec_lock>
 800834a:	4603      	mov	r3, r0
 800834c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800834e:	7bfb      	ldrb	r3, [r7, #15]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d102      	bne.n	800835a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800835a:	7bfb      	ldrb	r3, [r7, #15]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	4613      	mov	r3, r2
 8008370:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008372:	2301      	movs	r3, #1
 8008374:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008376:	2300      	movs	r3, #0
 8008378:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800837a:	4b1f      	ldr	r3, [pc, #124]	@ (80083f8 <FATFS_LinkDriverEx+0x94>)
 800837c:	7a5b      	ldrb	r3, [r3, #9]
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b00      	cmp	r3, #0
 8008382:	d131      	bne.n	80083e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008384:	4b1c      	ldr	r3, [pc, #112]	@ (80083f8 <FATFS_LinkDriverEx+0x94>)
 8008386:	7a5b      	ldrb	r3, [r3, #9]
 8008388:	b2db      	uxtb	r3, r3
 800838a:	461a      	mov	r2, r3
 800838c:	4b1a      	ldr	r3, [pc, #104]	@ (80083f8 <FATFS_LinkDriverEx+0x94>)
 800838e:	2100      	movs	r1, #0
 8008390:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008392:	4b19      	ldr	r3, [pc, #100]	@ (80083f8 <FATFS_LinkDriverEx+0x94>)
 8008394:	7a5b      	ldrb	r3, [r3, #9]
 8008396:	b2db      	uxtb	r3, r3
 8008398:	4a17      	ldr	r2, [pc, #92]	@ (80083f8 <FATFS_LinkDriverEx+0x94>)
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	68fa      	ldr	r2, [r7, #12]
 80083a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80083a2:	4b15      	ldr	r3, [pc, #84]	@ (80083f8 <FATFS_LinkDriverEx+0x94>)
 80083a4:	7a5b      	ldrb	r3, [r3, #9]
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	461a      	mov	r2, r3
 80083aa:	4b13      	ldr	r3, [pc, #76]	@ (80083f8 <FATFS_LinkDriverEx+0x94>)
 80083ac:	4413      	add	r3, r2
 80083ae:	79fa      	ldrb	r2, [r7, #7]
 80083b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80083b2:	4b11      	ldr	r3, [pc, #68]	@ (80083f8 <FATFS_LinkDriverEx+0x94>)
 80083b4:	7a5b      	ldrb	r3, [r3, #9]
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	1c5a      	adds	r2, r3, #1
 80083ba:	b2d1      	uxtb	r1, r2
 80083bc:	4a0e      	ldr	r2, [pc, #56]	@ (80083f8 <FATFS_LinkDriverEx+0x94>)
 80083be:	7251      	strb	r1, [r2, #9]
 80083c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80083c2:	7dbb      	ldrb	r3, [r7, #22]
 80083c4:	3330      	adds	r3, #48	@ 0x30
 80083c6:	b2da      	uxtb	r2, r3
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	3301      	adds	r3, #1
 80083d0:	223a      	movs	r2, #58	@ 0x3a
 80083d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	3302      	adds	r3, #2
 80083d8:	222f      	movs	r2, #47	@ 0x2f
 80083da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	3303      	adds	r3, #3
 80083e0:	2200      	movs	r2, #0
 80083e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80083e4:	2300      	movs	r3, #0
 80083e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80083e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	371c      	adds	r7, #28
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	20003c58 	.word	0x20003c58

080083fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008406:	2200      	movs	r2, #0
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f7ff ffaa 	bl	8008364 <FATFS_LinkDriverEx>
 8008410:	4603      	mov	r3, r0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
	...

0800841c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	4603      	mov	r3, r0
 8008424:	6039      	str	r1, [r7, #0]
 8008426:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008428:	88fb      	ldrh	r3, [r7, #6]
 800842a:	2b7f      	cmp	r3, #127	@ 0x7f
 800842c:	d802      	bhi.n	8008434 <ff_convert+0x18>
		c = chr;
 800842e:	88fb      	ldrh	r3, [r7, #6]
 8008430:	81fb      	strh	r3, [r7, #14]
 8008432:	e025      	b.n	8008480 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00b      	beq.n	8008452 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800843a:	88fb      	ldrh	r3, [r7, #6]
 800843c:	2bff      	cmp	r3, #255	@ 0xff
 800843e:	d805      	bhi.n	800844c <ff_convert+0x30>
 8008440:	88fb      	ldrh	r3, [r7, #6]
 8008442:	3b80      	subs	r3, #128	@ 0x80
 8008444:	4a12      	ldr	r2, [pc, #72]	@ (8008490 <ff_convert+0x74>)
 8008446:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800844a:	e000      	b.n	800844e <ff_convert+0x32>
 800844c:	2300      	movs	r3, #0
 800844e:	81fb      	strh	r3, [r7, #14]
 8008450:	e016      	b.n	8008480 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008452:	2300      	movs	r3, #0
 8008454:	81fb      	strh	r3, [r7, #14]
 8008456:	e009      	b.n	800846c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008458:	89fb      	ldrh	r3, [r7, #14]
 800845a:	4a0d      	ldr	r2, [pc, #52]	@ (8008490 <ff_convert+0x74>)
 800845c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008460:	88fa      	ldrh	r2, [r7, #6]
 8008462:	429a      	cmp	r2, r3
 8008464:	d006      	beq.n	8008474 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008466:	89fb      	ldrh	r3, [r7, #14]
 8008468:	3301      	adds	r3, #1
 800846a:	81fb      	strh	r3, [r7, #14]
 800846c:	89fb      	ldrh	r3, [r7, #14]
 800846e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008470:	d9f2      	bls.n	8008458 <ff_convert+0x3c>
 8008472:	e000      	b.n	8008476 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008474:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008476:	89fb      	ldrh	r3, [r7, #14]
 8008478:	3380      	adds	r3, #128	@ 0x80
 800847a:	b29b      	uxth	r3, r3
 800847c:	b2db      	uxtb	r3, r3
 800847e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008480:	89fb      	ldrh	r3, [r7, #14]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	08009784 	.word	0x08009784

08008494 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008494:	b480      	push	{r7}
 8008496:	b087      	sub	sp, #28
 8008498:	af00      	add	r7, sp, #0
 800849a:	4603      	mov	r3, r0
 800849c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800849e:	88fb      	ldrh	r3, [r7, #6]
 80084a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084a4:	d201      	bcs.n	80084aa <ff_wtoupper+0x16>
 80084a6:	4b3e      	ldr	r3, [pc, #248]	@ (80085a0 <ff_wtoupper+0x10c>)
 80084a8:	e000      	b.n	80084ac <ff_wtoupper+0x18>
 80084aa:	4b3e      	ldr	r3, [pc, #248]	@ (80085a4 <ff_wtoupper+0x110>)
 80084ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	1c9a      	adds	r2, r3, #2
 80084b2:	617a      	str	r2, [r7, #20]
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80084b8:	8a7b      	ldrh	r3, [r7, #18]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d068      	beq.n	8008590 <ff_wtoupper+0xfc>
 80084be:	88fa      	ldrh	r2, [r7, #6]
 80084c0:	8a7b      	ldrh	r3, [r7, #18]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d364      	bcc.n	8008590 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	1c9a      	adds	r2, r3, #2
 80084ca:	617a      	str	r2, [r7, #20]
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	823b      	strh	r3, [r7, #16]
 80084d0:	8a3b      	ldrh	r3, [r7, #16]
 80084d2:	0a1b      	lsrs	r3, r3, #8
 80084d4:	81fb      	strh	r3, [r7, #14]
 80084d6:	8a3b      	ldrh	r3, [r7, #16]
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80084dc:	88fa      	ldrh	r2, [r7, #6]
 80084de:	8a79      	ldrh	r1, [r7, #18]
 80084e0:	8a3b      	ldrh	r3, [r7, #16]
 80084e2:	440b      	add	r3, r1
 80084e4:	429a      	cmp	r2, r3
 80084e6:	da49      	bge.n	800857c <ff_wtoupper+0xe8>
			switch (cmd) {
 80084e8:	89fb      	ldrh	r3, [r7, #14]
 80084ea:	2b08      	cmp	r3, #8
 80084ec:	d84f      	bhi.n	800858e <ff_wtoupper+0xfa>
 80084ee:	a201      	add	r2, pc, #4	@ (adr r2, 80084f4 <ff_wtoupper+0x60>)
 80084f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f4:	08008519 	.word	0x08008519
 80084f8:	0800852b 	.word	0x0800852b
 80084fc:	08008541 	.word	0x08008541
 8008500:	08008549 	.word	0x08008549
 8008504:	08008551 	.word	0x08008551
 8008508:	08008559 	.word	0x08008559
 800850c:	08008561 	.word	0x08008561
 8008510:	08008569 	.word	0x08008569
 8008514:	08008571 	.word	0x08008571
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008518:	88fa      	ldrh	r2, [r7, #6]
 800851a:	8a7b      	ldrh	r3, [r7, #18]
 800851c:	1ad3      	subs	r3, r2, r3
 800851e:	005b      	lsls	r3, r3, #1
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	4413      	add	r3, r2
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	80fb      	strh	r3, [r7, #6]
 8008528:	e027      	b.n	800857a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800852a:	88fa      	ldrh	r2, [r7, #6]
 800852c:	8a7b      	ldrh	r3, [r7, #18]
 800852e:	1ad3      	subs	r3, r2, r3
 8008530:	b29b      	uxth	r3, r3
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	b29b      	uxth	r3, r3
 8008538:	88fa      	ldrh	r2, [r7, #6]
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	80fb      	strh	r3, [r7, #6]
 800853e:	e01c      	b.n	800857a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008540:	88fb      	ldrh	r3, [r7, #6]
 8008542:	3b10      	subs	r3, #16
 8008544:	80fb      	strh	r3, [r7, #6]
 8008546:	e018      	b.n	800857a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008548:	88fb      	ldrh	r3, [r7, #6]
 800854a:	3b20      	subs	r3, #32
 800854c:	80fb      	strh	r3, [r7, #6]
 800854e:	e014      	b.n	800857a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008550:	88fb      	ldrh	r3, [r7, #6]
 8008552:	3b30      	subs	r3, #48	@ 0x30
 8008554:	80fb      	strh	r3, [r7, #6]
 8008556:	e010      	b.n	800857a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008558:	88fb      	ldrh	r3, [r7, #6]
 800855a:	3b1a      	subs	r3, #26
 800855c:	80fb      	strh	r3, [r7, #6]
 800855e:	e00c      	b.n	800857a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008560:	88fb      	ldrh	r3, [r7, #6]
 8008562:	3308      	adds	r3, #8
 8008564:	80fb      	strh	r3, [r7, #6]
 8008566:	e008      	b.n	800857a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008568:	88fb      	ldrh	r3, [r7, #6]
 800856a:	3b50      	subs	r3, #80	@ 0x50
 800856c:	80fb      	strh	r3, [r7, #6]
 800856e:	e004      	b.n	800857a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008570:	88fb      	ldrh	r3, [r7, #6]
 8008572:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8008576:	80fb      	strh	r3, [r7, #6]
 8008578:	bf00      	nop
			}
			break;
 800857a:	e008      	b.n	800858e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800857c:	89fb      	ldrh	r3, [r7, #14]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d195      	bne.n	80084ae <ff_wtoupper+0x1a>
 8008582:	8a3b      	ldrh	r3, [r7, #16]
 8008584:	005b      	lsls	r3, r3, #1
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	4413      	add	r3, r2
 800858a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800858c:	e78f      	b.n	80084ae <ff_wtoupper+0x1a>
			break;
 800858e:	bf00      	nop
	}

	return chr;
 8008590:	88fb      	ldrh	r3, [r7, #6]
}
 8008592:	4618      	mov	r0, r3
 8008594:	371c      	adds	r7, #28
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	08009884 	.word	0x08009884
 80085a4:	08009a78 	.word	0x08009a78

080085a8 <std>:
 80085a8:	2300      	movs	r3, #0
 80085aa:	b510      	push	{r4, lr}
 80085ac:	4604      	mov	r4, r0
 80085ae:	e9c0 3300 	strd	r3, r3, [r0]
 80085b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085b6:	6083      	str	r3, [r0, #8]
 80085b8:	8181      	strh	r1, [r0, #12]
 80085ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80085bc:	81c2      	strh	r2, [r0, #14]
 80085be:	6183      	str	r3, [r0, #24]
 80085c0:	4619      	mov	r1, r3
 80085c2:	2208      	movs	r2, #8
 80085c4:	305c      	adds	r0, #92	@ 0x5c
 80085c6:	f000 f921 	bl	800880c <memset>
 80085ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008600 <std+0x58>)
 80085cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80085ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008604 <std+0x5c>)
 80085d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80085d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008608 <std+0x60>)
 80085d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80085d6:	4b0d      	ldr	r3, [pc, #52]	@ (800860c <std+0x64>)
 80085d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80085da:	4b0d      	ldr	r3, [pc, #52]	@ (8008610 <std+0x68>)
 80085dc:	6224      	str	r4, [r4, #32]
 80085de:	429c      	cmp	r4, r3
 80085e0:	d006      	beq.n	80085f0 <std+0x48>
 80085e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80085e6:	4294      	cmp	r4, r2
 80085e8:	d002      	beq.n	80085f0 <std+0x48>
 80085ea:	33d0      	adds	r3, #208	@ 0xd0
 80085ec:	429c      	cmp	r4, r3
 80085ee:	d105      	bne.n	80085fc <std+0x54>
 80085f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80085f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085f8:	f000 b93a 	b.w	8008870 <__retarget_lock_init_recursive>
 80085fc:	bd10      	pop	{r4, pc}
 80085fe:	bf00      	nop
 8008600:	080090c9 	.word	0x080090c9
 8008604:	080090eb 	.word	0x080090eb
 8008608:	08009123 	.word	0x08009123
 800860c:	08009147 	.word	0x08009147
 8008610:	20003c64 	.word	0x20003c64

08008614 <stdio_exit_handler>:
 8008614:	4a02      	ldr	r2, [pc, #8]	@ (8008620 <stdio_exit_handler+0xc>)
 8008616:	4903      	ldr	r1, [pc, #12]	@ (8008624 <stdio_exit_handler+0x10>)
 8008618:	4803      	ldr	r0, [pc, #12]	@ (8008628 <stdio_exit_handler+0x14>)
 800861a:	f000 b869 	b.w	80086f0 <_fwalk_sglue>
 800861e:	bf00      	nop
 8008620:	20000054 	.word	0x20000054
 8008624:	08009061 	.word	0x08009061
 8008628:	20000064 	.word	0x20000064

0800862c <cleanup_stdio>:
 800862c:	6841      	ldr	r1, [r0, #4]
 800862e:	4b0c      	ldr	r3, [pc, #48]	@ (8008660 <cleanup_stdio+0x34>)
 8008630:	4299      	cmp	r1, r3
 8008632:	b510      	push	{r4, lr}
 8008634:	4604      	mov	r4, r0
 8008636:	d001      	beq.n	800863c <cleanup_stdio+0x10>
 8008638:	f000 fd12 	bl	8009060 <_fflush_r>
 800863c:	68a1      	ldr	r1, [r4, #8]
 800863e:	4b09      	ldr	r3, [pc, #36]	@ (8008664 <cleanup_stdio+0x38>)
 8008640:	4299      	cmp	r1, r3
 8008642:	d002      	beq.n	800864a <cleanup_stdio+0x1e>
 8008644:	4620      	mov	r0, r4
 8008646:	f000 fd0b 	bl	8009060 <_fflush_r>
 800864a:	68e1      	ldr	r1, [r4, #12]
 800864c:	4b06      	ldr	r3, [pc, #24]	@ (8008668 <cleanup_stdio+0x3c>)
 800864e:	4299      	cmp	r1, r3
 8008650:	d004      	beq.n	800865c <cleanup_stdio+0x30>
 8008652:	4620      	mov	r0, r4
 8008654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008658:	f000 bd02 	b.w	8009060 <_fflush_r>
 800865c:	bd10      	pop	{r4, pc}
 800865e:	bf00      	nop
 8008660:	20003c64 	.word	0x20003c64
 8008664:	20003ccc 	.word	0x20003ccc
 8008668:	20003d34 	.word	0x20003d34

0800866c <global_stdio_init.part.0>:
 800866c:	b510      	push	{r4, lr}
 800866e:	4b0b      	ldr	r3, [pc, #44]	@ (800869c <global_stdio_init.part.0+0x30>)
 8008670:	4c0b      	ldr	r4, [pc, #44]	@ (80086a0 <global_stdio_init.part.0+0x34>)
 8008672:	4a0c      	ldr	r2, [pc, #48]	@ (80086a4 <global_stdio_init.part.0+0x38>)
 8008674:	601a      	str	r2, [r3, #0]
 8008676:	4620      	mov	r0, r4
 8008678:	2200      	movs	r2, #0
 800867a:	2104      	movs	r1, #4
 800867c:	f7ff ff94 	bl	80085a8 <std>
 8008680:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008684:	2201      	movs	r2, #1
 8008686:	2109      	movs	r1, #9
 8008688:	f7ff ff8e 	bl	80085a8 <std>
 800868c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008690:	2202      	movs	r2, #2
 8008692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008696:	2112      	movs	r1, #18
 8008698:	f7ff bf86 	b.w	80085a8 <std>
 800869c:	20003d9c 	.word	0x20003d9c
 80086a0:	20003c64 	.word	0x20003c64
 80086a4:	08008615 	.word	0x08008615

080086a8 <__sfp_lock_acquire>:
 80086a8:	4801      	ldr	r0, [pc, #4]	@ (80086b0 <__sfp_lock_acquire+0x8>)
 80086aa:	f000 b8e2 	b.w	8008872 <__retarget_lock_acquire_recursive>
 80086ae:	bf00      	nop
 80086b0:	20003da1 	.word	0x20003da1

080086b4 <__sfp_lock_release>:
 80086b4:	4801      	ldr	r0, [pc, #4]	@ (80086bc <__sfp_lock_release+0x8>)
 80086b6:	f000 b8dd 	b.w	8008874 <__retarget_lock_release_recursive>
 80086ba:	bf00      	nop
 80086bc:	20003da1 	.word	0x20003da1

080086c0 <__sinit>:
 80086c0:	b510      	push	{r4, lr}
 80086c2:	4604      	mov	r4, r0
 80086c4:	f7ff fff0 	bl	80086a8 <__sfp_lock_acquire>
 80086c8:	6a23      	ldr	r3, [r4, #32]
 80086ca:	b11b      	cbz	r3, 80086d4 <__sinit+0x14>
 80086cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086d0:	f7ff bff0 	b.w	80086b4 <__sfp_lock_release>
 80086d4:	4b04      	ldr	r3, [pc, #16]	@ (80086e8 <__sinit+0x28>)
 80086d6:	6223      	str	r3, [r4, #32]
 80086d8:	4b04      	ldr	r3, [pc, #16]	@ (80086ec <__sinit+0x2c>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1f5      	bne.n	80086cc <__sinit+0xc>
 80086e0:	f7ff ffc4 	bl	800866c <global_stdio_init.part.0>
 80086e4:	e7f2      	b.n	80086cc <__sinit+0xc>
 80086e6:	bf00      	nop
 80086e8:	0800862d 	.word	0x0800862d
 80086ec:	20003d9c 	.word	0x20003d9c

080086f0 <_fwalk_sglue>:
 80086f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086f4:	4607      	mov	r7, r0
 80086f6:	4688      	mov	r8, r1
 80086f8:	4614      	mov	r4, r2
 80086fa:	2600      	movs	r6, #0
 80086fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008700:	f1b9 0901 	subs.w	r9, r9, #1
 8008704:	d505      	bpl.n	8008712 <_fwalk_sglue+0x22>
 8008706:	6824      	ldr	r4, [r4, #0]
 8008708:	2c00      	cmp	r4, #0
 800870a:	d1f7      	bne.n	80086fc <_fwalk_sglue+0xc>
 800870c:	4630      	mov	r0, r6
 800870e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008712:	89ab      	ldrh	r3, [r5, #12]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d907      	bls.n	8008728 <_fwalk_sglue+0x38>
 8008718:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800871c:	3301      	adds	r3, #1
 800871e:	d003      	beq.n	8008728 <_fwalk_sglue+0x38>
 8008720:	4629      	mov	r1, r5
 8008722:	4638      	mov	r0, r7
 8008724:	47c0      	blx	r8
 8008726:	4306      	orrs	r6, r0
 8008728:	3568      	adds	r5, #104	@ 0x68
 800872a:	e7e9      	b.n	8008700 <_fwalk_sglue+0x10>

0800872c <iprintf>:
 800872c:	b40f      	push	{r0, r1, r2, r3}
 800872e:	b507      	push	{r0, r1, r2, lr}
 8008730:	4906      	ldr	r1, [pc, #24]	@ (800874c <iprintf+0x20>)
 8008732:	ab04      	add	r3, sp, #16
 8008734:	6808      	ldr	r0, [r1, #0]
 8008736:	f853 2b04 	ldr.w	r2, [r3], #4
 800873a:	6881      	ldr	r1, [r0, #8]
 800873c:	9301      	str	r3, [sp, #4]
 800873e:	f000 f8c3 	bl	80088c8 <_vfiprintf_r>
 8008742:	b003      	add	sp, #12
 8008744:	f85d eb04 	ldr.w	lr, [sp], #4
 8008748:	b004      	add	sp, #16
 800874a:	4770      	bx	lr
 800874c:	20000060 	.word	0x20000060

08008750 <_puts_r>:
 8008750:	6a03      	ldr	r3, [r0, #32]
 8008752:	b570      	push	{r4, r5, r6, lr}
 8008754:	6884      	ldr	r4, [r0, #8]
 8008756:	4605      	mov	r5, r0
 8008758:	460e      	mov	r6, r1
 800875a:	b90b      	cbnz	r3, 8008760 <_puts_r+0x10>
 800875c:	f7ff ffb0 	bl	80086c0 <__sinit>
 8008760:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008762:	07db      	lsls	r3, r3, #31
 8008764:	d405      	bmi.n	8008772 <_puts_r+0x22>
 8008766:	89a3      	ldrh	r3, [r4, #12]
 8008768:	0598      	lsls	r0, r3, #22
 800876a:	d402      	bmi.n	8008772 <_puts_r+0x22>
 800876c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800876e:	f000 f880 	bl	8008872 <__retarget_lock_acquire_recursive>
 8008772:	89a3      	ldrh	r3, [r4, #12]
 8008774:	0719      	lsls	r1, r3, #28
 8008776:	d502      	bpl.n	800877e <_puts_r+0x2e>
 8008778:	6923      	ldr	r3, [r4, #16]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d135      	bne.n	80087ea <_puts_r+0x9a>
 800877e:	4621      	mov	r1, r4
 8008780:	4628      	mov	r0, r5
 8008782:	f000 fd23 	bl	80091cc <__swsetup_r>
 8008786:	b380      	cbz	r0, 80087ea <_puts_r+0x9a>
 8008788:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800878c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800878e:	07da      	lsls	r2, r3, #31
 8008790:	d405      	bmi.n	800879e <_puts_r+0x4e>
 8008792:	89a3      	ldrh	r3, [r4, #12]
 8008794:	059b      	lsls	r3, r3, #22
 8008796:	d402      	bmi.n	800879e <_puts_r+0x4e>
 8008798:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800879a:	f000 f86b 	bl	8008874 <__retarget_lock_release_recursive>
 800879e:	4628      	mov	r0, r5
 80087a0:	bd70      	pop	{r4, r5, r6, pc}
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	da04      	bge.n	80087b0 <_puts_r+0x60>
 80087a6:	69a2      	ldr	r2, [r4, #24]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	dc17      	bgt.n	80087dc <_puts_r+0x8c>
 80087ac:	290a      	cmp	r1, #10
 80087ae:	d015      	beq.n	80087dc <_puts_r+0x8c>
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	1c5a      	adds	r2, r3, #1
 80087b4:	6022      	str	r2, [r4, #0]
 80087b6:	7019      	strb	r1, [r3, #0]
 80087b8:	68a3      	ldr	r3, [r4, #8]
 80087ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80087be:	3b01      	subs	r3, #1
 80087c0:	60a3      	str	r3, [r4, #8]
 80087c2:	2900      	cmp	r1, #0
 80087c4:	d1ed      	bne.n	80087a2 <_puts_r+0x52>
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	da11      	bge.n	80087ee <_puts_r+0x9e>
 80087ca:	4622      	mov	r2, r4
 80087cc:	210a      	movs	r1, #10
 80087ce:	4628      	mov	r0, r5
 80087d0:	f000 fcbd 	bl	800914e <__swbuf_r>
 80087d4:	3001      	adds	r0, #1
 80087d6:	d0d7      	beq.n	8008788 <_puts_r+0x38>
 80087d8:	250a      	movs	r5, #10
 80087da:	e7d7      	b.n	800878c <_puts_r+0x3c>
 80087dc:	4622      	mov	r2, r4
 80087de:	4628      	mov	r0, r5
 80087e0:	f000 fcb5 	bl	800914e <__swbuf_r>
 80087e4:	3001      	adds	r0, #1
 80087e6:	d1e7      	bne.n	80087b8 <_puts_r+0x68>
 80087e8:	e7ce      	b.n	8008788 <_puts_r+0x38>
 80087ea:	3e01      	subs	r6, #1
 80087ec:	e7e4      	b.n	80087b8 <_puts_r+0x68>
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	6022      	str	r2, [r4, #0]
 80087f4:	220a      	movs	r2, #10
 80087f6:	701a      	strb	r2, [r3, #0]
 80087f8:	e7ee      	b.n	80087d8 <_puts_r+0x88>
	...

080087fc <puts>:
 80087fc:	4b02      	ldr	r3, [pc, #8]	@ (8008808 <puts+0xc>)
 80087fe:	4601      	mov	r1, r0
 8008800:	6818      	ldr	r0, [r3, #0]
 8008802:	f7ff bfa5 	b.w	8008750 <_puts_r>
 8008806:	bf00      	nop
 8008808:	20000060 	.word	0x20000060

0800880c <memset>:
 800880c:	4402      	add	r2, r0
 800880e:	4603      	mov	r3, r0
 8008810:	4293      	cmp	r3, r2
 8008812:	d100      	bne.n	8008816 <memset+0xa>
 8008814:	4770      	bx	lr
 8008816:	f803 1b01 	strb.w	r1, [r3], #1
 800881a:	e7f9      	b.n	8008810 <memset+0x4>

0800881c <__errno>:
 800881c:	4b01      	ldr	r3, [pc, #4]	@ (8008824 <__errno+0x8>)
 800881e:	6818      	ldr	r0, [r3, #0]
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	20000060 	.word	0x20000060

08008828 <__libc_init_array>:
 8008828:	b570      	push	{r4, r5, r6, lr}
 800882a:	4d0d      	ldr	r5, [pc, #52]	@ (8008860 <__libc_init_array+0x38>)
 800882c:	4c0d      	ldr	r4, [pc, #52]	@ (8008864 <__libc_init_array+0x3c>)
 800882e:	1b64      	subs	r4, r4, r5
 8008830:	10a4      	asrs	r4, r4, #2
 8008832:	2600      	movs	r6, #0
 8008834:	42a6      	cmp	r6, r4
 8008836:	d109      	bne.n	800884c <__libc_init_array+0x24>
 8008838:	4d0b      	ldr	r5, [pc, #44]	@ (8008868 <__libc_init_array+0x40>)
 800883a:	4c0c      	ldr	r4, [pc, #48]	@ (800886c <__libc_init_array+0x44>)
 800883c:	f000 fe40 	bl	80094c0 <_init>
 8008840:	1b64      	subs	r4, r4, r5
 8008842:	10a4      	asrs	r4, r4, #2
 8008844:	2600      	movs	r6, #0
 8008846:	42a6      	cmp	r6, r4
 8008848:	d105      	bne.n	8008856 <__libc_init_array+0x2e>
 800884a:	bd70      	pop	{r4, r5, r6, pc}
 800884c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008850:	4798      	blx	r3
 8008852:	3601      	adds	r6, #1
 8008854:	e7ee      	b.n	8008834 <__libc_init_array+0xc>
 8008856:	f855 3b04 	ldr.w	r3, [r5], #4
 800885a:	4798      	blx	r3
 800885c:	3601      	adds	r6, #1
 800885e:	e7f2      	b.n	8008846 <__libc_init_array+0x1e>
 8008860:	08009b70 	.word	0x08009b70
 8008864:	08009b70 	.word	0x08009b70
 8008868:	08009b70 	.word	0x08009b70
 800886c:	08009b74 	.word	0x08009b74

08008870 <__retarget_lock_init_recursive>:
 8008870:	4770      	bx	lr

08008872 <__retarget_lock_acquire_recursive>:
 8008872:	4770      	bx	lr

08008874 <__retarget_lock_release_recursive>:
 8008874:	4770      	bx	lr

08008876 <__sfputc_r>:
 8008876:	6893      	ldr	r3, [r2, #8]
 8008878:	3b01      	subs	r3, #1
 800887a:	2b00      	cmp	r3, #0
 800887c:	b410      	push	{r4}
 800887e:	6093      	str	r3, [r2, #8]
 8008880:	da08      	bge.n	8008894 <__sfputc_r+0x1e>
 8008882:	6994      	ldr	r4, [r2, #24]
 8008884:	42a3      	cmp	r3, r4
 8008886:	db01      	blt.n	800888c <__sfputc_r+0x16>
 8008888:	290a      	cmp	r1, #10
 800888a:	d103      	bne.n	8008894 <__sfputc_r+0x1e>
 800888c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008890:	f000 bc5d 	b.w	800914e <__swbuf_r>
 8008894:	6813      	ldr	r3, [r2, #0]
 8008896:	1c58      	adds	r0, r3, #1
 8008898:	6010      	str	r0, [r2, #0]
 800889a:	7019      	strb	r1, [r3, #0]
 800889c:	4608      	mov	r0, r1
 800889e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <__sfputs_r>:
 80088a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088a6:	4606      	mov	r6, r0
 80088a8:	460f      	mov	r7, r1
 80088aa:	4614      	mov	r4, r2
 80088ac:	18d5      	adds	r5, r2, r3
 80088ae:	42ac      	cmp	r4, r5
 80088b0:	d101      	bne.n	80088b6 <__sfputs_r+0x12>
 80088b2:	2000      	movs	r0, #0
 80088b4:	e007      	b.n	80088c6 <__sfputs_r+0x22>
 80088b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ba:	463a      	mov	r2, r7
 80088bc:	4630      	mov	r0, r6
 80088be:	f7ff ffda 	bl	8008876 <__sfputc_r>
 80088c2:	1c43      	adds	r3, r0, #1
 80088c4:	d1f3      	bne.n	80088ae <__sfputs_r+0xa>
 80088c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080088c8 <_vfiprintf_r>:
 80088c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088cc:	460d      	mov	r5, r1
 80088ce:	b09d      	sub	sp, #116	@ 0x74
 80088d0:	4614      	mov	r4, r2
 80088d2:	4698      	mov	r8, r3
 80088d4:	4606      	mov	r6, r0
 80088d6:	b118      	cbz	r0, 80088e0 <_vfiprintf_r+0x18>
 80088d8:	6a03      	ldr	r3, [r0, #32]
 80088da:	b90b      	cbnz	r3, 80088e0 <_vfiprintf_r+0x18>
 80088dc:	f7ff fef0 	bl	80086c0 <__sinit>
 80088e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088e2:	07d9      	lsls	r1, r3, #31
 80088e4:	d405      	bmi.n	80088f2 <_vfiprintf_r+0x2a>
 80088e6:	89ab      	ldrh	r3, [r5, #12]
 80088e8:	059a      	lsls	r2, r3, #22
 80088ea:	d402      	bmi.n	80088f2 <_vfiprintf_r+0x2a>
 80088ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088ee:	f7ff ffc0 	bl	8008872 <__retarget_lock_acquire_recursive>
 80088f2:	89ab      	ldrh	r3, [r5, #12]
 80088f4:	071b      	lsls	r3, r3, #28
 80088f6:	d501      	bpl.n	80088fc <_vfiprintf_r+0x34>
 80088f8:	692b      	ldr	r3, [r5, #16]
 80088fa:	b99b      	cbnz	r3, 8008924 <_vfiprintf_r+0x5c>
 80088fc:	4629      	mov	r1, r5
 80088fe:	4630      	mov	r0, r6
 8008900:	f000 fc64 	bl	80091cc <__swsetup_r>
 8008904:	b170      	cbz	r0, 8008924 <_vfiprintf_r+0x5c>
 8008906:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008908:	07dc      	lsls	r4, r3, #31
 800890a:	d504      	bpl.n	8008916 <_vfiprintf_r+0x4e>
 800890c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008910:	b01d      	add	sp, #116	@ 0x74
 8008912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008916:	89ab      	ldrh	r3, [r5, #12]
 8008918:	0598      	lsls	r0, r3, #22
 800891a:	d4f7      	bmi.n	800890c <_vfiprintf_r+0x44>
 800891c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800891e:	f7ff ffa9 	bl	8008874 <__retarget_lock_release_recursive>
 8008922:	e7f3      	b.n	800890c <_vfiprintf_r+0x44>
 8008924:	2300      	movs	r3, #0
 8008926:	9309      	str	r3, [sp, #36]	@ 0x24
 8008928:	2320      	movs	r3, #32
 800892a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800892e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008932:	2330      	movs	r3, #48	@ 0x30
 8008934:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ae4 <_vfiprintf_r+0x21c>
 8008938:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800893c:	f04f 0901 	mov.w	r9, #1
 8008940:	4623      	mov	r3, r4
 8008942:	469a      	mov	sl, r3
 8008944:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008948:	b10a      	cbz	r2, 800894e <_vfiprintf_r+0x86>
 800894a:	2a25      	cmp	r2, #37	@ 0x25
 800894c:	d1f9      	bne.n	8008942 <_vfiprintf_r+0x7a>
 800894e:	ebba 0b04 	subs.w	fp, sl, r4
 8008952:	d00b      	beq.n	800896c <_vfiprintf_r+0xa4>
 8008954:	465b      	mov	r3, fp
 8008956:	4622      	mov	r2, r4
 8008958:	4629      	mov	r1, r5
 800895a:	4630      	mov	r0, r6
 800895c:	f7ff ffa2 	bl	80088a4 <__sfputs_r>
 8008960:	3001      	adds	r0, #1
 8008962:	f000 80a7 	beq.w	8008ab4 <_vfiprintf_r+0x1ec>
 8008966:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008968:	445a      	add	r2, fp
 800896a:	9209      	str	r2, [sp, #36]	@ 0x24
 800896c:	f89a 3000 	ldrb.w	r3, [sl]
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 809f 	beq.w	8008ab4 <_vfiprintf_r+0x1ec>
 8008976:	2300      	movs	r3, #0
 8008978:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800897c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008980:	f10a 0a01 	add.w	sl, sl, #1
 8008984:	9304      	str	r3, [sp, #16]
 8008986:	9307      	str	r3, [sp, #28]
 8008988:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800898c:	931a      	str	r3, [sp, #104]	@ 0x68
 800898e:	4654      	mov	r4, sl
 8008990:	2205      	movs	r2, #5
 8008992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008996:	4853      	ldr	r0, [pc, #332]	@ (8008ae4 <_vfiprintf_r+0x21c>)
 8008998:	f7f7 fc1a 	bl	80001d0 <memchr>
 800899c:	9a04      	ldr	r2, [sp, #16]
 800899e:	b9d8      	cbnz	r0, 80089d8 <_vfiprintf_r+0x110>
 80089a0:	06d1      	lsls	r1, r2, #27
 80089a2:	bf44      	itt	mi
 80089a4:	2320      	movmi	r3, #32
 80089a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089aa:	0713      	lsls	r3, r2, #28
 80089ac:	bf44      	itt	mi
 80089ae:	232b      	movmi	r3, #43	@ 0x2b
 80089b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089b4:	f89a 3000 	ldrb.w	r3, [sl]
 80089b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80089ba:	d015      	beq.n	80089e8 <_vfiprintf_r+0x120>
 80089bc:	9a07      	ldr	r2, [sp, #28]
 80089be:	4654      	mov	r4, sl
 80089c0:	2000      	movs	r0, #0
 80089c2:	f04f 0c0a 	mov.w	ip, #10
 80089c6:	4621      	mov	r1, r4
 80089c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089cc:	3b30      	subs	r3, #48	@ 0x30
 80089ce:	2b09      	cmp	r3, #9
 80089d0:	d94b      	bls.n	8008a6a <_vfiprintf_r+0x1a2>
 80089d2:	b1b0      	cbz	r0, 8008a02 <_vfiprintf_r+0x13a>
 80089d4:	9207      	str	r2, [sp, #28]
 80089d6:	e014      	b.n	8008a02 <_vfiprintf_r+0x13a>
 80089d8:	eba0 0308 	sub.w	r3, r0, r8
 80089dc:	fa09 f303 	lsl.w	r3, r9, r3
 80089e0:	4313      	orrs	r3, r2
 80089e2:	9304      	str	r3, [sp, #16]
 80089e4:	46a2      	mov	sl, r4
 80089e6:	e7d2      	b.n	800898e <_vfiprintf_r+0xc6>
 80089e8:	9b03      	ldr	r3, [sp, #12]
 80089ea:	1d19      	adds	r1, r3, #4
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	9103      	str	r1, [sp, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	bfbb      	ittet	lt
 80089f4:	425b      	neglt	r3, r3
 80089f6:	f042 0202 	orrlt.w	r2, r2, #2
 80089fa:	9307      	strge	r3, [sp, #28]
 80089fc:	9307      	strlt	r3, [sp, #28]
 80089fe:	bfb8      	it	lt
 8008a00:	9204      	strlt	r2, [sp, #16]
 8008a02:	7823      	ldrb	r3, [r4, #0]
 8008a04:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a06:	d10a      	bne.n	8008a1e <_vfiprintf_r+0x156>
 8008a08:	7863      	ldrb	r3, [r4, #1]
 8008a0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a0c:	d132      	bne.n	8008a74 <_vfiprintf_r+0x1ac>
 8008a0e:	9b03      	ldr	r3, [sp, #12]
 8008a10:	1d1a      	adds	r2, r3, #4
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	9203      	str	r2, [sp, #12]
 8008a16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a1a:	3402      	adds	r4, #2
 8008a1c:	9305      	str	r3, [sp, #20]
 8008a1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008af4 <_vfiprintf_r+0x22c>
 8008a22:	7821      	ldrb	r1, [r4, #0]
 8008a24:	2203      	movs	r2, #3
 8008a26:	4650      	mov	r0, sl
 8008a28:	f7f7 fbd2 	bl	80001d0 <memchr>
 8008a2c:	b138      	cbz	r0, 8008a3e <_vfiprintf_r+0x176>
 8008a2e:	9b04      	ldr	r3, [sp, #16]
 8008a30:	eba0 000a 	sub.w	r0, r0, sl
 8008a34:	2240      	movs	r2, #64	@ 0x40
 8008a36:	4082      	lsls	r2, r0
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	3401      	adds	r4, #1
 8008a3c:	9304      	str	r3, [sp, #16]
 8008a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a42:	4829      	ldr	r0, [pc, #164]	@ (8008ae8 <_vfiprintf_r+0x220>)
 8008a44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a48:	2206      	movs	r2, #6
 8008a4a:	f7f7 fbc1 	bl	80001d0 <memchr>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d03f      	beq.n	8008ad2 <_vfiprintf_r+0x20a>
 8008a52:	4b26      	ldr	r3, [pc, #152]	@ (8008aec <_vfiprintf_r+0x224>)
 8008a54:	bb1b      	cbnz	r3, 8008a9e <_vfiprintf_r+0x1d6>
 8008a56:	9b03      	ldr	r3, [sp, #12]
 8008a58:	3307      	adds	r3, #7
 8008a5a:	f023 0307 	bic.w	r3, r3, #7
 8008a5e:	3308      	adds	r3, #8
 8008a60:	9303      	str	r3, [sp, #12]
 8008a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a64:	443b      	add	r3, r7
 8008a66:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a68:	e76a      	b.n	8008940 <_vfiprintf_r+0x78>
 8008a6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a6e:	460c      	mov	r4, r1
 8008a70:	2001      	movs	r0, #1
 8008a72:	e7a8      	b.n	80089c6 <_vfiprintf_r+0xfe>
 8008a74:	2300      	movs	r3, #0
 8008a76:	3401      	adds	r4, #1
 8008a78:	9305      	str	r3, [sp, #20]
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	f04f 0c0a 	mov.w	ip, #10
 8008a80:	4620      	mov	r0, r4
 8008a82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a86:	3a30      	subs	r2, #48	@ 0x30
 8008a88:	2a09      	cmp	r2, #9
 8008a8a:	d903      	bls.n	8008a94 <_vfiprintf_r+0x1cc>
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d0c6      	beq.n	8008a1e <_vfiprintf_r+0x156>
 8008a90:	9105      	str	r1, [sp, #20]
 8008a92:	e7c4      	b.n	8008a1e <_vfiprintf_r+0x156>
 8008a94:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a98:	4604      	mov	r4, r0
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e7f0      	b.n	8008a80 <_vfiprintf_r+0x1b8>
 8008a9e:	ab03      	add	r3, sp, #12
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	462a      	mov	r2, r5
 8008aa4:	4b12      	ldr	r3, [pc, #72]	@ (8008af0 <_vfiprintf_r+0x228>)
 8008aa6:	a904      	add	r1, sp, #16
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f3af 8000 	nop.w
 8008aae:	4607      	mov	r7, r0
 8008ab0:	1c78      	adds	r0, r7, #1
 8008ab2:	d1d6      	bne.n	8008a62 <_vfiprintf_r+0x19a>
 8008ab4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ab6:	07d9      	lsls	r1, r3, #31
 8008ab8:	d405      	bmi.n	8008ac6 <_vfiprintf_r+0x1fe>
 8008aba:	89ab      	ldrh	r3, [r5, #12]
 8008abc:	059a      	lsls	r2, r3, #22
 8008abe:	d402      	bmi.n	8008ac6 <_vfiprintf_r+0x1fe>
 8008ac0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ac2:	f7ff fed7 	bl	8008874 <__retarget_lock_release_recursive>
 8008ac6:	89ab      	ldrh	r3, [r5, #12]
 8008ac8:	065b      	lsls	r3, r3, #25
 8008aca:	f53f af1f 	bmi.w	800890c <_vfiprintf_r+0x44>
 8008ace:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ad0:	e71e      	b.n	8008910 <_vfiprintf_r+0x48>
 8008ad2:	ab03      	add	r3, sp, #12
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	462a      	mov	r2, r5
 8008ad8:	4b05      	ldr	r3, [pc, #20]	@ (8008af0 <_vfiprintf_r+0x228>)
 8008ada:	a904      	add	r1, sp, #16
 8008adc:	4630      	mov	r0, r6
 8008ade:	f000 f91b 	bl	8008d18 <_printf_i>
 8008ae2:	e7e4      	b.n	8008aae <_vfiprintf_r+0x1e6>
 8008ae4:	08009b34 	.word	0x08009b34
 8008ae8:	08009b3e 	.word	0x08009b3e
 8008aec:	00000000 	.word	0x00000000
 8008af0:	080088a5 	.word	0x080088a5
 8008af4:	08009b3a 	.word	0x08009b3a

08008af8 <sbrk_aligned>:
 8008af8:	b570      	push	{r4, r5, r6, lr}
 8008afa:	4e0f      	ldr	r6, [pc, #60]	@ (8008b38 <sbrk_aligned+0x40>)
 8008afc:	460c      	mov	r4, r1
 8008afe:	6831      	ldr	r1, [r6, #0]
 8008b00:	4605      	mov	r5, r0
 8008b02:	b911      	cbnz	r1, 8008b0a <sbrk_aligned+0x12>
 8008b04:	f000 fc70 	bl	80093e8 <_sbrk_r>
 8008b08:	6030      	str	r0, [r6, #0]
 8008b0a:	4621      	mov	r1, r4
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	f000 fc6b 	bl	80093e8 <_sbrk_r>
 8008b12:	1c43      	adds	r3, r0, #1
 8008b14:	d103      	bne.n	8008b1e <sbrk_aligned+0x26>
 8008b16:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	bd70      	pop	{r4, r5, r6, pc}
 8008b1e:	1cc4      	adds	r4, r0, #3
 8008b20:	f024 0403 	bic.w	r4, r4, #3
 8008b24:	42a0      	cmp	r0, r4
 8008b26:	d0f8      	beq.n	8008b1a <sbrk_aligned+0x22>
 8008b28:	1a21      	subs	r1, r4, r0
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	f000 fc5c 	bl	80093e8 <_sbrk_r>
 8008b30:	3001      	adds	r0, #1
 8008b32:	d1f2      	bne.n	8008b1a <sbrk_aligned+0x22>
 8008b34:	e7ef      	b.n	8008b16 <sbrk_aligned+0x1e>
 8008b36:	bf00      	nop
 8008b38:	20003da4 	.word	0x20003da4

08008b3c <_malloc_r>:
 8008b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b40:	1ccd      	adds	r5, r1, #3
 8008b42:	f025 0503 	bic.w	r5, r5, #3
 8008b46:	3508      	adds	r5, #8
 8008b48:	2d0c      	cmp	r5, #12
 8008b4a:	bf38      	it	cc
 8008b4c:	250c      	movcc	r5, #12
 8008b4e:	2d00      	cmp	r5, #0
 8008b50:	4606      	mov	r6, r0
 8008b52:	db01      	blt.n	8008b58 <_malloc_r+0x1c>
 8008b54:	42a9      	cmp	r1, r5
 8008b56:	d904      	bls.n	8008b62 <_malloc_r+0x26>
 8008b58:	230c      	movs	r3, #12
 8008b5a:	6033      	str	r3, [r6, #0]
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c38 <_malloc_r+0xfc>
 8008b66:	f000 faa3 	bl	80090b0 <__malloc_lock>
 8008b6a:	f8d8 3000 	ldr.w	r3, [r8]
 8008b6e:	461c      	mov	r4, r3
 8008b70:	bb44      	cbnz	r4, 8008bc4 <_malloc_r+0x88>
 8008b72:	4629      	mov	r1, r5
 8008b74:	4630      	mov	r0, r6
 8008b76:	f7ff ffbf 	bl	8008af8 <sbrk_aligned>
 8008b7a:	1c43      	adds	r3, r0, #1
 8008b7c:	4604      	mov	r4, r0
 8008b7e:	d158      	bne.n	8008c32 <_malloc_r+0xf6>
 8008b80:	f8d8 4000 	ldr.w	r4, [r8]
 8008b84:	4627      	mov	r7, r4
 8008b86:	2f00      	cmp	r7, #0
 8008b88:	d143      	bne.n	8008c12 <_malloc_r+0xd6>
 8008b8a:	2c00      	cmp	r4, #0
 8008b8c:	d04b      	beq.n	8008c26 <_malloc_r+0xea>
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	4639      	mov	r1, r7
 8008b92:	4630      	mov	r0, r6
 8008b94:	eb04 0903 	add.w	r9, r4, r3
 8008b98:	f000 fc26 	bl	80093e8 <_sbrk_r>
 8008b9c:	4581      	cmp	r9, r0
 8008b9e:	d142      	bne.n	8008c26 <_malloc_r+0xea>
 8008ba0:	6821      	ldr	r1, [r4, #0]
 8008ba2:	1a6d      	subs	r5, r5, r1
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	f7ff ffa6 	bl	8008af8 <sbrk_aligned>
 8008bac:	3001      	adds	r0, #1
 8008bae:	d03a      	beq.n	8008c26 <_malloc_r+0xea>
 8008bb0:	6823      	ldr	r3, [r4, #0]
 8008bb2:	442b      	add	r3, r5
 8008bb4:	6023      	str	r3, [r4, #0]
 8008bb6:	f8d8 3000 	ldr.w	r3, [r8]
 8008bba:	685a      	ldr	r2, [r3, #4]
 8008bbc:	bb62      	cbnz	r2, 8008c18 <_malloc_r+0xdc>
 8008bbe:	f8c8 7000 	str.w	r7, [r8]
 8008bc2:	e00f      	b.n	8008be4 <_malloc_r+0xa8>
 8008bc4:	6822      	ldr	r2, [r4, #0]
 8008bc6:	1b52      	subs	r2, r2, r5
 8008bc8:	d420      	bmi.n	8008c0c <_malloc_r+0xd0>
 8008bca:	2a0b      	cmp	r2, #11
 8008bcc:	d917      	bls.n	8008bfe <_malloc_r+0xc2>
 8008bce:	1961      	adds	r1, r4, r5
 8008bd0:	42a3      	cmp	r3, r4
 8008bd2:	6025      	str	r5, [r4, #0]
 8008bd4:	bf18      	it	ne
 8008bd6:	6059      	strne	r1, [r3, #4]
 8008bd8:	6863      	ldr	r3, [r4, #4]
 8008bda:	bf08      	it	eq
 8008bdc:	f8c8 1000 	streq.w	r1, [r8]
 8008be0:	5162      	str	r2, [r4, r5]
 8008be2:	604b      	str	r3, [r1, #4]
 8008be4:	4630      	mov	r0, r6
 8008be6:	f000 fa69 	bl	80090bc <__malloc_unlock>
 8008bea:	f104 000b 	add.w	r0, r4, #11
 8008bee:	1d23      	adds	r3, r4, #4
 8008bf0:	f020 0007 	bic.w	r0, r0, #7
 8008bf4:	1ac2      	subs	r2, r0, r3
 8008bf6:	bf1c      	itt	ne
 8008bf8:	1a1b      	subne	r3, r3, r0
 8008bfa:	50a3      	strne	r3, [r4, r2]
 8008bfc:	e7af      	b.n	8008b5e <_malloc_r+0x22>
 8008bfe:	6862      	ldr	r2, [r4, #4]
 8008c00:	42a3      	cmp	r3, r4
 8008c02:	bf0c      	ite	eq
 8008c04:	f8c8 2000 	streq.w	r2, [r8]
 8008c08:	605a      	strne	r2, [r3, #4]
 8008c0a:	e7eb      	b.n	8008be4 <_malloc_r+0xa8>
 8008c0c:	4623      	mov	r3, r4
 8008c0e:	6864      	ldr	r4, [r4, #4]
 8008c10:	e7ae      	b.n	8008b70 <_malloc_r+0x34>
 8008c12:	463c      	mov	r4, r7
 8008c14:	687f      	ldr	r7, [r7, #4]
 8008c16:	e7b6      	b.n	8008b86 <_malloc_r+0x4a>
 8008c18:	461a      	mov	r2, r3
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	42a3      	cmp	r3, r4
 8008c1e:	d1fb      	bne.n	8008c18 <_malloc_r+0xdc>
 8008c20:	2300      	movs	r3, #0
 8008c22:	6053      	str	r3, [r2, #4]
 8008c24:	e7de      	b.n	8008be4 <_malloc_r+0xa8>
 8008c26:	230c      	movs	r3, #12
 8008c28:	6033      	str	r3, [r6, #0]
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	f000 fa46 	bl	80090bc <__malloc_unlock>
 8008c30:	e794      	b.n	8008b5c <_malloc_r+0x20>
 8008c32:	6005      	str	r5, [r0, #0]
 8008c34:	e7d6      	b.n	8008be4 <_malloc_r+0xa8>
 8008c36:	bf00      	nop
 8008c38:	20003da8 	.word	0x20003da8

08008c3c <_printf_common>:
 8008c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c40:	4616      	mov	r6, r2
 8008c42:	4698      	mov	r8, r3
 8008c44:	688a      	ldr	r2, [r1, #8]
 8008c46:	690b      	ldr	r3, [r1, #16]
 8008c48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	bfb8      	it	lt
 8008c50:	4613      	movlt	r3, r2
 8008c52:	6033      	str	r3, [r6, #0]
 8008c54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c58:	4607      	mov	r7, r0
 8008c5a:	460c      	mov	r4, r1
 8008c5c:	b10a      	cbz	r2, 8008c62 <_printf_common+0x26>
 8008c5e:	3301      	adds	r3, #1
 8008c60:	6033      	str	r3, [r6, #0]
 8008c62:	6823      	ldr	r3, [r4, #0]
 8008c64:	0699      	lsls	r1, r3, #26
 8008c66:	bf42      	ittt	mi
 8008c68:	6833      	ldrmi	r3, [r6, #0]
 8008c6a:	3302      	addmi	r3, #2
 8008c6c:	6033      	strmi	r3, [r6, #0]
 8008c6e:	6825      	ldr	r5, [r4, #0]
 8008c70:	f015 0506 	ands.w	r5, r5, #6
 8008c74:	d106      	bne.n	8008c84 <_printf_common+0x48>
 8008c76:	f104 0a19 	add.w	sl, r4, #25
 8008c7a:	68e3      	ldr	r3, [r4, #12]
 8008c7c:	6832      	ldr	r2, [r6, #0]
 8008c7e:	1a9b      	subs	r3, r3, r2
 8008c80:	42ab      	cmp	r3, r5
 8008c82:	dc26      	bgt.n	8008cd2 <_printf_common+0x96>
 8008c84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008c88:	6822      	ldr	r2, [r4, #0]
 8008c8a:	3b00      	subs	r3, #0
 8008c8c:	bf18      	it	ne
 8008c8e:	2301      	movne	r3, #1
 8008c90:	0692      	lsls	r2, r2, #26
 8008c92:	d42b      	bmi.n	8008cec <_printf_common+0xb0>
 8008c94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008c98:	4641      	mov	r1, r8
 8008c9a:	4638      	mov	r0, r7
 8008c9c:	47c8      	blx	r9
 8008c9e:	3001      	adds	r0, #1
 8008ca0:	d01e      	beq.n	8008ce0 <_printf_common+0xa4>
 8008ca2:	6823      	ldr	r3, [r4, #0]
 8008ca4:	6922      	ldr	r2, [r4, #16]
 8008ca6:	f003 0306 	and.w	r3, r3, #6
 8008caa:	2b04      	cmp	r3, #4
 8008cac:	bf02      	ittt	eq
 8008cae:	68e5      	ldreq	r5, [r4, #12]
 8008cb0:	6833      	ldreq	r3, [r6, #0]
 8008cb2:	1aed      	subeq	r5, r5, r3
 8008cb4:	68a3      	ldr	r3, [r4, #8]
 8008cb6:	bf0c      	ite	eq
 8008cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cbc:	2500      	movne	r5, #0
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	bfc4      	itt	gt
 8008cc2:	1a9b      	subgt	r3, r3, r2
 8008cc4:	18ed      	addgt	r5, r5, r3
 8008cc6:	2600      	movs	r6, #0
 8008cc8:	341a      	adds	r4, #26
 8008cca:	42b5      	cmp	r5, r6
 8008ccc:	d11a      	bne.n	8008d04 <_printf_common+0xc8>
 8008cce:	2000      	movs	r0, #0
 8008cd0:	e008      	b.n	8008ce4 <_printf_common+0xa8>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	4652      	mov	r2, sl
 8008cd6:	4641      	mov	r1, r8
 8008cd8:	4638      	mov	r0, r7
 8008cda:	47c8      	blx	r9
 8008cdc:	3001      	adds	r0, #1
 8008cde:	d103      	bne.n	8008ce8 <_printf_common+0xac>
 8008ce0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce8:	3501      	adds	r5, #1
 8008cea:	e7c6      	b.n	8008c7a <_printf_common+0x3e>
 8008cec:	18e1      	adds	r1, r4, r3
 8008cee:	1c5a      	adds	r2, r3, #1
 8008cf0:	2030      	movs	r0, #48	@ 0x30
 8008cf2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008cf6:	4422      	add	r2, r4
 8008cf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008cfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d00:	3302      	adds	r3, #2
 8008d02:	e7c7      	b.n	8008c94 <_printf_common+0x58>
 8008d04:	2301      	movs	r3, #1
 8008d06:	4622      	mov	r2, r4
 8008d08:	4641      	mov	r1, r8
 8008d0a:	4638      	mov	r0, r7
 8008d0c:	47c8      	blx	r9
 8008d0e:	3001      	adds	r0, #1
 8008d10:	d0e6      	beq.n	8008ce0 <_printf_common+0xa4>
 8008d12:	3601      	adds	r6, #1
 8008d14:	e7d9      	b.n	8008cca <_printf_common+0x8e>
	...

08008d18 <_printf_i>:
 8008d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d1c:	7e0f      	ldrb	r7, [r1, #24]
 8008d1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d20:	2f78      	cmp	r7, #120	@ 0x78
 8008d22:	4691      	mov	r9, r2
 8008d24:	4680      	mov	r8, r0
 8008d26:	460c      	mov	r4, r1
 8008d28:	469a      	mov	sl, r3
 8008d2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d2e:	d807      	bhi.n	8008d40 <_printf_i+0x28>
 8008d30:	2f62      	cmp	r7, #98	@ 0x62
 8008d32:	d80a      	bhi.n	8008d4a <_printf_i+0x32>
 8008d34:	2f00      	cmp	r7, #0
 8008d36:	f000 80d2 	beq.w	8008ede <_printf_i+0x1c6>
 8008d3a:	2f58      	cmp	r7, #88	@ 0x58
 8008d3c:	f000 80b9 	beq.w	8008eb2 <_printf_i+0x19a>
 8008d40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d48:	e03a      	b.n	8008dc0 <_printf_i+0xa8>
 8008d4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d4e:	2b15      	cmp	r3, #21
 8008d50:	d8f6      	bhi.n	8008d40 <_printf_i+0x28>
 8008d52:	a101      	add	r1, pc, #4	@ (adr r1, 8008d58 <_printf_i+0x40>)
 8008d54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d58:	08008db1 	.word	0x08008db1
 8008d5c:	08008dc5 	.word	0x08008dc5
 8008d60:	08008d41 	.word	0x08008d41
 8008d64:	08008d41 	.word	0x08008d41
 8008d68:	08008d41 	.word	0x08008d41
 8008d6c:	08008d41 	.word	0x08008d41
 8008d70:	08008dc5 	.word	0x08008dc5
 8008d74:	08008d41 	.word	0x08008d41
 8008d78:	08008d41 	.word	0x08008d41
 8008d7c:	08008d41 	.word	0x08008d41
 8008d80:	08008d41 	.word	0x08008d41
 8008d84:	08008ec5 	.word	0x08008ec5
 8008d88:	08008def 	.word	0x08008def
 8008d8c:	08008e7f 	.word	0x08008e7f
 8008d90:	08008d41 	.word	0x08008d41
 8008d94:	08008d41 	.word	0x08008d41
 8008d98:	08008ee7 	.word	0x08008ee7
 8008d9c:	08008d41 	.word	0x08008d41
 8008da0:	08008def 	.word	0x08008def
 8008da4:	08008d41 	.word	0x08008d41
 8008da8:	08008d41 	.word	0x08008d41
 8008dac:	08008e87 	.word	0x08008e87
 8008db0:	6833      	ldr	r3, [r6, #0]
 8008db2:	1d1a      	adds	r2, r3, #4
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6032      	str	r2, [r6, #0]
 8008db8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008dbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e09d      	b.n	8008f00 <_printf_i+0x1e8>
 8008dc4:	6833      	ldr	r3, [r6, #0]
 8008dc6:	6820      	ldr	r0, [r4, #0]
 8008dc8:	1d19      	adds	r1, r3, #4
 8008dca:	6031      	str	r1, [r6, #0]
 8008dcc:	0606      	lsls	r6, r0, #24
 8008dce:	d501      	bpl.n	8008dd4 <_printf_i+0xbc>
 8008dd0:	681d      	ldr	r5, [r3, #0]
 8008dd2:	e003      	b.n	8008ddc <_printf_i+0xc4>
 8008dd4:	0645      	lsls	r5, r0, #25
 8008dd6:	d5fb      	bpl.n	8008dd0 <_printf_i+0xb8>
 8008dd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ddc:	2d00      	cmp	r5, #0
 8008dde:	da03      	bge.n	8008de8 <_printf_i+0xd0>
 8008de0:	232d      	movs	r3, #45	@ 0x2d
 8008de2:	426d      	negs	r5, r5
 8008de4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008de8:	4859      	ldr	r0, [pc, #356]	@ (8008f50 <_printf_i+0x238>)
 8008dea:	230a      	movs	r3, #10
 8008dec:	e011      	b.n	8008e12 <_printf_i+0xfa>
 8008dee:	6821      	ldr	r1, [r4, #0]
 8008df0:	6833      	ldr	r3, [r6, #0]
 8008df2:	0608      	lsls	r0, r1, #24
 8008df4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008df8:	d402      	bmi.n	8008e00 <_printf_i+0xe8>
 8008dfa:	0649      	lsls	r1, r1, #25
 8008dfc:	bf48      	it	mi
 8008dfe:	b2ad      	uxthmi	r5, r5
 8008e00:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e02:	4853      	ldr	r0, [pc, #332]	@ (8008f50 <_printf_i+0x238>)
 8008e04:	6033      	str	r3, [r6, #0]
 8008e06:	bf14      	ite	ne
 8008e08:	230a      	movne	r3, #10
 8008e0a:	2308      	moveq	r3, #8
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e12:	6866      	ldr	r6, [r4, #4]
 8008e14:	60a6      	str	r6, [r4, #8]
 8008e16:	2e00      	cmp	r6, #0
 8008e18:	bfa2      	ittt	ge
 8008e1a:	6821      	ldrge	r1, [r4, #0]
 8008e1c:	f021 0104 	bicge.w	r1, r1, #4
 8008e20:	6021      	strge	r1, [r4, #0]
 8008e22:	b90d      	cbnz	r5, 8008e28 <_printf_i+0x110>
 8008e24:	2e00      	cmp	r6, #0
 8008e26:	d04b      	beq.n	8008ec0 <_printf_i+0x1a8>
 8008e28:	4616      	mov	r6, r2
 8008e2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e2e:	fb03 5711 	mls	r7, r3, r1, r5
 8008e32:	5dc7      	ldrb	r7, [r0, r7]
 8008e34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e38:	462f      	mov	r7, r5
 8008e3a:	42bb      	cmp	r3, r7
 8008e3c:	460d      	mov	r5, r1
 8008e3e:	d9f4      	bls.n	8008e2a <_printf_i+0x112>
 8008e40:	2b08      	cmp	r3, #8
 8008e42:	d10b      	bne.n	8008e5c <_printf_i+0x144>
 8008e44:	6823      	ldr	r3, [r4, #0]
 8008e46:	07df      	lsls	r7, r3, #31
 8008e48:	d508      	bpl.n	8008e5c <_printf_i+0x144>
 8008e4a:	6923      	ldr	r3, [r4, #16]
 8008e4c:	6861      	ldr	r1, [r4, #4]
 8008e4e:	4299      	cmp	r1, r3
 8008e50:	bfde      	ittt	le
 8008e52:	2330      	movle	r3, #48	@ 0x30
 8008e54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e58:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008e5c:	1b92      	subs	r2, r2, r6
 8008e5e:	6122      	str	r2, [r4, #16]
 8008e60:	f8cd a000 	str.w	sl, [sp]
 8008e64:	464b      	mov	r3, r9
 8008e66:	aa03      	add	r2, sp, #12
 8008e68:	4621      	mov	r1, r4
 8008e6a:	4640      	mov	r0, r8
 8008e6c:	f7ff fee6 	bl	8008c3c <_printf_common>
 8008e70:	3001      	adds	r0, #1
 8008e72:	d14a      	bne.n	8008f0a <_printf_i+0x1f2>
 8008e74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e78:	b004      	add	sp, #16
 8008e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e7e:	6823      	ldr	r3, [r4, #0]
 8008e80:	f043 0320 	orr.w	r3, r3, #32
 8008e84:	6023      	str	r3, [r4, #0]
 8008e86:	4833      	ldr	r0, [pc, #204]	@ (8008f54 <_printf_i+0x23c>)
 8008e88:	2778      	movs	r7, #120	@ 0x78
 8008e8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	6831      	ldr	r1, [r6, #0]
 8008e92:	061f      	lsls	r7, r3, #24
 8008e94:	f851 5b04 	ldr.w	r5, [r1], #4
 8008e98:	d402      	bmi.n	8008ea0 <_printf_i+0x188>
 8008e9a:	065f      	lsls	r7, r3, #25
 8008e9c:	bf48      	it	mi
 8008e9e:	b2ad      	uxthmi	r5, r5
 8008ea0:	6031      	str	r1, [r6, #0]
 8008ea2:	07d9      	lsls	r1, r3, #31
 8008ea4:	bf44      	itt	mi
 8008ea6:	f043 0320 	orrmi.w	r3, r3, #32
 8008eaa:	6023      	strmi	r3, [r4, #0]
 8008eac:	b11d      	cbz	r5, 8008eb6 <_printf_i+0x19e>
 8008eae:	2310      	movs	r3, #16
 8008eb0:	e7ac      	b.n	8008e0c <_printf_i+0xf4>
 8008eb2:	4827      	ldr	r0, [pc, #156]	@ (8008f50 <_printf_i+0x238>)
 8008eb4:	e7e9      	b.n	8008e8a <_printf_i+0x172>
 8008eb6:	6823      	ldr	r3, [r4, #0]
 8008eb8:	f023 0320 	bic.w	r3, r3, #32
 8008ebc:	6023      	str	r3, [r4, #0]
 8008ebe:	e7f6      	b.n	8008eae <_printf_i+0x196>
 8008ec0:	4616      	mov	r6, r2
 8008ec2:	e7bd      	b.n	8008e40 <_printf_i+0x128>
 8008ec4:	6833      	ldr	r3, [r6, #0]
 8008ec6:	6825      	ldr	r5, [r4, #0]
 8008ec8:	6961      	ldr	r1, [r4, #20]
 8008eca:	1d18      	adds	r0, r3, #4
 8008ecc:	6030      	str	r0, [r6, #0]
 8008ece:	062e      	lsls	r6, r5, #24
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	d501      	bpl.n	8008ed8 <_printf_i+0x1c0>
 8008ed4:	6019      	str	r1, [r3, #0]
 8008ed6:	e002      	b.n	8008ede <_printf_i+0x1c6>
 8008ed8:	0668      	lsls	r0, r5, #25
 8008eda:	d5fb      	bpl.n	8008ed4 <_printf_i+0x1bc>
 8008edc:	8019      	strh	r1, [r3, #0]
 8008ede:	2300      	movs	r3, #0
 8008ee0:	6123      	str	r3, [r4, #16]
 8008ee2:	4616      	mov	r6, r2
 8008ee4:	e7bc      	b.n	8008e60 <_printf_i+0x148>
 8008ee6:	6833      	ldr	r3, [r6, #0]
 8008ee8:	1d1a      	adds	r2, r3, #4
 8008eea:	6032      	str	r2, [r6, #0]
 8008eec:	681e      	ldr	r6, [r3, #0]
 8008eee:	6862      	ldr	r2, [r4, #4]
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	f7f7 f96c 	bl	80001d0 <memchr>
 8008ef8:	b108      	cbz	r0, 8008efe <_printf_i+0x1e6>
 8008efa:	1b80      	subs	r0, r0, r6
 8008efc:	6060      	str	r0, [r4, #4]
 8008efe:	6863      	ldr	r3, [r4, #4]
 8008f00:	6123      	str	r3, [r4, #16]
 8008f02:	2300      	movs	r3, #0
 8008f04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f08:	e7aa      	b.n	8008e60 <_printf_i+0x148>
 8008f0a:	6923      	ldr	r3, [r4, #16]
 8008f0c:	4632      	mov	r2, r6
 8008f0e:	4649      	mov	r1, r9
 8008f10:	4640      	mov	r0, r8
 8008f12:	47d0      	blx	sl
 8008f14:	3001      	adds	r0, #1
 8008f16:	d0ad      	beq.n	8008e74 <_printf_i+0x15c>
 8008f18:	6823      	ldr	r3, [r4, #0]
 8008f1a:	079b      	lsls	r3, r3, #30
 8008f1c:	d413      	bmi.n	8008f46 <_printf_i+0x22e>
 8008f1e:	68e0      	ldr	r0, [r4, #12]
 8008f20:	9b03      	ldr	r3, [sp, #12]
 8008f22:	4298      	cmp	r0, r3
 8008f24:	bfb8      	it	lt
 8008f26:	4618      	movlt	r0, r3
 8008f28:	e7a6      	b.n	8008e78 <_printf_i+0x160>
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	4632      	mov	r2, r6
 8008f2e:	4649      	mov	r1, r9
 8008f30:	4640      	mov	r0, r8
 8008f32:	47d0      	blx	sl
 8008f34:	3001      	adds	r0, #1
 8008f36:	d09d      	beq.n	8008e74 <_printf_i+0x15c>
 8008f38:	3501      	adds	r5, #1
 8008f3a:	68e3      	ldr	r3, [r4, #12]
 8008f3c:	9903      	ldr	r1, [sp, #12]
 8008f3e:	1a5b      	subs	r3, r3, r1
 8008f40:	42ab      	cmp	r3, r5
 8008f42:	dcf2      	bgt.n	8008f2a <_printf_i+0x212>
 8008f44:	e7eb      	b.n	8008f1e <_printf_i+0x206>
 8008f46:	2500      	movs	r5, #0
 8008f48:	f104 0619 	add.w	r6, r4, #25
 8008f4c:	e7f5      	b.n	8008f3a <_printf_i+0x222>
 8008f4e:	bf00      	nop
 8008f50:	08009b45 	.word	0x08009b45
 8008f54:	08009b56 	.word	0x08009b56

08008f58 <__sflush_r>:
 8008f58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f60:	0716      	lsls	r6, r2, #28
 8008f62:	4605      	mov	r5, r0
 8008f64:	460c      	mov	r4, r1
 8008f66:	d454      	bmi.n	8009012 <__sflush_r+0xba>
 8008f68:	684b      	ldr	r3, [r1, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	dc02      	bgt.n	8008f74 <__sflush_r+0x1c>
 8008f6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	dd48      	ble.n	8009006 <__sflush_r+0xae>
 8008f74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f76:	2e00      	cmp	r6, #0
 8008f78:	d045      	beq.n	8009006 <__sflush_r+0xae>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f80:	682f      	ldr	r7, [r5, #0]
 8008f82:	6a21      	ldr	r1, [r4, #32]
 8008f84:	602b      	str	r3, [r5, #0]
 8008f86:	d030      	beq.n	8008fea <__sflush_r+0x92>
 8008f88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	0759      	lsls	r1, r3, #29
 8008f8e:	d505      	bpl.n	8008f9c <__sflush_r+0x44>
 8008f90:	6863      	ldr	r3, [r4, #4]
 8008f92:	1ad2      	subs	r2, r2, r3
 8008f94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f96:	b10b      	cbz	r3, 8008f9c <__sflush_r+0x44>
 8008f98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f9a:	1ad2      	subs	r2, r2, r3
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fa0:	6a21      	ldr	r1, [r4, #32]
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	47b0      	blx	r6
 8008fa6:	1c43      	adds	r3, r0, #1
 8008fa8:	89a3      	ldrh	r3, [r4, #12]
 8008faa:	d106      	bne.n	8008fba <__sflush_r+0x62>
 8008fac:	6829      	ldr	r1, [r5, #0]
 8008fae:	291d      	cmp	r1, #29
 8008fb0:	d82b      	bhi.n	800900a <__sflush_r+0xb2>
 8008fb2:	4a2a      	ldr	r2, [pc, #168]	@ (800905c <__sflush_r+0x104>)
 8008fb4:	410a      	asrs	r2, r1
 8008fb6:	07d6      	lsls	r6, r2, #31
 8008fb8:	d427      	bmi.n	800900a <__sflush_r+0xb2>
 8008fba:	2200      	movs	r2, #0
 8008fbc:	6062      	str	r2, [r4, #4]
 8008fbe:	04d9      	lsls	r1, r3, #19
 8008fc0:	6922      	ldr	r2, [r4, #16]
 8008fc2:	6022      	str	r2, [r4, #0]
 8008fc4:	d504      	bpl.n	8008fd0 <__sflush_r+0x78>
 8008fc6:	1c42      	adds	r2, r0, #1
 8008fc8:	d101      	bne.n	8008fce <__sflush_r+0x76>
 8008fca:	682b      	ldr	r3, [r5, #0]
 8008fcc:	b903      	cbnz	r3, 8008fd0 <__sflush_r+0x78>
 8008fce:	6560      	str	r0, [r4, #84]	@ 0x54
 8008fd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fd2:	602f      	str	r7, [r5, #0]
 8008fd4:	b1b9      	cbz	r1, 8009006 <__sflush_r+0xae>
 8008fd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fda:	4299      	cmp	r1, r3
 8008fdc:	d002      	beq.n	8008fe4 <__sflush_r+0x8c>
 8008fde:	4628      	mov	r0, r5
 8008fe0:	f000 fa24 	bl	800942c <_free_r>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fe8:	e00d      	b.n	8009006 <__sflush_r+0xae>
 8008fea:	2301      	movs	r3, #1
 8008fec:	4628      	mov	r0, r5
 8008fee:	47b0      	blx	r6
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	1c50      	adds	r0, r2, #1
 8008ff4:	d1c9      	bne.n	8008f8a <__sflush_r+0x32>
 8008ff6:	682b      	ldr	r3, [r5, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d0c6      	beq.n	8008f8a <__sflush_r+0x32>
 8008ffc:	2b1d      	cmp	r3, #29
 8008ffe:	d001      	beq.n	8009004 <__sflush_r+0xac>
 8009000:	2b16      	cmp	r3, #22
 8009002:	d11e      	bne.n	8009042 <__sflush_r+0xea>
 8009004:	602f      	str	r7, [r5, #0]
 8009006:	2000      	movs	r0, #0
 8009008:	e022      	b.n	8009050 <__sflush_r+0xf8>
 800900a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800900e:	b21b      	sxth	r3, r3
 8009010:	e01b      	b.n	800904a <__sflush_r+0xf2>
 8009012:	690f      	ldr	r7, [r1, #16]
 8009014:	2f00      	cmp	r7, #0
 8009016:	d0f6      	beq.n	8009006 <__sflush_r+0xae>
 8009018:	0793      	lsls	r3, r2, #30
 800901a:	680e      	ldr	r6, [r1, #0]
 800901c:	bf08      	it	eq
 800901e:	694b      	ldreq	r3, [r1, #20]
 8009020:	600f      	str	r7, [r1, #0]
 8009022:	bf18      	it	ne
 8009024:	2300      	movne	r3, #0
 8009026:	eba6 0807 	sub.w	r8, r6, r7
 800902a:	608b      	str	r3, [r1, #8]
 800902c:	f1b8 0f00 	cmp.w	r8, #0
 8009030:	dde9      	ble.n	8009006 <__sflush_r+0xae>
 8009032:	6a21      	ldr	r1, [r4, #32]
 8009034:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009036:	4643      	mov	r3, r8
 8009038:	463a      	mov	r2, r7
 800903a:	4628      	mov	r0, r5
 800903c:	47b0      	blx	r6
 800903e:	2800      	cmp	r0, #0
 8009040:	dc08      	bgt.n	8009054 <__sflush_r+0xfc>
 8009042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009046:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800904a:	81a3      	strh	r3, [r4, #12]
 800904c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009054:	4407      	add	r7, r0
 8009056:	eba8 0800 	sub.w	r8, r8, r0
 800905a:	e7e7      	b.n	800902c <__sflush_r+0xd4>
 800905c:	dfbffffe 	.word	0xdfbffffe

08009060 <_fflush_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	690b      	ldr	r3, [r1, #16]
 8009064:	4605      	mov	r5, r0
 8009066:	460c      	mov	r4, r1
 8009068:	b913      	cbnz	r3, 8009070 <_fflush_r+0x10>
 800906a:	2500      	movs	r5, #0
 800906c:	4628      	mov	r0, r5
 800906e:	bd38      	pop	{r3, r4, r5, pc}
 8009070:	b118      	cbz	r0, 800907a <_fflush_r+0x1a>
 8009072:	6a03      	ldr	r3, [r0, #32]
 8009074:	b90b      	cbnz	r3, 800907a <_fflush_r+0x1a>
 8009076:	f7ff fb23 	bl	80086c0 <__sinit>
 800907a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d0f3      	beq.n	800906a <_fflush_r+0xa>
 8009082:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009084:	07d0      	lsls	r0, r2, #31
 8009086:	d404      	bmi.n	8009092 <_fflush_r+0x32>
 8009088:	0599      	lsls	r1, r3, #22
 800908a:	d402      	bmi.n	8009092 <_fflush_r+0x32>
 800908c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800908e:	f7ff fbf0 	bl	8008872 <__retarget_lock_acquire_recursive>
 8009092:	4628      	mov	r0, r5
 8009094:	4621      	mov	r1, r4
 8009096:	f7ff ff5f 	bl	8008f58 <__sflush_r>
 800909a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800909c:	07da      	lsls	r2, r3, #31
 800909e:	4605      	mov	r5, r0
 80090a0:	d4e4      	bmi.n	800906c <_fflush_r+0xc>
 80090a2:	89a3      	ldrh	r3, [r4, #12]
 80090a4:	059b      	lsls	r3, r3, #22
 80090a6:	d4e1      	bmi.n	800906c <_fflush_r+0xc>
 80090a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090aa:	f7ff fbe3 	bl	8008874 <__retarget_lock_release_recursive>
 80090ae:	e7dd      	b.n	800906c <_fflush_r+0xc>

080090b0 <__malloc_lock>:
 80090b0:	4801      	ldr	r0, [pc, #4]	@ (80090b8 <__malloc_lock+0x8>)
 80090b2:	f7ff bbde 	b.w	8008872 <__retarget_lock_acquire_recursive>
 80090b6:	bf00      	nop
 80090b8:	20003da0 	.word	0x20003da0

080090bc <__malloc_unlock>:
 80090bc:	4801      	ldr	r0, [pc, #4]	@ (80090c4 <__malloc_unlock+0x8>)
 80090be:	f7ff bbd9 	b.w	8008874 <__retarget_lock_release_recursive>
 80090c2:	bf00      	nop
 80090c4:	20003da0 	.word	0x20003da0

080090c8 <__sread>:
 80090c8:	b510      	push	{r4, lr}
 80090ca:	460c      	mov	r4, r1
 80090cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090d0:	f000 f978 	bl	80093c4 <_read_r>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	bfab      	itete	ge
 80090d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80090da:	89a3      	ldrhlt	r3, [r4, #12]
 80090dc:	181b      	addge	r3, r3, r0
 80090de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80090e2:	bfac      	ite	ge
 80090e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80090e6:	81a3      	strhlt	r3, [r4, #12]
 80090e8:	bd10      	pop	{r4, pc}

080090ea <__swrite>:
 80090ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ee:	461f      	mov	r7, r3
 80090f0:	898b      	ldrh	r3, [r1, #12]
 80090f2:	05db      	lsls	r3, r3, #23
 80090f4:	4605      	mov	r5, r0
 80090f6:	460c      	mov	r4, r1
 80090f8:	4616      	mov	r6, r2
 80090fa:	d505      	bpl.n	8009108 <__swrite+0x1e>
 80090fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009100:	2302      	movs	r3, #2
 8009102:	2200      	movs	r2, #0
 8009104:	f000 f94c 	bl	80093a0 <_lseek_r>
 8009108:	89a3      	ldrh	r3, [r4, #12]
 800910a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800910e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009112:	81a3      	strh	r3, [r4, #12]
 8009114:	4632      	mov	r2, r6
 8009116:	463b      	mov	r3, r7
 8009118:	4628      	mov	r0, r5
 800911a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800911e:	f000 b973 	b.w	8009408 <_write_r>

08009122 <__sseek>:
 8009122:	b510      	push	{r4, lr}
 8009124:	460c      	mov	r4, r1
 8009126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800912a:	f000 f939 	bl	80093a0 <_lseek_r>
 800912e:	1c43      	adds	r3, r0, #1
 8009130:	89a3      	ldrh	r3, [r4, #12]
 8009132:	bf15      	itete	ne
 8009134:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009136:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800913a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800913e:	81a3      	strheq	r3, [r4, #12]
 8009140:	bf18      	it	ne
 8009142:	81a3      	strhne	r3, [r4, #12]
 8009144:	bd10      	pop	{r4, pc}

08009146 <__sclose>:
 8009146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800914a:	f000 b8f7 	b.w	800933c <_close_r>

0800914e <__swbuf_r>:
 800914e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009150:	460e      	mov	r6, r1
 8009152:	4614      	mov	r4, r2
 8009154:	4605      	mov	r5, r0
 8009156:	b118      	cbz	r0, 8009160 <__swbuf_r+0x12>
 8009158:	6a03      	ldr	r3, [r0, #32]
 800915a:	b90b      	cbnz	r3, 8009160 <__swbuf_r+0x12>
 800915c:	f7ff fab0 	bl	80086c0 <__sinit>
 8009160:	69a3      	ldr	r3, [r4, #24]
 8009162:	60a3      	str	r3, [r4, #8]
 8009164:	89a3      	ldrh	r3, [r4, #12]
 8009166:	071a      	lsls	r2, r3, #28
 8009168:	d501      	bpl.n	800916e <__swbuf_r+0x20>
 800916a:	6923      	ldr	r3, [r4, #16]
 800916c:	b943      	cbnz	r3, 8009180 <__swbuf_r+0x32>
 800916e:	4621      	mov	r1, r4
 8009170:	4628      	mov	r0, r5
 8009172:	f000 f82b 	bl	80091cc <__swsetup_r>
 8009176:	b118      	cbz	r0, 8009180 <__swbuf_r+0x32>
 8009178:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800917c:	4638      	mov	r0, r7
 800917e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009180:	6823      	ldr	r3, [r4, #0]
 8009182:	6922      	ldr	r2, [r4, #16]
 8009184:	1a98      	subs	r0, r3, r2
 8009186:	6963      	ldr	r3, [r4, #20]
 8009188:	b2f6      	uxtb	r6, r6
 800918a:	4283      	cmp	r3, r0
 800918c:	4637      	mov	r7, r6
 800918e:	dc05      	bgt.n	800919c <__swbuf_r+0x4e>
 8009190:	4621      	mov	r1, r4
 8009192:	4628      	mov	r0, r5
 8009194:	f7ff ff64 	bl	8009060 <_fflush_r>
 8009198:	2800      	cmp	r0, #0
 800919a:	d1ed      	bne.n	8009178 <__swbuf_r+0x2a>
 800919c:	68a3      	ldr	r3, [r4, #8]
 800919e:	3b01      	subs	r3, #1
 80091a0:	60a3      	str	r3, [r4, #8]
 80091a2:	6823      	ldr	r3, [r4, #0]
 80091a4:	1c5a      	adds	r2, r3, #1
 80091a6:	6022      	str	r2, [r4, #0]
 80091a8:	701e      	strb	r6, [r3, #0]
 80091aa:	6962      	ldr	r2, [r4, #20]
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d004      	beq.n	80091bc <__swbuf_r+0x6e>
 80091b2:	89a3      	ldrh	r3, [r4, #12]
 80091b4:	07db      	lsls	r3, r3, #31
 80091b6:	d5e1      	bpl.n	800917c <__swbuf_r+0x2e>
 80091b8:	2e0a      	cmp	r6, #10
 80091ba:	d1df      	bne.n	800917c <__swbuf_r+0x2e>
 80091bc:	4621      	mov	r1, r4
 80091be:	4628      	mov	r0, r5
 80091c0:	f7ff ff4e 	bl	8009060 <_fflush_r>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	d0d9      	beq.n	800917c <__swbuf_r+0x2e>
 80091c8:	e7d6      	b.n	8009178 <__swbuf_r+0x2a>
	...

080091cc <__swsetup_r>:
 80091cc:	b538      	push	{r3, r4, r5, lr}
 80091ce:	4b29      	ldr	r3, [pc, #164]	@ (8009274 <__swsetup_r+0xa8>)
 80091d0:	4605      	mov	r5, r0
 80091d2:	6818      	ldr	r0, [r3, #0]
 80091d4:	460c      	mov	r4, r1
 80091d6:	b118      	cbz	r0, 80091e0 <__swsetup_r+0x14>
 80091d8:	6a03      	ldr	r3, [r0, #32]
 80091da:	b90b      	cbnz	r3, 80091e0 <__swsetup_r+0x14>
 80091dc:	f7ff fa70 	bl	80086c0 <__sinit>
 80091e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091e4:	0719      	lsls	r1, r3, #28
 80091e6:	d422      	bmi.n	800922e <__swsetup_r+0x62>
 80091e8:	06da      	lsls	r2, r3, #27
 80091ea:	d407      	bmi.n	80091fc <__swsetup_r+0x30>
 80091ec:	2209      	movs	r2, #9
 80091ee:	602a      	str	r2, [r5, #0]
 80091f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091f4:	81a3      	strh	r3, [r4, #12]
 80091f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80091fa:	e033      	b.n	8009264 <__swsetup_r+0x98>
 80091fc:	0758      	lsls	r0, r3, #29
 80091fe:	d512      	bpl.n	8009226 <__swsetup_r+0x5a>
 8009200:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009202:	b141      	cbz	r1, 8009216 <__swsetup_r+0x4a>
 8009204:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009208:	4299      	cmp	r1, r3
 800920a:	d002      	beq.n	8009212 <__swsetup_r+0x46>
 800920c:	4628      	mov	r0, r5
 800920e:	f000 f90d 	bl	800942c <_free_r>
 8009212:	2300      	movs	r3, #0
 8009214:	6363      	str	r3, [r4, #52]	@ 0x34
 8009216:	89a3      	ldrh	r3, [r4, #12]
 8009218:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800921c:	81a3      	strh	r3, [r4, #12]
 800921e:	2300      	movs	r3, #0
 8009220:	6063      	str	r3, [r4, #4]
 8009222:	6923      	ldr	r3, [r4, #16]
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	89a3      	ldrh	r3, [r4, #12]
 8009228:	f043 0308 	orr.w	r3, r3, #8
 800922c:	81a3      	strh	r3, [r4, #12]
 800922e:	6923      	ldr	r3, [r4, #16]
 8009230:	b94b      	cbnz	r3, 8009246 <__swsetup_r+0x7a>
 8009232:	89a3      	ldrh	r3, [r4, #12]
 8009234:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800923c:	d003      	beq.n	8009246 <__swsetup_r+0x7a>
 800923e:	4621      	mov	r1, r4
 8009240:	4628      	mov	r0, r5
 8009242:	f000 f83f 	bl	80092c4 <__smakebuf_r>
 8009246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800924a:	f013 0201 	ands.w	r2, r3, #1
 800924e:	d00a      	beq.n	8009266 <__swsetup_r+0x9a>
 8009250:	2200      	movs	r2, #0
 8009252:	60a2      	str	r2, [r4, #8]
 8009254:	6962      	ldr	r2, [r4, #20]
 8009256:	4252      	negs	r2, r2
 8009258:	61a2      	str	r2, [r4, #24]
 800925a:	6922      	ldr	r2, [r4, #16]
 800925c:	b942      	cbnz	r2, 8009270 <__swsetup_r+0xa4>
 800925e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009262:	d1c5      	bne.n	80091f0 <__swsetup_r+0x24>
 8009264:	bd38      	pop	{r3, r4, r5, pc}
 8009266:	0799      	lsls	r1, r3, #30
 8009268:	bf58      	it	pl
 800926a:	6962      	ldrpl	r2, [r4, #20]
 800926c:	60a2      	str	r2, [r4, #8]
 800926e:	e7f4      	b.n	800925a <__swsetup_r+0x8e>
 8009270:	2000      	movs	r0, #0
 8009272:	e7f7      	b.n	8009264 <__swsetup_r+0x98>
 8009274:	20000060 	.word	0x20000060

08009278 <__swhatbuf_r>:
 8009278:	b570      	push	{r4, r5, r6, lr}
 800927a:	460c      	mov	r4, r1
 800927c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009280:	2900      	cmp	r1, #0
 8009282:	b096      	sub	sp, #88	@ 0x58
 8009284:	4615      	mov	r5, r2
 8009286:	461e      	mov	r6, r3
 8009288:	da0d      	bge.n	80092a6 <__swhatbuf_r+0x2e>
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009290:	f04f 0100 	mov.w	r1, #0
 8009294:	bf14      	ite	ne
 8009296:	2340      	movne	r3, #64	@ 0x40
 8009298:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800929c:	2000      	movs	r0, #0
 800929e:	6031      	str	r1, [r6, #0]
 80092a0:	602b      	str	r3, [r5, #0]
 80092a2:	b016      	add	sp, #88	@ 0x58
 80092a4:	bd70      	pop	{r4, r5, r6, pc}
 80092a6:	466a      	mov	r2, sp
 80092a8:	f000 f858 	bl	800935c <_fstat_r>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	dbec      	blt.n	800928a <__swhatbuf_r+0x12>
 80092b0:	9901      	ldr	r1, [sp, #4]
 80092b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80092b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80092ba:	4259      	negs	r1, r3
 80092bc:	4159      	adcs	r1, r3
 80092be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092c2:	e7eb      	b.n	800929c <__swhatbuf_r+0x24>

080092c4 <__smakebuf_r>:
 80092c4:	898b      	ldrh	r3, [r1, #12]
 80092c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092c8:	079d      	lsls	r5, r3, #30
 80092ca:	4606      	mov	r6, r0
 80092cc:	460c      	mov	r4, r1
 80092ce:	d507      	bpl.n	80092e0 <__smakebuf_r+0x1c>
 80092d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	6123      	str	r3, [r4, #16]
 80092d8:	2301      	movs	r3, #1
 80092da:	6163      	str	r3, [r4, #20]
 80092dc:	b003      	add	sp, #12
 80092de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092e0:	ab01      	add	r3, sp, #4
 80092e2:	466a      	mov	r2, sp
 80092e4:	f7ff ffc8 	bl	8009278 <__swhatbuf_r>
 80092e8:	9f00      	ldr	r7, [sp, #0]
 80092ea:	4605      	mov	r5, r0
 80092ec:	4639      	mov	r1, r7
 80092ee:	4630      	mov	r0, r6
 80092f0:	f7ff fc24 	bl	8008b3c <_malloc_r>
 80092f4:	b948      	cbnz	r0, 800930a <__smakebuf_r+0x46>
 80092f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092fa:	059a      	lsls	r2, r3, #22
 80092fc:	d4ee      	bmi.n	80092dc <__smakebuf_r+0x18>
 80092fe:	f023 0303 	bic.w	r3, r3, #3
 8009302:	f043 0302 	orr.w	r3, r3, #2
 8009306:	81a3      	strh	r3, [r4, #12]
 8009308:	e7e2      	b.n	80092d0 <__smakebuf_r+0xc>
 800930a:	89a3      	ldrh	r3, [r4, #12]
 800930c:	6020      	str	r0, [r4, #0]
 800930e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009312:	81a3      	strh	r3, [r4, #12]
 8009314:	9b01      	ldr	r3, [sp, #4]
 8009316:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800931a:	b15b      	cbz	r3, 8009334 <__smakebuf_r+0x70>
 800931c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009320:	4630      	mov	r0, r6
 8009322:	f000 f82d 	bl	8009380 <_isatty_r>
 8009326:	b128      	cbz	r0, 8009334 <__smakebuf_r+0x70>
 8009328:	89a3      	ldrh	r3, [r4, #12]
 800932a:	f023 0303 	bic.w	r3, r3, #3
 800932e:	f043 0301 	orr.w	r3, r3, #1
 8009332:	81a3      	strh	r3, [r4, #12]
 8009334:	89a3      	ldrh	r3, [r4, #12]
 8009336:	431d      	orrs	r5, r3
 8009338:	81a5      	strh	r5, [r4, #12]
 800933a:	e7cf      	b.n	80092dc <__smakebuf_r+0x18>

0800933c <_close_r>:
 800933c:	b538      	push	{r3, r4, r5, lr}
 800933e:	4d06      	ldr	r5, [pc, #24]	@ (8009358 <_close_r+0x1c>)
 8009340:	2300      	movs	r3, #0
 8009342:	4604      	mov	r4, r0
 8009344:	4608      	mov	r0, r1
 8009346:	602b      	str	r3, [r5, #0]
 8009348:	f7f7 fea1 	bl	800108e <_close>
 800934c:	1c43      	adds	r3, r0, #1
 800934e:	d102      	bne.n	8009356 <_close_r+0x1a>
 8009350:	682b      	ldr	r3, [r5, #0]
 8009352:	b103      	cbz	r3, 8009356 <_close_r+0x1a>
 8009354:	6023      	str	r3, [r4, #0]
 8009356:	bd38      	pop	{r3, r4, r5, pc}
 8009358:	20003dac 	.word	0x20003dac

0800935c <_fstat_r>:
 800935c:	b538      	push	{r3, r4, r5, lr}
 800935e:	4d07      	ldr	r5, [pc, #28]	@ (800937c <_fstat_r+0x20>)
 8009360:	2300      	movs	r3, #0
 8009362:	4604      	mov	r4, r0
 8009364:	4608      	mov	r0, r1
 8009366:	4611      	mov	r1, r2
 8009368:	602b      	str	r3, [r5, #0]
 800936a:	f7f7 fe9c 	bl	80010a6 <_fstat>
 800936e:	1c43      	adds	r3, r0, #1
 8009370:	d102      	bne.n	8009378 <_fstat_r+0x1c>
 8009372:	682b      	ldr	r3, [r5, #0]
 8009374:	b103      	cbz	r3, 8009378 <_fstat_r+0x1c>
 8009376:	6023      	str	r3, [r4, #0]
 8009378:	bd38      	pop	{r3, r4, r5, pc}
 800937a:	bf00      	nop
 800937c:	20003dac 	.word	0x20003dac

08009380 <_isatty_r>:
 8009380:	b538      	push	{r3, r4, r5, lr}
 8009382:	4d06      	ldr	r5, [pc, #24]	@ (800939c <_isatty_r+0x1c>)
 8009384:	2300      	movs	r3, #0
 8009386:	4604      	mov	r4, r0
 8009388:	4608      	mov	r0, r1
 800938a:	602b      	str	r3, [r5, #0]
 800938c:	f7f7 fe9b 	bl	80010c6 <_isatty>
 8009390:	1c43      	adds	r3, r0, #1
 8009392:	d102      	bne.n	800939a <_isatty_r+0x1a>
 8009394:	682b      	ldr	r3, [r5, #0]
 8009396:	b103      	cbz	r3, 800939a <_isatty_r+0x1a>
 8009398:	6023      	str	r3, [r4, #0]
 800939a:	bd38      	pop	{r3, r4, r5, pc}
 800939c:	20003dac 	.word	0x20003dac

080093a0 <_lseek_r>:
 80093a0:	b538      	push	{r3, r4, r5, lr}
 80093a2:	4d07      	ldr	r5, [pc, #28]	@ (80093c0 <_lseek_r+0x20>)
 80093a4:	4604      	mov	r4, r0
 80093a6:	4608      	mov	r0, r1
 80093a8:	4611      	mov	r1, r2
 80093aa:	2200      	movs	r2, #0
 80093ac:	602a      	str	r2, [r5, #0]
 80093ae:	461a      	mov	r2, r3
 80093b0:	f7f7 fe94 	bl	80010dc <_lseek>
 80093b4:	1c43      	adds	r3, r0, #1
 80093b6:	d102      	bne.n	80093be <_lseek_r+0x1e>
 80093b8:	682b      	ldr	r3, [r5, #0]
 80093ba:	b103      	cbz	r3, 80093be <_lseek_r+0x1e>
 80093bc:	6023      	str	r3, [r4, #0]
 80093be:	bd38      	pop	{r3, r4, r5, pc}
 80093c0:	20003dac 	.word	0x20003dac

080093c4 <_read_r>:
 80093c4:	b538      	push	{r3, r4, r5, lr}
 80093c6:	4d07      	ldr	r5, [pc, #28]	@ (80093e4 <_read_r+0x20>)
 80093c8:	4604      	mov	r4, r0
 80093ca:	4608      	mov	r0, r1
 80093cc:	4611      	mov	r1, r2
 80093ce:	2200      	movs	r2, #0
 80093d0:	602a      	str	r2, [r5, #0]
 80093d2:	461a      	mov	r2, r3
 80093d4:	f7f7 fe22 	bl	800101c <_read>
 80093d8:	1c43      	adds	r3, r0, #1
 80093da:	d102      	bne.n	80093e2 <_read_r+0x1e>
 80093dc:	682b      	ldr	r3, [r5, #0]
 80093de:	b103      	cbz	r3, 80093e2 <_read_r+0x1e>
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	bd38      	pop	{r3, r4, r5, pc}
 80093e4:	20003dac 	.word	0x20003dac

080093e8 <_sbrk_r>:
 80093e8:	b538      	push	{r3, r4, r5, lr}
 80093ea:	4d06      	ldr	r5, [pc, #24]	@ (8009404 <_sbrk_r+0x1c>)
 80093ec:	2300      	movs	r3, #0
 80093ee:	4604      	mov	r4, r0
 80093f0:	4608      	mov	r0, r1
 80093f2:	602b      	str	r3, [r5, #0]
 80093f4:	f7f7 fe80 	bl	80010f8 <_sbrk>
 80093f8:	1c43      	adds	r3, r0, #1
 80093fa:	d102      	bne.n	8009402 <_sbrk_r+0x1a>
 80093fc:	682b      	ldr	r3, [r5, #0]
 80093fe:	b103      	cbz	r3, 8009402 <_sbrk_r+0x1a>
 8009400:	6023      	str	r3, [r4, #0]
 8009402:	bd38      	pop	{r3, r4, r5, pc}
 8009404:	20003dac 	.word	0x20003dac

08009408 <_write_r>:
 8009408:	b538      	push	{r3, r4, r5, lr}
 800940a:	4d07      	ldr	r5, [pc, #28]	@ (8009428 <_write_r+0x20>)
 800940c:	4604      	mov	r4, r0
 800940e:	4608      	mov	r0, r1
 8009410:	4611      	mov	r1, r2
 8009412:	2200      	movs	r2, #0
 8009414:	602a      	str	r2, [r5, #0]
 8009416:	461a      	mov	r2, r3
 8009418:	f7f7 fe1d 	bl	8001056 <_write>
 800941c:	1c43      	adds	r3, r0, #1
 800941e:	d102      	bne.n	8009426 <_write_r+0x1e>
 8009420:	682b      	ldr	r3, [r5, #0]
 8009422:	b103      	cbz	r3, 8009426 <_write_r+0x1e>
 8009424:	6023      	str	r3, [r4, #0]
 8009426:	bd38      	pop	{r3, r4, r5, pc}
 8009428:	20003dac 	.word	0x20003dac

0800942c <_free_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	4605      	mov	r5, r0
 8009430:	2900      	cmp	r1, #0
 8009432:	d041      	beq.n	80094b8 <_free_r+0x8c>
 8009434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009438:	1f0c      	subs	r4, r1, #4
 800943a:	2b00      	cmp	r3, #0
 800943c:	bfb8      	it	lt
 800943e:	18e4      	addlt	r4, r4, r3
 8009440:	f7ff fe36 	bl	80090b0 <__malloc_lock>
 8009444:	4a1d      	ldr	r2, [pc, #116]	@ (80094bc <_free_r+0x90>)
 8009446:	6813      	ldr	r3, [r2, #0]
 8009448:	b933      	cbnz	r3, 8009458 <_free_r+0x2c>
 800944a:	6063      	str	r3, [r4, #4]
 800944c:	6014      	str	r4, [r2, #0]
 800944e:	4628      	mov	r0, r5
 8009450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009454:	f7ff be32 	b.w	80090bc <__malloc_unlock>
 8009458:	42a3      	cmp	r3, r4
 800945a:	d908      	bls.n	800946e <_free_r+0x42>
 800945c:	6820      	ldr	r0, [r4, #0]
 800945e:	1821      	adds	r1, r4, r0
 8009460:	428b      	cmp	r3, r1
 8009462:	bf01      	itttt	eq
 8009464:	6819      	ldreq	r1, [r3, #0]
 8009466:	685b      	ldreq	r3, [r3, #4]
 8009468:	1809      	addeq	r1, r1, r0
 800946a:	6021      	streq	r1, [r4, #0]
 800946c:	e7ed      	b.n	800944a <_free_r+0x1e>
 800946e:	461a      	mov	r2, r3
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	b10b      	cbz	r3, 8009478 <_free_r+0x4c>
 8009474:	42a3      	cmp	r3, r4
 8009476:	d9fa      	bls.n	800946e <_free_r+0x42>
 8009478:	6811      	ldr	r1, [r2, #0]
 800947a:	1850      	adds	r0, r2, r1
 800947c:	42a0      	cmp	r0, r4
 800947e:	d10b      	bne.n	8009498 <_free_r+0x6c>
 8009480:	6820      	ldr	r0, [r4, #0]
 8009482:	4401      	add	r1, r0
 8009484:	1850      	adds	r0, r2, r1
 8009486:	4283      	cmp	r3, r0
 8009488:	6011      	str	r1, [r2, #0]
 800948a:	d1e0      	bne.n	800944e <_free_r+0x22>
 800948c:	6818      	ldr	r0, [r3, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	6053      	str	r3, [r2, #4]
 8009492:	4408      	add	r0, r1
 8009494:	6010      	str	r0, [r2, #0]
 8009496:	e7da      	b.n	800944e <_free_r+0x22>
 8009498:	d902      	bls.n	80094a0 <_free_r+0x74>
 800949a:	230c      	movs	r3, #12
 800949c:	602b      	str	r3, [r5, #0]
 800949e:	e7d6      	b.n	800944e <_free_r+0x22>
 80094a0:	6820      	ldr	r0, [r4, #0]
 80094a2:	1821      	adds	r1, r4, r0
 80094a4:	428b      	cmp	r3, r1
 80094a6:	bf04      	itt	eq
 80094a8:	6819      	ldreq	r1, [r3, #0]
 80094aa:	685b      	ldreq	r3, [r3, #4]
 80094ac:	6063      	str	r3, [r4, #4]
 80094ae:	bf04      	itt	eq
 80094b0:	1809      	addeq	r1, r1, r0
 80094b2:	6021      	streq	r1, [r4, #0]
 80094b4:	6054      	str	r4, [r2, #4]
 80094b6:	e7ca      	b.n	800944e <_free_r+0x22>
 80094b8:	bd38      	pop	{r3, r4, r5, pc}
 80094ba:	bf00      	nop
 80094bc:	20003da8 	.word	0x20003da8

080094c0 <_init>:
 80094c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c2:	bf00      	nop
 80094c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094c6:	bc08      	pop	{r3}
 80094c8:	469e      	mov	lr, r3
 80094ca:	4770      	bx	lr

080094cc <_fini>:
 80094cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ce:	bf00      	nop
 80094d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d2:	bc08      	pop	{r3}
 80094d4:	469e      	mov	lr, r3
 80094d6:	4770      	bx	lr
