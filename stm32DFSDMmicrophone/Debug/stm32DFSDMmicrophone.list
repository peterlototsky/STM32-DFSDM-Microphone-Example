
stm32DFSDMmicrophone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fe4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d4  0800a174  0800a174  0000b174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a848  0800a848  0000c0b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a848  0800a848  0000b848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a850  0800a850  0000c0b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a850  0800a850  0000b850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a854  0800a854  0000b854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  0800a858  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d44  200000b0  0800a908  0000c0b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004df4  0800a908  0000cdf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c0b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141a1  00000000  00000000  0000c0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ee1  00000000  00000000  00020281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  00023168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e4a  00000000  00000000  00024400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000290e0  00000000  00000000  0002524a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017faa  00000000  00000000  0004e32a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f03b1  00000000  00000000  000662d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00156685  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000555c  00000000  00000000  001566c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0015bc24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a15c 	.word	0x0800a15c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	0800a15c 	.word	0x0800a15c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800088c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000890:	f000 b96a 	b.w	8000b68 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	460c      	mov	r4, r1
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d14e      	bne.n	8000956 <__udivmoddi4+0xaa>
 80008b8:	4694      	mov	ip, r2
 80008ba:	458c      	cmp	ip, r1
 80008bc:	4686      	mov	lr, r0
 80008be:	fab2 f282 	clz	r2, r2
 80008c2:	d962      	bls.n	800098a <__udivmoddi4+0xde>
 80008c4:	b14a      	cbz	r2, 80008da <__udivmoddi4+0x2e>
 80008c6:	f1c2 0320 	rsb	r3, r2, #32
 80008ca:	4091      	lsls	r1, r2
 80008cc:	fa20 f303 	lsr.w	r3, r0, r3
 80008d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008d4:	4319      	orrs	r1, r3
 80008d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008de:	fa1f f68c 	uxth.w	r6, ip
 80008e2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008ea:	fb07 1114 	mls	r1, r7, r4, r1
 80008ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f2:	fb04 f106 	mul.w	r1, r4, r6
 80008f6:	4299      	cmp	r1, r3
 80008f8:	d90a      	bls.n	8000910 <__udivmoddi4+0x64>
 80008fa:	eb1c 0303 	adds.w	r3, ip, r3
 80008fe:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000902:	f080 8112 	bcs.w	8000b2a <__udivmoddi4+0x27e>
 8000906:	4299      	cmp	r1, r3
 8000908:	f240 810f 	bls.w	8000b2a <__udivmoddi4+0x27e>
 800090c:	3c02      	subs	r4, #2
 800090e:	4463      	add	r3, ip
 8000910:	1a59      	subs	r1, r3, r1
 8000912:	fa1f f38e 	uxth.w	r3, lr
 8000916:	fbb1 f0f7 	udiv	r0, r1, r7
 800091a:	fb07 1110 	mls	r1, r7, r0, r1
 800091e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000922:	fb00 f606 	mul.w	r6, r0, r6
 8000926:	429e      	cmp	r6, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x94>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000932:	f080 80fc 	bcs.w	8000b2e <__udivmoddi4+0x282>
 8000936:	429e      	cmp	r6, r3
 8000938:	f240 80f9 	bls.w	8000b2e <__udivmoddi4+0x282>
 800093c:	4463      	add	r3, ip
 800093e:	3802      	subs	r0, #2
 8000940:	1b9b      	subs	r3, r3, r6
 8000942:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000946:	2100      	movs	r1, #0
 8000948:	b11d      	cbz	r5, 8000952 <__udivmoddi4+0xa6>
 800094a:	40d3      	lsrs	r3, r2
 800094c:	2200      	movs	r2, #0
 800094e:	e9c5 3200 	strd	r3, r2, [r5]
 8000952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000956:	428b      	cmp	r3, r1
 8000958:	d905      	bls.n	8000966 <__udivmoddi4+0xba>
 800095a:	b10d      	cbz	r5, 8000960 <__udivmoddi4+0xb4>
 800095c:	e9c5 0100 	strd	r0, r1, [r5]
 8000960:	2100      	movs	r1, #0
 8000962:	4608      	mov	r0, r1
 8000964:	e7f5      	b.n	8000952 <__udivmoddi4+0xa6>
 8000966:	fab3 f183 	clz	r1, r3
 800096a:	2900      	cmp	r1, #0
 800096c:	d146      	bne.n	80009fc <__udivmoddi4+0x150>
 800096e:	42a3      	cmp	r3, r4
 8000970:	d302      	bcc.n	8000978 <__udivmoddi4+0xcc>
 8000972:	4290      	cmp	r0, r2
 8000974:	f0c0 80f0 	bcc.w	8000b58 <__udivmoddi4+0x2ac>
 8000978:	1a86      	subs	r6, r0, r2
 800097a:	eb64 0303 	sbc.w	r3, r4, r3
 800097e:	2001      	movs	r0, #1
 8000980:	2d00      	cmp	r5, #0
 8000982:	d0e6      	beq.n	8000952 <__udivmoddi4+0xa6>
 8000984:	e9c5 6300 	strd	r6, r3, [r5]
 8000988:	e7e3      	b.n	8000952 <__udivmoddi4+0xa6>
 800098a:	2a00      	cmp	r2, #0
 800098c:	f040 8090 	bne.w	8000ab0 <__udivmoddi4+0x204>
 8000990:	eba1 040c 	sub.w	r4, r1, ip
 8000994:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000998:	fa1f f78c 	uxth.w	r7, ip
 800099c:	2101      	movs	r1, #1
 800099e:	fbb4 f6f8 	udiv	r6, r4, r8
 80009a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009a6:	fb08 4416 	mls	r4, r8, r6, r4
 80009aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ae:	fb07 f006 	mul.w	r0, r7, r6
 80009b2:	4298      	cmp	r0, r3
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x11c>
 80009b6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ba:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x11a>
 80009c0:	4298      	cmp	r0, r3
 80009c2:	f200 80cd 	bhi.w	8000b60 <__udivmoddi4+0x2b4>
 80009c6:	4626      	mov	r6, r4
 80009c8:	1a1c      	subs	r4, r3, r0
 80009ca:	fa1f f38e 	uxth.w	r3, lr
 80009ce:	fbb4 f0f8 	udiv	r0, r4, r8
 80009d2:	fb08 4410 	mls	r4, r8, r0, r4
 80009d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009da:	fb00 f707 	mul.w	r7, r0, r7
 80009de:	429f      	cmp	r7, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x148>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80009ea:	d202      	bcs.n	80009f2 <__udivmoddi4+0x146>
 80009ec:	429f      	cmp	r7, r3
 80009ee:	f200 80b0 	bhi.w	8000b52 <__udivmoddi4+0x2a6>
 80009f2:	4620      	mov	r0, r4
 80009f4:	1bdb      	subs	r3, r3, r7
 80009f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009fa:	e7a5      	b.n	8000948 <__udivmoddi4+0x9c>
 80009fc:	f1c1 0620 	rsb	r6, r1, #32
 8000a00:	408b      	lsls	r3, r1
 8000a02:	fa22 f706 	lsr.w	r7, r2, r6
 8000a06:	431f      	orrs	r7, r3
 8000a08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a10:	ea43 030c 	orr.w	r3, r3, ip
 8000a14:	40f4      	lsrs	r4, r6
 8000a16:	fa00 f801 	lsl.w	r8, r0, r1
 8000a1a:	0c38      	lsrs	r0, r7, #16
 8000a1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a20:	fbb4 fef0 	udiv	lr, r4, r0
 8000a24:	fa1f fc87 	uxth.w	ip, r7
 8000a28:	fb00 441e 	mls	r4, r0, lr, r4
 8000a2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a30:	fb0e f90c 	mul.w	r9, lr, ip
 8000a34:	45a1      	cmp	r9, r4
 8000a36:	fa02 f201 	lsl.w	r2, r2, r1
 8000a3a:	d90a      	bls.n	8000a52 <__udivmoddi4+0x1a6>
 8000a3c:	193c      	adds	r4, r7, r4
 8000a3e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000a42:	f080 8084 	bcs.w	8000b4e <__udivmoddi4+0x2a2>
 8000a46:	45a1      	cmp	r9, r4
 8000a48:	f240 8081 	bls.w	8000b4e <__udivmoddi4+0x2a2>
 8000a4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a50:	443c      	add	r4, r7
 8000a52:	eba4 0409 	sub.w	r4, r4, r9
 8000a56:	fa1f f983 	uxth.w	r9, r3
 8000a5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a6a:	45a4      	cmp	ip, r4
 8000a6c:	d907      	bls.n	8000a7e <__udivmoddi4+0x1d2>
 8000a6e:	193c      	adds	r4, r7, r4
 8000a70:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000a74:	d267      	bcs.n	8000b46 <__udivmoddi4+0x29a>
 8000a76:	45a4      	cmp	ip, r4
 8000a78:	d965      	bls.n	8000b46 <__udivmoddi4+0x29a>
 8000a7a:	3b02      	subs	r3, #2
 8000a7c:	443c      	add	r4, r7
 8000a7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a82:	fba0 9302 	umull	r9, r3, r0, r2
 8000a86:	eba4 040c 	sub.w	r4, r4, ip
 8000a8a:	429c      	cmp	r4, r3
 8000a8c:	46ce      	mov	lr, r9
 8000a8e:	469c      	mov	ip, r3
 8000a90:	d351      	bcc.n	8000b36 <__udivmoddi4+0x28a>
 8000a92:	d04e      	beq.n	8000b32 <__udivmoddi4+0x286>
 8000a94:	b155      	cbz	r5, 8000aac <__udivmoddi4+0x200>
 8000a96:	ebb8 030e 	subs.w	r3, r8, lr
 8000a9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000aa2:	40cb      	lsrs	r3, r1
 8000aa4:	431e      	orrs	r6, r3
 8000aa6:	40cc      	lsrs	r4, r1
 8000aa8:	e9c5 6400 	strd	r6, r4, [r5]
 8000aac:	2100      	movs	r1, #0
 8000aae:	e750      	b.n	8000952 <__udivmoddi4+0xa6>
 8000ab0:	f1c2 0320 	rsb	r3, r2, #32
 8000ab4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ab8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000abc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ac0:	4094      	lsls	r4, r2
 8000ac2:	430c      	orrs	r4, r1
 8000ac4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000acc:	fa1f f78c 	uxth.w	r7, ip
 8000ad0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ad4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ad8:	0c23      	lsrs	r3, r4, #16
 8000ada:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ade:	fb00 f107 	mul.w	r1, r0, r7
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0x24c>
 8000ae6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aea:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000aee:	d22c      	bcs.n	8000b4a <__udivmoddi4+0x29e>
 8000af0:	4299      	cmp	r1, r3
 8000af2:	d92a      	bls.n	8000b4a <__udivmoddi4+0x29e>
 8000af4:	3802      	subs	r0, #2
 8000af6:	4463      	add	r3, ip
 8000af8:	1a5b      	subs	r3, r3, r1
 8000afa:	b2a4      	uxth	r4, r4
 8000afc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b00:	fb08 3311 	mls	r3, r8, r1, r3
 8000b04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b08:	fb01 f307 	mul.w	r3, r1, r7
 8000b0c:	42a3      	cmp	r3, r4
 8000b0e:	d908      	bls.n	8000b22 <__udivmoddi4+0x276>
 8000b10:	eb1c 0404 	adds.w	r4, ip, r4
 8000b14:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000b18:	d213      	bcs.n	8000b42 <__udivmoddi4+0x296>
 8000b1a:	42a3      	cmp	r3, r4
 8000b1c:	d911      	bls.n	8000b42 <__udivmoddi4+0x296>
 8000b1e:	3902      	subs	r1, #2
 8000b20:	4464      	add	r4, ip
 8000b22:	1ae4      	subs	r4, r4, r3
 8000b24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b28:	e739      	b.n	800099e <__udivmoddi4+0xf2>
 8000b2a:	4604      	mov	r4, r0
 8000b2c:	e6f0      	b.n	8000910 <__udivmoddi4+0x64>
 8000b2e:	4608      	mov	r0, r1
 8000b30:	e706      	b.n	8000940 <__udivmoddi4+0x94>
 8000b32:	45c8      	cmp	r8, r9
 8000b34:	d2ae      	bcs.n	8000a94 <__udivmoddi4+0x1e8>
 8000b36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b3e:	3801      	subs	r0, #1
 8000b40:	e7a8      	b.n	8000a94 <__udivmoddi4+0x1e8>
 8000b42:	4631      	mov	r1, r6
 8000b44:	e7ed      	b.n	8000b22 <__udivmoddi4+0x276>
 8000b46:	4603      	mov	r3, r0
 8000b48:	e799      	b.n	8000a7e <__udivmoddi4+0x1d2>
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	e7d4      	b.n	8000af8 <__udivmoddi4+0x24c>
 8000b4e:	46d6      	mov	lr, sl
 8000b50:	e77f      	b.n	8000a52 <__udivmoddi4+0x1a6>
 8000b52:	4463      	add	r3, ip
 8000b54:	3802      	subs	r0, #2
 8000b56:	e74d      	b.n	80009f4 <__udivmoddi4+0x148>
 8000b58:	4606      	mov	r6, r0
 8000b5a:	4623      	mov	r3, r4
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e70f      	b.n	8000980 <__udivmoddi4+0xd4>
 8000b60:	3e02      	subs	r6, #2
 8000b62:	4463      	add	r3, ip
 8000b64:	e730      	b.n	80009c8 <__udivmoddi4+0x11c>
 8000b66:	bf00      	nop

08000b68 <__aeabi_idiv0>:
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <start_recording_from_mic>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void start_recording_from_mic(){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	if (!recording_audio){
 8000b70:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <start_recording_from_mic+0x5c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d124      	bne.n	8000bc2 <start_recording_from_mic+0x56>
		printf("Starting Recording Process\r\n");
 8000b78:	4814      	ldr	r0, [pc, #80]	@ (8000bcc <start_recording_from_mic+0x60>)
 8000b7a:	f008 fc8d 	bl	8009498 <puts>
		if (f_open(&file, recordingPath, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK) {
 8000b7e:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <start_recording_from_mic+0x64>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	220a      	movs	r2, #10
 8000b84:	4619      	mov	r1, r3
 8000b86:	4813      	ldr	r0, [pc, #76]	@ (8000bd4 <start_recording_from_mic+0x68>)
 8000b88:	f007 fd80 	bl	800868c <f_open>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d002      	beq.n	8000b98 <start_recording_from_mic+0x2c>
			printf("Error opening file for writing.\n\r");
 8000b92:	4811      	ldr	r0, [pc, #68]	@ (8000bd8 <start_recording_from_mic+0x6c>)
 8000b94:	f008 fc18 	bl	80093c8 <iprintf>
		}
		if (f_write(&file, header_data, sizeof(header_data), &bytesWritten) != FR_OK) {
 8000b98:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <start_recording_from_mic+0x70>)
 8000b9a:	222c      	movs	r2, #44	@ 0x2c
 8000b9c:	4910      	ldr	r1, [pc, #64]	@ (8000be0 <start_recording_from_mic+0x74>)
 8000b9e:	480d      	ldr	r0, [pc, #52]	@ (8000bd4 <start_recording_from_mic+0x68>)
 8000ba0:	f007 ff3c 	bl	8008a1c <f_write>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d002      	beq.n	8000bb0 <start_recording_from_mic+0x44>
			printf("Error writing header to file.\n");
 8000baa:	480e      	ldr	r0, [pc, #56]	@ (8000be4 <start_recording_from_mic+0x78>)
 8000bac:	f008 fc74 	bl	8009498 <puts>
		}
		printf("Recording Started\r\n");
 8000bb0:	480d      	ldr	r0, [pc, #52]	@ (8000be8 <start_recording_from_mic+0x7c>)
 8000bb2:	f008 fc71 	bl	8009498 <puts>
		recording_audio = 1;
 8000bb6:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <start_recording_from_mic+0x5c>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	601a      	str	r2, [r3, #0]
		start_recording_process = 0;
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bec <start_recording_from_mic+0x80>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
	}
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000290 	.word	0x20000290
 8000bcc:	0800a180 	.word	0x0800a180
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	200039f4 	.word	0x200039f4
 8000bd8:	0800a19c 	.word	0x0800a19c
 8000bdc:	20004a2c 	.word	0x20004a2c
 8000be0:	20000004 	.word	0x20000004
 8000be4:	0800a1c0 	.word	0x0800a1c0
 8000be8:	0800a1e0 	.word	0x0800a1e0
 8000bec:	200029b0 	.word	0x200029b0

08000bf0 <mount_SD_card>:

void mount_SD_card(void){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0

    //Mount the SD Card
	fres = f_mount(&FatFs, "", 1);    //1=mount now
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	492a      	ldr	r1, [pc, #168]	@ (8000ca4 <mount_SD_card+0xb4>)
 8000bfa:	482b      	ldr	r0, [pc, #172]	@ (8000ca8 <mount_SD_card+0xb8>)
 8000bfc:	f007 fd00 	bl	8008600 <f_mount>
 8000c00:	4603      	mov	r3, r0
 8000c02:	461a      	mov	r2, r3
 8000c04:	4b29      	ldr	r3, [pc, #164]	@ (8000cac <mount_SD_card+0xbc>)
 8000c06:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK){
 8000c08:	4b28      	ldr	r3, [pc, #160]	@ (8000cac <mount_SD_card+0xbc>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d006      	beq.n	8000c1e <mount_SD_card+0x2e>
		printf("No SD Card found : (%i)\r\n", fres);
 8000c10:	4b26      	ldr	r3, [pc, #152]	@ (8000cac <mount_SD_card+0xbc>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	4826      	ldr	r0, [pc, #152]	@ (8000cb0 <mount_SD_card+0xc0>)
 8000c18:	f008 fbd6 	bl	80093c8 <iprintf>
 8000c1c:	e03f      	b.n	8000c9e <mount_SD_card+0xae>
        return;
	}
	printf("SD Card Mounted Successfully\r\n");
 8000c1e:	4825      	ldr	r0, [pc, #148]	@ (8000cb4 <mount_SD_card+0xc4>)
 8000c20:	f008 fc3a 	bl	8009498 <puts>

    //Read the SD Card Total size and Free Size
    FATFS *pfs;
    DWORD fre_clust;

    f_getfree("", &fre_clust, &pfs);
 8000c24:	1d3a      	adds	r2, r7, #4
 8000c26:	463b      	mov	r3, r7
 8000c28:	4619      	mov	r1, r3
 8000c2a:	481e      	ldr	r0, [pc, #120]	@ (8000ca4 <mount_SD_card+0xb4>)
 8000c2c:	f008 f932 	bl	8008e94 <f_getfree>
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	69db      	ldr	r3, [r3, #28]
 8000c34:	3b02      	subs	r3, #2
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	8952      	ldrh	r2, [r2, #10]
 8000c3a:	fb02 f303 	mul.w	r3, r2, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fd82 	bl	8000748 <__aeabi_ui2d>
 8000c44:	f04f 0200 	mov.w	r2, #0
 8000c48:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb8 <mount_SD_card+0xc8>)
 8000c4a:	f7ff fb11 	bl	8000270 <__aeabi_dmul>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	460b      	mov	r3, r1
 8000c52:	4610      	mov	r0, r2
 8000c54:	4619      	mov	r1, r3
 8000c56:	f7ff fdf1 	bl	800083c <__aeabi_d2uiz>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	4a17      	ldr	r2, [pc, #92]	@ (8000cbc <mount_SD_card+0xcc>)
 8000c5e:	6013      	str	r3, [r2, #0]
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	895b      	ldrh	r3, [r3, #10]
 8000c64:	461a      	mov	r2, r3
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	fb02 f303 	mul.w	r3, r2, r3
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fd6b 	bl	8000748 <__aeabi_ui2d>
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <mount_SD_card+0xc8>)
 8000c78:	f7ff fafa 	bl	8000270 <__aeabi_dmul>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	460b      	mov	r3, r1
 8000c80:	4610      	mov	r0, r2
 8000c82:	4619      	mov	r1, r3
 8000c84:	f7ff fdda 	bl	800083c <__aeabi_d2uiz>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc0 <mount_SD_card+0xd0>)
 8000c8c:	6013      	str	r3, [r2, #0]

    printf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\r\n", totalSpace, freeSpace);
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <mount_SD_card+0xcc>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc0 <mount_SD_card+0xd0>)
 8000c94:	6812      	ldr	r2, [r2, #0]
 8000c96:	4619      	mov	r1, r3
 8000c98:	480a      	ldr	r0, [pc, #40]	@ (8000cc4 <mount_SD_card+0xd4>)
 8000c9a:	f008 fb95 	bl	80093c8 <iprintf>

}
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	0800a1f4 	.word	0x0800a1f4
 8000ca8:	200029b8 	.word	0x200029b8
 8000cac:	200039f0 	.word	0x200039f0
 8000cb0:	0800a1f8 	.word	0x0800a1f8
 8000cb4:	0800a214 	.word	0x0800a214
 8000cb8:	3fe00000 	.word	0x3fe00000
 8000cbc:	20004a24 	.word	0x20004a24
 8000cc0:	20004a28 	.word	0x20004a28
 8000cc4:	0800a234 	.word	0x0800a234

08000cc8 <unmount_SD_card>:
	if (fres != FR_OK) {
		return;
	}
}

void unmount_SD_card(void){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	f_mount(NULL, "", 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4904      	ldr	r1, [pc, #16]	@ (8000ce0 <unmount_SD_card+0x18>)
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f007 fc95 	bl	8008600 <f_mount>
	printf("SD Card Unmounted Successfully\r\n");
 8000cd6:	4803      	ldr	r0, [pc, #12]	@ (8000ce4 <unmount_SD_card+0x1c>)
 8000cd8:	f008 fbde 	bl	8009498 <puts>
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	0800a1f4 	.word	0x0800a1f4
 8000ce4:	0800a264 	.word	0x0800a264

08000ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cee:	f000 fe54 	bl	800199a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf2:	f000 f913 	bl	8000f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf6:	f000 fa53 	bl	80011a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cfa:	f000 fa33 	bl	8001164 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000cfe:	f000 f95f 	bl	8000fc0 <MX_DFSDM1_Init>
  MX_SPI2_Init();
 8000d02:	f000 f9c1 	bl	8001088 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000d06:	f000 f9fd 	bl	8001104 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000d0a:	f004 fd67 	bl	80057dc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Program...\r\n");
 8000d0e:	486d      	ldr	r0, [pc, #436]	@ (8000ec4 <main+0x1dc>)
 8000d10:	f008 fbc2 	bl	8009498 <puts>
  mount_SD_card();
 8000d14:	f7ff ff6c 	bl	8000bf0 <mount_SD_card>

  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1, dfsdm_buffer, DFSDM_BUFFER_SIZE * 2) != HAL_OK){
 8000d18:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d1c:	496a      	ldr	r1, [pc, #424]	@ (8000ec8 <main+0x1e0>)
 8000d1e:	486b      	ldr	r0, [pc, #428]	@ (8000ecc <main+0x1e4>)
 8000d20:	f001 f9c6 	bl	80020b0 <HAL_DFSDM_FilterRegularStart_DMA>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d002      	beq.n	8000d30 <main+0x48>
	  printf("Failed to start DFSDM");
 8000d2a:	4869      	ldr	r0, [pc, #420]	@ (8000ed0 <main+0x1e8>)
 8000d2c:	f008 fb4c 	bl	80093c8 <iprintf>
  }
  start_recording_process = 1;
 8000d30:	4b68      	ldr	r3, [pc, #416]	@ (8000ed4 <main+0x1ec>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (start_recording_process){
 8000d36:	4b67      	ldr	r3, [pc, #412]	@ (8000ed4 <main+0x1ec>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <main+0x5a>
		  start_recording_from_mic();
 8000d3e:	f7ff ff15 	bl	8000b6c <start_recording_from_mic>
	  }

	  if (recording_audio){
 8000d42:	4b65      	ldr	r3, [pc, #404]	@ (8000ed8 <main+0x1f0>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f000 80ab 	beq.w	8000ea2 <main+0x1ba>

		  if (finished_recording || bytes_written_to_file >= MAX_RECORDING_LENGTH){
 8000d4c:	4b63      	ldr	r3, [pc, #396]	@ (8000edc <main+0x1f4>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d104      	bne.n	8000d5e <main+0x76>
 8000d54:	4b62      	ldr	r3, [pc, #392]	@ (8000ee0 <main+0x1f8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a62      	ldr	r2, [pc, #392]	@ (8000ee4 <main+0x1fc>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	dd17      	ble.n	8000d8e <main+0xa6>
			  printf("Finished Recording Audio\r\n");
 8000d5e:	4862      	ldr	r0, [pc, #392]	@ (8000ee8 <main+0x200>)
 8000d60:	f008 fb9a 	bl	8009498 <puts>
			  recording_audio = 0;
 8000d64:	4b5c      	ldr	r3, [pc, #368]	@ (8000ed8 <main+0x1f0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
			  finished_recording = 0;
 8000d6a:	4b5c      	ldr	r3, [pc, #368]	@ (8000edc <main+0x1f4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
			  mic_half_transfer = 0;
 8000d70:	4b5e      	ldr	r3, [pc, #376]	@ (8000eec <main+0x204>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
			  mic_transfer_complete = 0;
 8000d76:	4b5e      	ldr	r3, [pc, #376]	@ (8000ef0 <main+0x208>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
			  bytes_written_to_file = 0;
 8000d7c:	4b58      	ldr	r3, [pc, #352]	@ (8000ee0 <main+0x1f8>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
			  f_close(&file);
 8000d82:	485c      	ldr	r0, [pc, #368]	@ (8000ef4 <main+0x20c>)
 8000d84:	f008 f85c 	bl	8008e40 <f_close>
			  printf("File Saved\r\n");
 8000d88:	485b      	ldr	r0, [pc, #364]	@ (8000ef8 <main+0x210>)
 8000d8a:	f008 fb85 	bl	8009498 <puts>
		  }

		  if(mic_half_transfer){
 8000d8e:	4b57      	ldr	r3, [pc, #348]	@ (8000eec <main+0x204>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d03f      	beq.n	8000e16 <main+0x12e>
			  for (int i = 0; i < DFSDM_BUFFER_SIZE; i++){
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	e01b      	b.n	8000dd4 <main+0xec>
				  recording[i] = SaturaLH((dfsdm_buffer[i] >> 8), -32768, 32767);
 8000d9c:	4a4a      	ldr	r2, [pc, #296]	@ (8000ec8 <main+0x1e0>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da4:	121b      	asrs	r3, r3, #8
 8000da6:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8000daa:	db0b      	blt.n	8000dc4 <main+0xdc>
 8000dac:	4a46      	ldr	r2, [pc, #280]	@ (8000ec8 <main+0x1e0>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db4:	121b      	asrs	r3, r3, #8
 8000db6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	bfa8      	it	ge
 8000dbe:	4613      	movge	r3, r2
 8000dc0:	b21a      	sxth	r2, r3
 8000dc2:	e000      	b.n	8000dc6 <main+0xde>
 8000dc4:	4a4d      	ldr	r2, [pc, #308]	@ (8000efc <main+0x214>)
 8000dc6:	494e      	ldr	r1, [pc, #312]	@ (8000f00 <main+0x218>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			  for (int i = 0; i < DFSDM_BUFFER_SIZE; i++){
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000dda:	dbdf      	blt.n	8000d9c <main+0xb4>
			  }
			  if (f_write(&file, recording, bytes_to_record, &bytesWritten) != FR_OK) {
 8000ddc:	4b49      	ldr	r3, [pc, #292]	@ (8000f04 <main+0x21c>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b49      	ldr	r3, [pc, #292]	@ (8000f08 <main+0x220>)
 8000de2:	4947      	ldr	r1, [pc, #284]	@ (8000f00 <main+0x218>)
 8000de4:	4843      	ldr	r0, [pc, #268]	@ (8000ef4 <main+0x20c>)
 8000de6:	f007 fe19 	bl	8008a1c <f_write>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d008      	beq.n	8000e02 <main+0x11a>
				  printf("Error Writing To File 1.\n");
 8000df0:	4846      	ldr	r0, [pc, #280]	@ (8000f0c <main+0x224>)
 8000df2:	f008 fb51 	bl	8009498 <puts>
				  f_close(&file);
 8000df6:	483f      	ldr	r0, [pc, #252]	@ (8000ef4 <main+0x20c>)
 8000df8:	f008 f822 	bl	8008e40 <f_close>
				  error = 1;
 8000dfc:	4b44      	ldr	r3, [pc, #272]	@ (8000f10 <main+0x228>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	601a      	str	r2, [r3, #0]
			  }
			  bytes_written_to_file+= DFSDM_BUFFER_SIZE * 2;
 8000e02:	4b37      	ldr	r3, [pc, #220]	@ (8000ee0 <main+0x1f8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000e0a:	4a35      	ldr	r2, [pc, #212]	@ (8000ee0 <main+0x1f8>)
 8000e0c:	6013      	str	r3, [r2, #0]
			  mic_half_transfer = 0;
 8000e0e:	4b37      	ldr	r3, [pc, #220]	@ (8000eec <main+0x204>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e045      	b.n	8000ea2 <main+0x1ba>
		  }
		  else if (mic_transfer_complete){
 8000e16:	4b36      	ldr	r3, [pc, #216]	@ (8000ef0 <main+0x208>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d041      	beq.n	8000ea2 <main+0x1ba>
			  for (int i = DFSDM_BUFFER_SIZE; i < DFSDM_BUFFER_SIZE * 2; i++){
 8000e1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	e01d      	b.n	8000e62 <main+0x17a>
				  recording[i - DFSDM_BUFFER_SIZE] = SaturaLH((dfsdm_buffer[i] >> 8), -32768, 32767);
 8000e26:	4a28      	ldr	r2, [pc, #160]	@ (8000ec8 <main+0x1e0>)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2e:	121b      	asrs	r3, r3, #8
 8000e30:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8000e34:	db0b      	blt.n	8000e4e <main+0x166>
 8000e36:	4a24      	ldr	r2, [pc, #144]	@ (8000ec8 <main+0x1e0>)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3e:	121b      	asrs	r3, r3, #8
 8000e40:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000e44:	4293      	cmp	r3, r2
 8000e46:	bfa8      	it	ge
 8000e48:	4613      	movge	r3, r2
 8000e4a:	b21a      	sxth	r2, r3
 8000e4c:	e000      	b.n	8000e50 <main+0x168>
 8000e4e:	4a2b      	ldr	r2, [pc, #172]	@ (8000efc <main+0x214>)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000e56:	492a      	ldr	r1, [pc, #168]	@ (8000f00 <main+0x218>)
 8000e58:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			  for (int i = DFSDM_BUFFER_SIZE; i < DFSDM_BUFFER_SIZE * 2; i++){
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	603b      	str	r3, [r7, #0]
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e68:	dbdd      	blt.n	8000e26 <main+0x13e>
			  }
			  if (f_write(&file, recording, bytes_to_record, &bytesWritten) != FR_OK) {
 8000e6a:	4b26      	ldr	r3, [pc, #152]	@ (8000f04 <main+0x21c>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	4b26      	ldr	r3, [pc, #152]	@ (8000f08 <main+0x220>)
 8000e70:	4923      	ldr	r1, [pc, #140]	@ (8000f00 <main+0x218>)
 8000e72:	4820      	ldr	r0, [pc, #128]	@ (8000ef4 <main+0x20c>)
 8000e74:	f007 fdd2 	bl	8008a1c <f_write>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d008      	beq.n	8000e90 <main+0x1a8>
				  printf("Error Writing to File 2.\n");
 8000e7e:	4825      	ldr	r0, [pc, #148]	@ (8000f14 <main+0x22c>)
 8000e80:	f008 fb0a 	bl	8009498 <puts>
				  f_close(&file);
 8000e84:	481b      	ldr	r0, [pc, #108]	@ (8000ef4 <main+0x20c>)
 8000e86:	f007 ffdb 	bl	8008e40 <f_close>
				  error = 1;
 8000e8a:	4b21      	ldr	r3, [pc, #132]	@ (8000f10 <main+0x228>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]
			  }
			  bytes_written_to_file+= DFSDM_BUFFER_SIZE * 2;
 8000e90:	4b13      	ldr	r3, [pc, #76]	@ (8000ee0 <main+0x1f8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000e98:	4a11      	ldr	r2, [pc, #68]	@ (8000ee0 <main+0x1f8>)
 8000e9a:	6013      	str	r3, [r2, #0]
			  mic_transfer_complete = 0;
 8000e9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ef0 <main+0x208>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
		  }
	  }

	  if (error){
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f10 <main+0x228>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f43f af45 	beq.w	8000d36 <main+0x4e>
		  printf("There has been an error\r\n Terminating Program\r\n");
 8000eac:	481a      	ldr	r0, [pc, #104]	@ (8000f18 <main+0x230>)
 8000eae:	f008 faf3 	bl	8009498 <puts>
		  unmount_SD_card();
 8000eb2:	f7ff ff09 	bl	8000cc8 <unmount_SD_card>
		  return -1;
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
	  }
  }
  unmount_SD_card();
  /* USER CODE END 3 */
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	0800a284 	.word	0x0800a284
 8000ec8:	20000a68 	.word	0x20000a68
 8000ecc:	200000cc 	.word	0x200000cc
 8000ed0:	0800a29c 	.word	0x0800a29c
 8000ed4:	200029b0 	.word	0x200029b0
 8000ed8:	20000290 	.word	0x20000290
 8000edc:	20000294 	.word	0x20000294
 8000ee0:	200029b4 	.word	0x200029b4
 8000ee4:	0001f42b 	.word	0x0001f42b
 8000ee8:	0800a2b4 	.word	0x0800a2b4
 8000eec:	200029ac 	.word	0x200029ac
 8000ef0:	200029a8 	.word	0x200029a8
 8000ef4:	200039f4 	.word	0x200039f4
 8000ef8:	0800a2d0 	.word	0x0800a2d0
 8000efc:	ffff8000 	.word	0xffff8000
 8000f00:	20000298 	.word	0x20000298
 8000f04:	20000030 	.word	0x20000030
 8000f08:	20004a2c 	.word	0x20004a2c
 8000f0c:	0800a2dc 	.word	0x0800a2dc
 8000f10:	2000028c 	.word	0x2000028c
 8000f14:	0800a2f8 	.word	0x0800a2f8
 8000f18:	0800a314 	.word	0x0800a314

08000f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b096      	sub	sp, #88	@ 0x58
 8000f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	2244      	movs	r2, #68	@ 0x44
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f008 fabc 	bl	80094a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f30:	463b      	mov	r3, r7
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f3e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f42:	f001 fdf1 	bl	8002b28 <HAL_PWREx_ControlVoltageScaling>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f4c:	f000 f9da 	bl	8001304 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f50:	2310      	movs	r3, #16
 8000f52:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f54:	2301      	movs	r3, #1
 8000f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f5c:	2360      	movs	r3, #96	@ 0x60
 8000f5e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f60:	2302      	movs	r3, #2
 8000f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f64:	2301      	movs	r3, #1
 8000f66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000f6c:	2320      	movs	r3, #32
 8000f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f70:	2307      	movs	r3, #7
 8000f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f74:	2302      	movs	r3, #2
 8000f76:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4618      	mov	r0, r3
 8000f82:	f001 fe27 	bl	8002bd4 <HAL_RCC_OscConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000f8c:	f000 f9ba 	bl	8001304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f90:	230f      	movs	r3, #15
 8000f92:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f94:	2303      	movs	r3, #3
 8000f96:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	2103      	movs	r1, #3
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f002 f9ef 	bl	800338c <HAL_RCC_ClockConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000fb4:	f000 f9a6 	bl	8001304 <Error_Handler>
  }
}
 8000fb8:	bf00      	nop
 8000fba:	3758      	adds	r7, #88	@ 0x58
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8000fc4:	4b2c      	ldr	r3, [pc, #176]	@ (8001078 <MX_DFSDM1_Init+0xb8>)
 8000fc6:	4a2d      	ldr	r2, [pc, #180]	@ (800107c <MX_DFSDM1_Init+0xbc>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000fca:	4b2b      	ldr	r3, [pc, #172]	@ (8001078 <MX_DFSDM1_Init+0xb8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 8000fd0:	4b29      	ldr	r3, [pc, #164]	@ (8001078 <MX_DFSDM1_Init+0xb8>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 8000fd6:	4b28      	ldr	r3, [pc, #160]	@ (8001078 <MX_DFSDM1_Init+0xb8>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000fdc:	4b26      	ldr	r3, [pc, #152]	@ (8001078 <MX_DFSDM1_Init+0xb8>)
 8000fde:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000fe2:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 125;
 8000fe4:	4b24      	ldr	r3, [pc, #144]	@ (8001078 <MX_DFSDM1_Init+0xb8>)
 8000fe6:	227d      	movs	r2, #125	@ 0x7d
 8000fe8:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 8000fea:	4b23      	ldr	r3, [pc, #140]	@ (8001078 <MX_DFSDM1_Init+0xb8>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 8000ff0:	4821      	ldr	r0, [pc, #132]	@ (8001078 <MX_DFSDM1_Init+0xb8>)
 8000ff2:	f000 ff3d 	bl	8001e70 <HAL_DFSDM_FilterInit>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000ffc:	f000 f982 	bl	8001304 <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8001000:	4b1f      	ldr	r3, [pc, #124]	@ (8001080 <MX_DFSDM1_Init+0xc0>)
 8001002:	4a20      	ldr	r2, [pc, #128]	@ (8001084 <MX_DFSDM1_Init+0xc4>)
 8001004:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 8001006:	4b1e      	ldr	r3, [pc, #120]	@ (8001080 <MX_DFSDM1_Init+0xc0>)
 8001008:	2201      	movs	r2, #1
 800100a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800100c:	4b1c      	ldr	r3, [pc, #112]	@ (8001080 <MX_DFSDM1_Init+0xc0>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 8001012:	4b1b      	ldr	r3, [pc, #108]	@ (8001080 <MX_DFSDM1_Init+0xc0>)
 8001014:	2202      	movs	r2, #2
 8001016:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001018:	4b19      	ldr	r3, [pc, #100]	@ (8001080 <MX_DFSDM1_Init+0xc0>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800101e:	4b18      	ldr	r3, [pc, #96]	@ (8001080 <MX_DFSDM1_Init+0xc0>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001024:	4b16      	ldr	r3, [pc, #88]	@ (8001080 <MX_DFSDM1_Init+0xc0>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800102a:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <MX_DFSDM1_Init+0xc0>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001030:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <MX_DFSDM1_Init+0xc0>)
 8001032:	2204      	movs	r2, #4
 8001034:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001036:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <MX_DFSDM1_Init+0xc0>)
 8001038:	2200      	movs	r2, #0
 800103a:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 800103c:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <MX_DFSDM1_Init+0xc0>)
 800103e:	2201      	movs	r2, #1
 8001040:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 8001042:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <MX_DFSDM1_Init+0xc0>)
 8001044:	2200      	movs	r2, #0
 8001046:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x02;
 8001048:	4b0d      	ldr	r3, [pc, #52]	@ (8001080 <MX_DFSDM1_Init+0xc0>)
 800104a:	2202      	movs	r2, #2
 800104c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 800104e:	480c      	ldr	r0, [pc, #48]	@ (8001080 <MX_DFSDM1_Init+0xc0>)
 8001050:	f000 fe4e 	bl	8001cf0 <HAL_DFSDM_ChannelInit>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 800105a:	f000 f953 	bl	8001304 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800105e:	2201      	movs	r2, #1
 8001060:	2101      	movs	r1, #1
 8001062:	4805      	ldr	r0, [pc, #20]	@ (8001078 <MX_DFSDM1_Init+0xb8>)
 8001064:	f000 ffde 	bl	8002024 <HAL_DFSDM_FilterConfigRegChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 800106e:	f000 f949 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200000cc 	.word	0x200000cc
 800107c:	40016180 	.word	0x40016180
 8001080:	20000120 	.word	0x20000120
 8001084:	40016000 	.word	0x40016000

08001088 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800108c:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <MX_SPI2_Init+0x74>)
 800108e:	4a1c      	ldr	r2, [pc, #112]	@ (8001100 <MX_SPI2_Init+0x78>)
 8001090:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001092:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <MX_SPI2_Init+0x74>)
 8001094:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001098:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800109a:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <MX_SPI2_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010a0:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <MX_SPI2_Init+0x74>)
 80010a2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80010a6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010a8:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <MX_SPI2_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ae:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <MX_SPI2_Init+0x74>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010b4:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <MX_SPI2_Init+0x74>)
 80010b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ba:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <MX_SPI2_Init+0x74>)
 80010be:	2208      	movs	r2, #8
 80010c0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	@ (80010fc <MX_SPI2_Init+0x74>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <MX_SPI2_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <MX_SPI2_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80010d4:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <MX_SPI2_Init+0x74>)
 80010d6:	2207      	movs	r2, #7
 80010d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <MX_SPI2_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <MX_SPI2_Init+0x74>)
 80010e2:	2208      	movs	r2, #8
 80010e4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	@ (80010fc <MX_SPI2_Init+0x74>)
 80010e8:	f003 f830 	bl	800414c <HAL_SPI_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80010f2:	f000 f907 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200001a0 	.word	0x200001a0
 8001100:	40003800 	.word	0x40003800

08001104 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001108:	4b14      	ldr	r3, [pc, #80]	@ (800115c <MX_USART2_UART_Init+0x58>)
 800110a:	4a15      	ldr	r2, [pc, #84]	@ (8001160 <MX_USART2_UART_Init+0x5c>)
 800110c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800110e:	4b13      	ldr	r3, [pc, #76]	@ (800115c <MX_USART2_UART_Init+0x58>)
 8001110:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001114:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <MX_USART2_UART_Init+0x58>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800111c:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <MX_USART2_UART_Init+0x58>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001122:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <MX_USART2_UART_Init+0x58>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001128:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <MX_USART2_UART_Init+0x58>)
 800112a:	220c      	movs	r2, #12
 800112c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112e:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <MX_USART2_UART_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001134:	4b09      	ldr	r3, [pc, #36]	@ (800115c <MX_USART2_UART_Init+0x58>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800113a:	4b08      	ldr	r3, [pc, #32]	@ (800115c <MX_USART2_UART_Init+0x58>)
 800113c:	2200      	movs	r2, #0
 800113e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <MX_USART2_UART_Init+0x58>)
 8001142:	2200      	movs	r2, #0
 8001144:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001146:	4805      	ldr	r0, [pc, #20]	@ (800115c <MX_USART2_UART_Init+0x58>)
 8001148:	f003 fd9c 	bl	8004c84 <HAL_UART_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001152:	f000 f8d7 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000204 	.word	0x20000204
 8001160:	40004400 	.word	0x40004400

08001164 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800116a:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <MX_DMA_Init+0x38>)
 800116c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800116e:	4a0b      	ldr	r2, [pc, #44]	@ (800119c <MX_DMA_Init+0x38>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6493      	str	r3, [r2, #72]	@ 0x48
 8001176:	4b09      	ldr	r3, [pc, #36]	@ (800119c <MX_DMA_Init+0x38>)
 8001178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	200f      	movs	r0, #15
 8001188:	f000 fd7b 	bl	8001c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800118c:	200f      	movs	r0, #15
 800118e:	f000 fd94 	bl	8001cba <HAL_NVIC_EnableIRQ>

}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000

080011a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b6:	4b29      	ldr	r3, [pc, #164]	@ (800125c <MX_GPIO_Init+0xbc>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ba:	4a28      	ldr	r2, [pc, #160]	@ (800125c <MX_GPIO_Init+0xbc>)
 80011bc:	f043 0304 	orr.w	r3, r3, #4
 80011c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c2:	4b26      	ldr	r3, [pc, #152]	@ (800125c <MX_GPIO_Init+0xbc>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	4b23      	ldr	r3, [pc, #140]	@ (800125c <MX_GPIO_Init+0xbc>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	4a22      	ldr	r2, [pc, #136]	@ (800125c <MX_GPIO_Init+0xbc>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011da:	4b20      	ldr	r3, [pc, #128]	@ (800125c <MX_GPIO_Init+0xbc>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <MX_GPIO_Init+0xbc>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	4a1c      	ldr	r2, [pc, #112]	@ (800125c <MX_GPIO_Init+0xbc>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f2:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <MX_GPIO_Init+0xbc>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ChipSelectSD_GPIO_Port, ChipSelectSD_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001204:	4816      	ldr	r0, [pc, #88]	@ (8001260 <MX_GPIO_Init+0xc0>)
 8001206:	f001 fc51 	bl	8002aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userControl_Pin */
  GPIO_InitStruct.Pin = userControl_Pin;
 800120a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800120e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001210:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(userControl_GPIO_Port, &GPIO_InitStruct);
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	4619      	mov	r1, r3
 8001220:	4810      	ldr	r0, [pc, #64]	@ (8001264 <MX_GPIO_Init+0xc4>)
 8001222:	f001 fa99 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pin : ChipSelectSD_Pin */
  GPIO_InitStruct.Pin = ChipSelectSD_Pin;
 8001226:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800122a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122c:	2301      	movs	r3, #1
 800122e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ChipSelectSD_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	4619      	mov	r1, r3
 800123e:	4808      	ldr	r0, [pc, #32]	@ (8001260 <MX_GPIO_Init+0xc0>)
 8001240:	f001 fa8a 	bl	8002758 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001244:	2200      	movs	r2, #0
 8001246:	2100      	movs	r1, #0
 8001248:	2028      	movs	r0, #40	@ 0x28
 800124a:	f000 fd1a 	bl	8001c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800124e:	2028      	movs	r0, #40	@ 0x28
 8001250:	f000 fd33 	bl	8001cba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001254:	bf00      	nop
 8001256:	3720      	adds	r7, #32
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40021000 	.word	0x40021000
 8001260:	48000400 	.word	0x48000400
 8001264:	48000800 	.word	0x48000800

08001268 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001270:	1d39      	adds	r1, r7, #4
 8001272:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001276:	2201      	movs	r2, #1
 8001278:	4803      	ldr	r0, [pc, #12]	@ (8001288 <__io_putchar+0x20>)
 800127a:	f003 fd51 	bl	8004d20 <HAL_UART_Transmit>
  return ch;
 800127e:	687b      	ldr	r3, [r7, #4]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000204 	.word	0x20000204

0800128c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	80fb      	strh	r3, [r7, #6]
	start_recording_process = 1;
 8001296:	4b04      	ldr	r3, [pc, #16]	@ (80012a8 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001298:	2201      	movs	r2, #1
 800129a:	601a      	str	r2, [r3, #0]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	200029b0 	.word	0x200029b0

080012ac <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	if (recording_audio){
 80012b4:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x24>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x16>
		mic_half_transfer = 1;
 80012bc:	4b05      	ldr	r3, [pc, #20]	@ (80012d4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28>)
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]
	}

}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000290 	.word	0x20000290
 80012d4:	200029ac 	.word	0x200029ac

080012d8 <HAL_DFSDM_FilterRegConvCpltCallback>:
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	if( recording_audio){
 80012e0:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <HAL_DFSDM_FilterRegConvCpltCallback+0x24>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <HAL_DFSDM_FilterRegConvCpltCallback+0x16>
		mic_transfer_complete = 1;
 80012e8:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <HAL_DFSDM_FilterRegConvCpltCallback+0x28>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]
	}
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000290 	.word	0x20000290
 8001300:	200029a8 	.word	0x200029a8

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <Error_Handler+0x8>

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <HAL_MspInit+0x44>)
 8001318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800131a:	4a0e      	ldr	r2, [pc, #56]	@ (8001354 <HAL_MspInit+0x44>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6613      	str	r3, [r2, #96]	@ 0x60
 8001322:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <HAL_MspInit+0x44>)
 8001324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <HAL_MspInit+0x44>)
 8001330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001332:	4a08      	ldr	r2, [pc, #32]	@ (8001354 <HAL_MspInit+0x44>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001338:	6593      	str	r3, [r2, #88]	@ 0x58
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_MspInit+0x44>)
 800133c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40021000 	.word	0x40021000

08001358 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b0ac      	sub	sp, #176	@ 0xb0
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	2288      	movs	r2, #136	@ 0x88
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f008 f895 	bl	80094a8 <memset>
  if(DFSDM1_Init == 0)
 800137e:	4b55      	ldr	r3, [pc, #340]	@ (80014d4 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d16b      	bne.n	800145e <HAL_DFSDM_FilterMspInit+0x106>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001386:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800138a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4618      	mov	r0, r3
 8001398:	f002 fa1c 	bl	80037d4 <HAL_RCCEx_PeriphCLKConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 80013a2:	f7ff ffaf 	bl	8001304 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80013a6:	4b4c      	ldr	r3, [pc, #304]	@ (80014d8 <HAL_DFSDM_FilterMspInit+0x180>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	4a4a      	ldr	r2, [pc, #296]	@ (80014d8 <HAL_DFSDM_FilterMspInit+0x180>)
 80013ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80013b0:	4b49      	ldr	r3, [pc, #292]	@ (80014d8 <HAL_DFSDM_FilterMspInit+0x180>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d10b      	bne.n	80013d0 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80013b8:	4b48      	ldr	r3, [pc, #288]	@ (80014dc <HAL_DFSDM_FilterMspInit+0x184>)
 80013ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013bc:	4a47      	ldr	r2, [pc, #284]	@ (80014dc <HAL_DFSDM_FilterMspInit+0x184>)
 80013be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80013c4:	4b45      	ldr	r3, [pc, #276]	@ (80014dc <HAL_DFSDM_FilterMspInit+0x184>)
 80013c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d0:	4b42      	ldr	r3, [pc, #264]	@ (80014dc <HAL_DFSDM_FilterMspInit+0x184>)
 80013d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d4:	4a41      	ldr	r2, [pc, #260]	@ (80014dc <HAL_DFSDM_FilterMspInit+0x184>)
 80013d6:	f043 0304 	orr.w	r3, r3, #4
 80013da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013dc:	4b3f      	ldr	r3, [pc, #252]	@ (80014dc <HAL_DFSDM_FilterMspInit+0x184>)
 80013de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e8:	4b3c      	ldr	r3, [pc, #240]	@ (80014dc <HAL_DFSDM_FilterMspInit+0x184>)
 80013ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ec:	4a3b      	ldr	r2, [pc, #236]	@ (80014dc <HAL_DFSDM_FilterMspInit+0x184>)
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f4:	4b39      	ldr	r3, [pc, #228]	@ (80014dc <HAL_DFSDM_FilterMspInit+0x184>)
 80013f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PB1     ------> DFSDM1_DATIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001400:	2304      	movs	r3, #4
 8001402:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001418:	2306      	movs	r3, #6
 800141a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001422:	4619      	mov	r1, r3
 8001424:	482e      	ldr	r0, [pc, #184]	@ (80014e0 <HAL_DFSDM_FilterMspInit+0x188>)
 8001426:	f001 f997 	bl	8002758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800142a:	2302      	movs	r3, #2
 800142c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001442:	2306      	movs	r3, #6
 8001444:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800144c:	4619      	mov	r1, r3
 800144e:	4825      	ldr	r0, [pc, #148]	@ (80014e4 <HAL_DFSDM_FilterMspInit+0x18c>)
 8001450:	f001 f982 	bl	8002758 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001454:	4b1f      	ldr	r3, [pc, #124]	@ (80014d4 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	4a1e      	ldr	r2, [pc, #120]	@ (80014d4 <HAL_DFSDM_FilterMspInit+0x17c>)
 800145c:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT1 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter1){
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a21      	ldr	r2, [pc, #132]	@ (80014e8 <HAL_DFSDM_FilterMspInit+0x190>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d131      	bne.n	80014cc <HAL_DFSDM_FilterMspInit+0x174>
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 8001468:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <HAL_DFSDM_FilterMspInit+0x194>)
 800146a:	4a21      	ldr	r2, [pc, #132]	@ (80014f0 <HAL_DFSDM_FilterMspInit+0x198>)
 800146c:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_0;
 800146e:	4b1f      	ldr	r3, [pc, #124]	@ (80014ec <HAL_DFSDM_FilterMspInit+0x194>)
 8001470:	2200      	movs	r2, #0
 8001472:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001474:	4b1d      	ldr	r3, [pc, #116]	@ (80014ec <HAL_DFSDM_FilterMspInit+0x194>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 800147a:	4b1c      	ldr	r3, [pc, #112]	@ (80014ec <HAL_DFSDM_FilterMspInit+0x194>)
 800147c:	2200      	movs	r2, #0
 800147e:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8001480:	4b1a      	ldr	r3, [pc, #104]	@ (80014ec <HAL_DFSDM_FilterMspInit+0x194>)
 8001482:	2280      	movs	r2, #128	@ 0x80
 8001484:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001486:	4b19      	ldr	r3, [pc, #100]	@ (80014ec <HAL_DFSDM_FilterMspInit+0x194>)
 8001488:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800148c:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800148e:	4b17      	ldr	r3, [pc, #92]	@ (80014ec <HAL_DFSDM_FilterMspInit+0x194>)
 8001490:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001494:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8001496:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <HAL_DFSDM_FilterMspInit+0x194>)
 8001498:	2220      	movs	r2, #32
 800149a:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 800149c:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <HAL_DFSDM_FilterMspInit+0x194>)
 800149e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 80014a4:	4811      	ldr	r0, [pc, #68]	@ (80014ec <HAL_DFSDM_FilterMspInit+0x194>)
 80014a6:	f000 ff5f 	bl	8002368 <HAL_DMA_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <HAL_DFSDM_FilterMspInit+0x15c>
    {
      Error_Handler();
 80014b0:	f7ff ff28 	bl	8001304 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt1);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a0d      	ldr	r2, [pc, #52]	@ (80014ec <HAL_DFSDM_FilterMspInit+0x194>)
 80014b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014ba:	4a0c      	ldr	r2, [pc, #48]	@ (80014ec <HAL_DFSDM_FilterMspInit+0x194>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt1);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a0a      	ldr	r2, [pc, #40]	@ (80014ec <HAL_DFSDM_FilterMspInit+0x194>)
 80014c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80014c6:	4a09      	ldr	r2, [pc, #36]	@ (80014ec <HAL_DFSDM_FilterMspInit+0x194>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6293      	str	r3, [r2, #40]	@ 0x28
  }

}
 80014cc:	bf00      	nop
 80014ce:	37b0      	adds	r7, #176	@ 0xb0
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20004a34 	.word	0x20004a34
 80014d8:	20004a30 	.word	0x20004a30
 80014dc:	40021000 	.word	0x40021000
 80014e0:	48000800 	.word	0x48000800
 80014e4:	48000400 	.word	0x48000400
 80014e8:	40016180 	.word	0x40016180
 80014ec:	20000158 	.word	0x20000158
 80014f0:	40020058 	.word	0x40020058

080014f4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b0ac      	sub	sp, #176	@ 0xb0
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2288      	movs	r2, #136	@ 0x88
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f007 ffc7 	bl	80094a8 <memset>
  if(DFSDM1_Init == 0)
 800151a:	4b3a      	ldr	r3, [pc, #232]	@ (8001604 <HAL_DFSDM_ChannelMspInit+0x110>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d16b      	bne.n	80015fa <HAL_DFSDM_ChannelMspInit+0x106>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001522:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001526:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4618      	mov	r0, r3
 8001534:	f002 f94e 	bl	80037d4 <HAL_RCCEx_PeriphCLKConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800153e:	f7ff fee1 	bl	8001304 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001542:	4b31      	ldr	r3, [pc, #196]	@ (8001608 <HAL_DFSDM_ChannelMspInit+0x114>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	3301      	adds	r3, #1
 8001548:	4a2f      	ldr	r2, [pc, #188]	@ (8001608 <HAL_DFSDM_ChannelMspInit+0x114>)
 800154a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800154c:	4b2e      	ldr	r3, [pc, #184]	@ (8001608 <HAL_DFSDM_ChannelMspInit+0x114>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d10b      	bne.n	800156c <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001554:	4b2d      	ldr	r3, [pc, #180]	@ (800160c <HAL_DFSDM_ChannelMspInit+0x118>)
 8001556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001558:	4a2c      	ldr	r2, [pc, #176]	@ (800160c <HAL_DFSDM_ChannelMspInit+0x118>)
 800155a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800155e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001560:	4b2a      	ldr	r3, [pc, #168]	@ (800160c <HAL_DFSDM_ChannelMspInit+0x118>)
 8001562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001564:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800156c:	4b27      	ldr	r3, [pc, #156]	@ (800160c <HAL_DFSDM_ChannelMspInit+0x118>)
 800156e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001570:	4a26      	ldr	r2, [pc, #152]	@ (800160c <HAL_DFSDM_ChannelMspInit+0x118>)
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001578:	4b24      	ldr	r3, [pc, #144]	@ (800160c <HAL_DFSDM_ChannelMspInit+0x118>)
 800157a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	4b21      	ldr	r3, [pc, #132]	@ (800160c <HAL_DFSDM_ChannelMspInit+0x118>)
 8001586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001588:	4a20      	ldr	r2, [pc, #128]	@ (800160c <HAL_DFSDM_ChannelMspInit+0x118>)
 800158a:	f043 0302 	orr.w	r3, r3, #2
 800158e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001590:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <HAL_DFSDM_ChannelMspInit+0x118>)
 8001592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PB1     ------> DFSDM1_DATIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800159c:	2304      	movs	r3, #4
 800159e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80015b4:	2306      	movs	r3, #6
 80015b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ba:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015be:	4619      	mov	r1, r3
 80015c0:	4813      	ldr	r0, [pc, #76]	@ (8001610 <HAL_DFSDM_ChannelMspInit+0x11c>)
 80015c2:	f001 f8c9 	bl	8002758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015c6:	2302      	movs	r3, #2
 80015c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80015de:	2306      	movs	r3, #6
 80015e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015e8:	4619      	mov	r1, r3
 80015ea:	480a      	ldr	r0, [pc, #40]	@ (8001614 <HAL_DFSDM_ChannelMspInit+0x120>)
 80015ec:	f001 f8b4 	bl	8002758 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80015f0:	4b04      	ldr	r3, [pc, #16]	@ (8001604 <HAL_DFSDM_ChannelMspInit+0x110>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	3301      	adds	r3, #1
 80015f6:	4a03      	ldr	r2, [pc, #12]	@ (8001604 <HAL_DFSDM_ChannelMspInit+0x110>)
 80015f8:	6013      	str	r3, [r2, #0]
  }

}
 80015fa:	bf00      	nop
 80015fc:	37b0      	adds	r7, #176	@ 0xb0
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20004a34 	.word	0x20004a34
 8001608:	20004a30 	.word	0x20004a30
 800160c:	40021000 	.word	0x40021000
 8001610:	48000800 	.word	0x48000800
 8001614:	48000400 	.word	0x48000400

08001618 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	@ 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a17      	ldr	r2, [pc, #92]	@ (8001694 <HAL_SPI_MspInit+0x7c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d128      	bne.n	800168c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800163a:	4b17      	ldr	r3, [pc, #92]	@ (8001698 <HAL_SPI_MspInit+0x80>)
 800163c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163e:	4a16      	ldr	r2, [pc, #88]	@ (8001698 <HAL_SPI_MspInit+0x80>)
 8001640:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001644:	6593      	str	r3, [r2, #88]	@ 0x58
 8001646:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <HAL_SPI_MspInit+0x80>)
 8001648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <HAL_SPI_MspInit+0x80>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001656:	4a10      	ldr	r2, [pc, #64]	@ (8001698 <HAL_SPI_MspInit+0x80>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800165e:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <HAL_SPI_MspInit+0x80>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800166a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800166e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800167c:	2305      	movs	r3, #5
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	4805      	ldr	r0, [pc, #20]	@ (800169c <HAL_SPI_MspInit+0x84>)
 8001688:	f001 f866 	bl	8002758 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800168c:	bf00      	nop
 800168e:	3728      	adds	r7, #40	@ 0x28
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40003800 	.word	0x40003800
 8001698:	40021000 	.word	0x40021000
 800169c:	48000400 	.word	0x48000400

080016a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b0ac      	sub	sp, #176	@ 0xb0
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2288      	movs	r2, #136	@ 0x88
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f007 fef1 	bl	80094a8 <memset>
  if(huart->Instance==USART2)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a21      	ldr	r2, [pc, #132]	@ (8001750 <HAL_UART_MspInit+0xb0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d13b      	bne.n	8001748 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016d0:	2302      	movs	r3, #2
 80016d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4618      	mov	r0, r3
 80016de:	f002 f879 	bl	80037d4 <HAL_RCCEx_PeriphCLKConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016e8:	f7ff fe0c 	bl	8001304 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ec:	4b19      	ldr	r3, [pc, #100]	@ (8001754 <HAL_UART_MspInit+0xb4>)
 80016ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f0:	4a18      	ldr	r2, [pc, #96]	@ (8001754 <HAL_UART_MspInit+0xb4>)
 80016f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016f8:	4b16      	ldr	r3, [pc, #88]	@ (8001754 <HAL_UART_MspInit+0xb4>)
 80016fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001704:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <HAL_UART_MspInit+0xb4>)
 8001706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001708:	4a12      	ldr	r2, [pc, #72]	@ (8001754 <HAL_UART_MspInit+0xb4>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001710:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <HAL_UART_MspInit+0xb4>)
 8001712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800171c:	230c      	movs	r3, #12
 800171e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001734:	2307      	movs	r3, #7
 8001736:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800173e:	4619      	mov	r1, r3
 8001740:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001744:	f001 f808 	bl	8002758 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001748:	bf00      	nop
 800174a:	37b0      	adds	r7, #176	@ 0xb0
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40004400 	.word	0x40004400
 8001754:	40021000 	.word	0x40021000

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <NMI_Handler+0x4>

08001760 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <HardFault_Handler+0x4>

08001768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <MemManage_Handler+0x4>

08001770 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <BusFault_Handler+0x4>

08001778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <UsageFault_Handler+0x4>

08001780 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ae:	f000 f949 	bl	8001a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 80017bc:	4802      	ldr	r0, [pc, #8]	@ (80017c8 <DMA1_Channel5_IRQHandler+0x10>)
 80017be:	f000 feeb 	bl	8002598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000158 	.word	0x20000158

080017cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(userControl_Pin);
 80017d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80017d4:	f001 f982 	bl	8002adc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}

080017dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	e00a      	b.n	8001804 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ee:	f3af 8000 	nop.w
 80017f2:	4601      	mov	r1, r0
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	60ba      	str	r2, [r7, #8]
 80017fa:	b2ca      	uxtb	r2, r1
 80017fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	3301      	adds	r3, #1
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	429a      	cmp	r2, r3
 800180a:	dbf0      	blt.n	80017ee <_read+0x12>
  }

  return len;
 800180c:	687b      	ldr	r3, [r7, #4]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	e009      	b.n	800183c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	60ba      	str	r2, [r7, #8]
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fd19 	bl	8001268 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3301      	adds	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	429a      	cmp	r2, r3
 8001842:	dbf1      	blt.n	8001828 <_write+0x12>
  }
  return len;
 8001844:	687b      	ldr	r3, [r7, #4]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <_close>:

int _close(int file)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001876:	605a      	str	r2, [r3, #4]
  return 0;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <_isatty>:

int _isatty(int file)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c0:	4a14      	ldr	r2, [pc, #80]	@ (8001914 <_sbrk+0x5c>)
 80018c2:	4b15      	ldr	r3, [pc, #84]	@ (8001918 <_sbrk+0x60>)
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018cc:	4b13      	ldr	r3, [pc, #76]	@ (800191c <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d4:	4b11      	ldr	r3, [pc, #68]	@ (800191c <_sbrk+0x64>)
 80018d6:	4a12      	ldr	r2, [pc, #72]	@ (8001920 <_sbrk+0x68>)
 80018d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018da:	4b10      	ldr	r3, [pc, #64]	@ (800191c <_sbrk+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d207      	bcs.n	80018f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e8:	f007 fde6 	bl	80094b8 <__errno>
 80018ec:	4603      	mov	r3, r0
 80018ee:	220c      	movs	r2, #12
 80018f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018f6:	e009      	b.n	800190c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f8:	4b08      	ldr	r3, [pc, #32]	@ (800191c <_sbrk+0x64>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fe:	4b07      	ldr	r3, [pc, #28]	@ (800191c <_sbrk+0x64>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	4a05      	ldr	r2, [pc, #20]	@ (800191c <_sbrk+0x64>)
 8001908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20018000 	.word	0x20018000
 8001918:	00000400 	.word	0x00000400
 800191c:	20004a38 	.word	0x20004a38
 8001920:	20004df8 	.word	0x20004df8

08001924 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001928:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <SystemInit+0x20>)
 800192a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800192e:	4a05      	ldr	r2, [pc, #20]	@ (8001944 <SystemInit+0x20>)
 8001930:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001934:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001948:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001980 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800194c:	f7ff ffea 	bl	8001924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001950:	480c      	ldr	r0, [pc, #48]	@ (8001984 <LoopForever+0x6>)
  ldr r1, =_edata
 8001952:	490d      	ldr	r1, [pc, #52]	@ (8001988 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001954:	4a0d      	ldr	r2, [pc, #52]	@ (800198c <LoopForever+0xe>)
  movs r3, #0
 8001956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001958:	e002      	b.n	8001960 <LoopCopyDataInit>

0800195a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800195c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195e:	3304      	adds	r3, #4

08001960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001964:	d3f9      	bcc.n	800195a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001966:	4a0a      	ldr	r2, [pc, #40]	@ (8001990 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001968:	4c0a      	ldr	r4, [pc, #40]	@ (8001994 <LoopForever+0x16>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800196c:	e001      	b.n	8001972 <LoopFillZerobss>

0800196e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001970:	3204      	adds	r2, #4

08001972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001974:	d3fb      	bcc.n	800196e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001976:	f007 fda5 	bl	80094c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800197a:	f7ff f9b5 	bl	8000ce8 <main>

0800197e <LoopForever>:

LoopForever:
    b LoopForever
 800197e:	e7fe      	b.n	800197e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001980:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001988:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 800198c:	0800a858 	.word	0x0800a858
  ldr r2, =_sbss
 8001990:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001994:	20004df4 	.word	0x20004df4

08001998 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001998:	e7fe      	b.n	8001998 <ADC1_2_IRQHandler>

0800199a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a4:	2003      	movs	r0, #3
 80019a6:	f000 f961 	bl	8001c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019aa:	200f      	movs	r0, #15
 80019ac:	f000 f80e 	bl	80019cc <HAL_InitTick>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	71fb      	strb	r3, [r7, #7]
 80019ba:	e001      	b.n	80019c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019bc:	f7ff fca8 	bl	8001310 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019c0:	79fb      	ldrb	r3, [r7, #7]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019d8:	4b17      	ldr	r3, [pc, #92]	@ (8001a38 <HAL_InitTick+0x6c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d023      	beq.n	8001a28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019e0:	4b16      	ldr	r3, [pc, #88]	@ (8001a3c <HAL_InitTick+0x70>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b14      	ldr	r3, [pc, #80]	@ (8001a38 <HAL_InitTick+0x6c>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4619      	mov	r1, r3
 80019ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 f96d 	bl	8001cd6 <HAL_SYSTICK_Config>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10f      	bne.n	8001a22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b0f      	cmp	r3, #15
 8001a06:	d809      	bhi.n	8001a1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a10:	f000 f937 	bl	8001c82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a14:	4a0a      	ldr	r2, [pc, #40]	@ (8001a40 <HAL_InitTick+0x74>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e007      	b.n	8001a2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	e004      	b.n	8001a2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	73fb      	strb	r3, [r7, #15]
 8001a26:	e001      	b.n	8001a2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	2000003c 	.word	0x2000003c
 8001a3c:	20000034 	.word	0x20000034
 8001a40:	20000038 	.word	0x20000038

08001a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a48:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <HAL_IncTick+0x20>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_IncTick+0x24>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4413      	add	r3, r2
 8001a54:	4a04      	ldr	r2, [pc, #16]	@ (8001a68 <HAL_IncTick+0x24>)
 8001a56:	6013      	str	r3, [r2, #0]
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	2000003c 	.word	0x2000003c
 8001a68:	20004a3c 	.word	0x20004a3c

08001a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a70:	4b03      	ldr	r3, [pc, #12]	@ (8001a80 <HAL_GetTick+0x14>)
 8001a72:	681b      	ldr	r3, [r3, #0]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20004a3c 	.word	0x20004a3c

08001a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a8c:	f7ff ffee 	bl	8001a6c <HAL_GetTick>
 8001a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a9c:	d005      	beq.n	8001aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <HAL_Delay+0x44>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aaa:	bf00      	nop
 8001aac:	f7ff ffde 	bl	8001a6c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d8f7      	bhi.n	8001aac <HAL_Delay+0x28>
  {
  }
}
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	2000003c 	.word	0x2000003c

08001acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001adc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001af8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afe:	4a04      	ldr	r2, [pc, #16]	@ (8001b10 <__NVIC_SetPriorityGrouping+0x44>)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	60d3      	str	r3, [r2, #12]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b18:	4b04      	ldr	r3, [pc, #16]	@ (8001b2c <__NVIC_GetPriorityGrouping+0x18>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	0a1b      	lsrs	r3, r3, #8
 8001b1e:	f003 0307 	and.w	r3, r3, #7
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	db0b      	blt.n	8001b5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	f003 021f 	and.w	r2, r3, #31
 8001b48:	4907      	ldr	r1, [pc, #28]	@ (8001b68 <__NVIC_EnableIRQ+0x38>)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	2001      	movs	r0, #1
 8001b52:	fa00 f202 	lsl.w	r2, r0, r2
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000e100 	.word	0xe000e100

08001b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	6039      	str	r1, [r7, #0]
 8001b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	db0a      	blt.n	8001b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	490c      	ldr	r1, [pc, #48]	@ (8001bb8 <__NVIC_SetPriority+0x4c>)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	0112      	lsls	r2, r2, #4
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	440b      	add	r3, r1
 8001b90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b94:	e00a      	b.n	8001bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4908      	ldr	r1, [pc, #32]	@ (8001bbc <__NVIC_SetPriority+0x50>)
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	3b04      	subs	r3, #4
 8001ba4:	0112      	lsls	r2, r2, #4
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	440b      	add	r3, r1
 8001baa:	761a      	strb	r2, [r3, #24]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000e100 	.word	0xe000e100
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	@ 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f1c3 0307 	rsb	r3, r3, #7
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	bf28      	it	cs
 8001bde:	2304      	movcs	r3, #4
 8001be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3304      	adds	r3, #4
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	d902      	bls.n	8001bf0 <NVIC_EncodePriority+0x30>
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3b03      	subs	r3, #3
 8001bee:	e000      	b.n	8001bf2 <NVIC_EncodePriority+0x32>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	401a      	ands	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c12:	43d9      	mvns	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	4313      	orrs	r3, r2
         );
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3724      	adds	r7, #36	@ 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c38:	d301      	bcc.n	8001c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00f      	b.n	8001c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c68 <SysTick_Config+0x40>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c46:	210f      	movs	r1, #15
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c4c:	f7ff ff8e 	bl	8001b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c50:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <SysTick_Config+0x40>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c56:	4b04      	ldr	r3, [pc, #16]	@ (8001c68 <SysTick_Config+0x40>)
 8001c58:	2207      	movs	r2, #7
 8001c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	e000e010 	.word	0xe000e010

08001c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ff29 	bl	8001acc <__NVIC_SetPriorityGrouping>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4603      	mov	r3, r0
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c94:	f7ff ff3e 	bl	8001b14 <__NVIC_GetPriorityGrouping>
 8001c98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	6978      	ldr	r0, [r7, #20]
 8001ca0:	f7ff ff8e 	bl	8001bc0 <NVIC_EncodePriority>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff5d 	bl	8001b6c <__NVIC_SetPriority>
}
 8001cb2:	bf00      	nop
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff31 	bl	8001b30 <__NVIC_EnableIRQ>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff ffa2 	bl	8001c28 <SysTick_Config>
 8001ce4:	4603      	mov	r3, r0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e0ac      	b.n	8001e5c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 fa8c 	bl	8002224 <DFSDM_GetChannelFromInstance>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	4a55      	ldr	r2, [pc, #340]	@ (8001e64 <HAL_DFSDM_ChannelInit+0x174>)
 8001d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e09f      	b.n	8001e5c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff fbe9 	bl	80014f4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001d22:	4b51      	ldr	r3, [pc, #324]	@ (8001e68 <HAL_DFSDM_ChannelInit+0x178>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	3301      	adds	r3, #1
 8001d28:	4a4f      	ldr	r2, [pc, #316]	@ (8001e68 <HAL_DFSDM_ChannelInit+0x178>)
 8001d2a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001d2c:	4b4e      	ldr	r3, [pc, #312]	@ (8001e68 <HAL_DFSDM_ChannelInit+0x178>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d125      	bne.n	8001d80 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001d34:	4b4d      	ldr	r3, [pc, #308]	@ (8001e6c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a4c      	ldr	r2, [pc, #304]	@ (8001e6c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d3a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001d3e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001d40:	4b4a      	ldr	r3, [pc, #296]	@ (8001e6c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	4948      	ldr	r1, [pc, #288]	@ (8001e6c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001d4e:	4b47      	ldr	r3, [pc, #284]	@ (8001e6c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a46      	ldr	r2, [pc, #280]	@ (8001e6c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d54:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001d58:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	791b      	ldrb	r3, [r3, #4]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d108      	bne.n	8001d74 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001d62:	4b42      	ldr	r3, [pc, #264]	@ (8001e6c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	041b      	lsls	r3, r3, #16
 8001d6e:	493f      	ldr	r1, [pc, #252]	@ (8001e6c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001d74:	4b3d      	ldr	r3, [pc, #244]	@ (8001e6c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a3c      	ldr	r2, [pc, #240]	@ (8001e6c <HAL_DFSDM_ChannelInit+0x17c>)
 8001d7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001d7e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8001d8e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6819      	ldr	r1, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001d9e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001da4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 020f 	bic.w	r2, r2, #15
 8001dbc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6819      	ldr	r1, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001de4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6899      	ldr	r1, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df4:	3b01      	subs	r3, #1
 8001df6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f002 0207 	and.w	r2, r2, #7
 8001e10:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6859      	ldr	r1, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e3c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f9ea 	bl	8002224 <DFSDM_GetChannelFromInstance>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4904      	ldr	r1, [pc, #16]	@ (8001e64 <HAL_DFSDM_ChannelInit+0x174>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20004a44 	.word	0x20004a44
 8001e68:	20004a40 	.word	0x20004a40
 8001e6c:	40016000 	.word	0x40016000

08001e70 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0ca      	b.n	8002018 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a66      	ldr	r2, [pc, #408]	@ (8002020 <HAL_DFSDM_FilterInit+0x1b0>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d109      	bne.n	8001ea0 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d003      	beq.n	8001e9c <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0bb      	b.n	8002018 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff fa4d 	bl	8001358 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8001ecc:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	7a1b      	ldrb	r3, [r3, #8]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d108      	bne.n	8001ee8 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	e007      	b.n	8001ef8 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8001ef6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	7a5b      	ldrb	r3, [r3, #9]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d108      	bne.n	8001f12 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	e007      	b.n	8001f22 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001f20:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	f423 43ce 	bic.w	r3, r3, #26368	@ 0x6700
 8001f30:	f023 0308 	bic.w	r3, r3, #8
 8001f34:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d108      	bne.n	8001f50 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6819      	ldr	r1, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	7c1b      	ldrb	r3, [r3, #16]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d108      	bne.n	8001f6a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0210 	orr.w	r2, r2, #16
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	e007      	b.n	8001f7a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0210 	bic.w	r2, r2, #16
 8001f78:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	7c5b      	ldrb	r3, [r3, #17]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d108      	bne.n	8001f94 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 0220 	orr.w	r2, r2, #32
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	e007      	b.n	8001fa4 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0220 	bic.w	r2, r2, #32
 8001fa2:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 8001fb2:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8001fb6:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6959      	ldr	r1, [r3, #20]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001fca:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd0:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001fd2:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699a      	ldr	r2, [r3, #24]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	7c1a      	ldrb	r2, [r3, #16]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f042 0201 	orr.w	r2, r2, #1
 800200c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40016100 	.word	0x40016100

08002024 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800203a:	2b00      	cmp	r3, #0
 800203c:	d02e      	beq.n	800209c <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002044:	2bff      	cmp	r3, #255	@ 0xff
 8002046:	d029      	beq.n	800209c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002056:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800205a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d10d      	bne.n	800207e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	021b      	lsls	r3, r3, #8
 800206c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002070:	431a      	orrs	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	e00a      	b.n	8002094 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6819      	ldr	r1, [r3, #0]
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	021b      	lsls	r3, r3, #8
 8002088:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	631a      	str	r2, [r3, #48]	@ 0x30
 800209a:	e001      	b.n	80020a0 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80020a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	371c      	adds	r7, #28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
	...

080020b0 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d102      	bne.n	80020d2 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	75fb      	strb	r3, [r7, #23]
 80020d0:	e064      	b.n	800219c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80020e0:	d002      	beq.n	80020e8 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	75fb      	strb	r3, [r7, #23]
 80020e6:	e059      	b.n	800219c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10e      	bne.n	800210e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10a      	bne.n	800210e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020fc:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d105      	bne.n	800210e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d002      	beq.n	800210e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	75fb      	strb	r3, [r7, #23]
 800210c:	e046      	b.n	800219c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10b      	bne.n	800212e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800211a:	2b00      	cmp	r3, #0
 800211c:	d107      	bne.n	800212e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002122:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002124:	2b20      	cmp	r3, #32
 8002126:	d102      	bne.n	800212e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	75fb      	strb	r3, [r7, #23]
 800212c:	e036      	b.n	800219c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002134:	2b01      	cmp	r3, #1
 8002136:	d004      	beq.n	8002142 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800213e:	2b03      	cmp	r3, #3
 8002140:	d12a      	bne.n	8002198 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002146:	4a18      	ldr	r2, [pc, #96]	@ (80021a8 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8002148:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214e:	4a17      	ldr	r2, [pc, #92]	@ (80021ac <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8002150:	635a      	str	r2, [r3, #52]	@ 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002156:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8002158:	2b20      	cmp	r3, #32
 800215a:	d101      	bne.n	8002160 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 800215c:	4a14      	ldr	r2, [pc, #80]	@ (80021b0 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800215e:	e000      	b.n	8002162 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8002160:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002166:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	331c      	adds	r3, #28
 8002172:	4619      	mov	r1, r3
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f000 f9ae 	bl	80024d8 <HAL_DMA_Start_IT>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d006      	beq.n	8002190 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	22ff      	movs	r2, #255	@ 0xff
 8002186:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800218e:	e005      	b.n	800219c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 f893 	bl	80022bc <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002196:	e001      	b.n	800219c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 800219c:	7dfb      	ldrb	r3, [r7, #23]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	080021e5 	.word	0x080021e5
 80021ac:	08002201 	.word	0x08002201
 80021b0:	080021c9 	.word	0x080021c9

080021b4 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d4:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f7ff f868 	bl	80012ac <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80021dc:	bf00      	nop
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f0:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f7ff f870 	bl	80012d8 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2203      	movs	r2, #3
 8002212:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f7ff ffcd 	bl	80021b4 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a1c      	ldr	r2, [pc, #112]	@ (80022a0 <DFSDM_GetChannelFromInstance+0x7c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d102      	bne.n	800223a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	e02b      	b.n	8002292 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a19      	ldr	r2, [pc, #100]	@ (80022a4 <DFSDM_GetChannelFromInstance+0x80>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d102      	bne.n	8002248 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002242:	2301      	movs	r3, #1
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	e024      	b.n	8002292 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a17      	ldr	r2, [pc, #92]	@ (80022a8 <DFSDM_GetChannelFromInstance+0x84>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d102      	bne.n	8002256 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002250:	2302      	movs	r3, #2
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	e01d      	b.n	8002292 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a14      	ldr	r2, [pc, #80]	@ (80022ac <DFSDM_GetChannelFromInstance+0x88>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d102      	bne.n	8002264 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800225e:	2304      	movs	r3, #4
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	e016      	b.n	8002292 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a12      	ldr	r2, [pc, #72]	@ (80022b0 <DFSDM_GetChannelFromInstance+0x8c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d102      	bne.n	8002272 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800226c:	2305      	movs	r3, #5
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	e00f      	b.n	8002292 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a0f      	ldr	r2, [pc, #60]	@ (80022b4 <DFSDM_GetChannelFromInstance+0x90>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d102      	bne.n	8002280 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800227a:	2306      	movs	r3, #6
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	e008      	b.n	8002292 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a0d      	ldr	r2, [pc, #52]	@ (80022b8 <DFSDM_GetChannelFromInstance+0x94>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d102      	bne.n	800228e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002288:	2307      	movs	r3, #7
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	e001      	b.n	8002292 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800228e:	2303      	movs	r3, #3
 8002290:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002292:	68fb      	ldr	r3, [r7, #12]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	40016000 	.word	0x40016000
 80022a4:	40016020 	.word	0x40016020
 80022a8:	40016040 	.word	0x40016040
 80022ac:	40016080 	.word	0x40016080
 80022b0:	400160a0 	.word	0x400160a0
 80022b4:	400160c0 	.word	0x400160c0
 80022b8:	400160e0 	.word	0x400160e0

080022bc <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d108      	bne.n	80022de <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	e033      	b.n	8002346 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0201 	bic.w	r2, r2, #1
 80022ec:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80022fc:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f042 0201 	orr.w	r2, r2, #1
 800230c:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002314:	2b03      	cmp	r3, #3
 8002316:	d116      	bne.n	8002346 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800231c:	2b00      	cmp	r3, #0
 800231e:	d107      	bne.n	8002330 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0202 	orr.w	r2, r2, #2
 800232e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8002336:	2b01      	cmp	r3, #1
 8002338:	d102      	bne.n	8002340 <DFSDM_RegConvStart+0x84>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233e:	e000      	b.n	8002342 <DFSDM_RegConvStart+0x86>
 8002340:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <DFSDM_RegConvStart+0x98>
 8002350:	2202      	movs	r2, #2
 8002352:	e000      	b.n	8002356 <DFSDM_RegConvStart+0x9a>
 8002354:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e098      	b.n	80024ac <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	4b4d      	ldr	r3, [pc, #308]	@ (80024b8 <HAL_DMA_Init+0x150>)
 8002382:	429a      	cmp	r2, r3
 8002384:	d80f      	bhi.n	80023a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	4b4b      	ldr	r3, [pc, #300]	@ (80024bc <HAL_DMA_Init+0x154>)
 800238e:	4413      	add	r3, r2
 8002390:	4a4b      	ldr	r2, [pc, #300]	@ (80024c0 <HAL_DMA_Init+0x158>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	009a      	lsls	r2, r3, #2
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a48      	ldr	r2, [pc, #288]	@ (80024c4 <HAL_DMA_Init+0x15c>)
 80023a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80023a4:	e00e      	b.n	80023c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	4b46      	ldr	r3, [pc, #280]	@ (80024c8 <HAL_DMA_Init+0x160>)
 80023ae:	4413      	add	r3, r2
 80023b0:	4a43      	ldr	r2, [pc, #268]	@ (80024c0 <HAL_DMA_Init+0x158>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	091b      	lsrs	r3, r3, #4
 80023b8:	009a      	lsls	r2, r3, #2
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a42      	ldr	r2, [pc, #264]	@ (80024cc <HAL_DMA_Init+0x164>)
 80023c2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80023da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80023e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002400:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4313      	orrs	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800241e:	d039      	beq.n	8002494 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002424:	4a27      	ldr	r2, [pc, #156]	@ (80024c4 <HAL_DMA_Init+0x15c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d11a      	bne.n	8002460 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800242a:	4b29      	ldr	r3, [pc, #164]	@ (80024d0 <HAL_DMA_Init+0x168>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002432:	f003 031c 	and.w	r3, r3, #28
 8002436:	210f      	movs	r1, #15
 8002438:	fa01 f303 	lsl.w	r3, r1, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	4924      	ldr	r1, [pc, #144]	@ (80024d0 <HAL_DMA_Init+0x168>)
 8002440:	4013      	ands	r3, r2
 8002442:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002444:	4b22      	ldr	r3, [pc, #136]	@ (80024d0 <HAL_DMA_Init+0x168>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6859      	ldr	r1, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002450:	f003 031c 	and.w	r3, r3, #28
 8002454:	fa01 f303 	lsl.w	r3, r1, r3
 8002458:	491d      	ldr	r1, [pc, #116]	@ (80024d0 <HAL_DMA_Init+0x168>)
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]
 800245e:	e019      	b.n	8002494 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002460:	4b1c      	ldr	r3, [pc, #112]	@ (80024d4 <HAL_DMA_Init+0x16c>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002468:	f003 031c 	and.w	r3, r3, #28
 800246c:	210f      	movs	r1, #15
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	4917      	ldr	r1, [pc, #92]	@ (80024d4 <HAL_DMA_Init+0x16c>)
 8002476:	4013      	ands	r3, r2
 8002478:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800247a:	4b16      	ldr	r3, [pc, #88]	@ (80024d4 <HAL_DMA_Init+0x16c>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6859      	ldr	r1, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002486:	f003 031c 	and.w	r3, r3, #28
 800248a:	fa01 f303 	lsl.w	r3, r1, r3
 800248e:	4911      	ldr	r1, [pc, #68]	@ (80024d4 <HAL_DMA_Init+0x16c>)
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	40020407 	.word	0x40020407
 80024bc:	bffdfff8 	.word	0xbffdfff8
 80024c0:	cccccccd 	.word	0xcccccccd
 80024c4:	40020000 	.word	0x40020000
 80024c8:	bffdfbf8 	.word	0xbffdfbf8
 80024cc:	40020400 	.word	0x40020400
 80024d0:	400200a8 	.word	0x400200a8
 80024d4:	400204a8 	.word	0x400204a8

080024d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_DMA_Start_IT+0x20>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e04b      	b.n	8002590 <HAL_DMA_Start_IT+0xb8>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b01      	cmp	r3, #1
 800250a:	d13a      	bne.n	8002582 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0201 	bic.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68b9      	ldr	r1, [r7, #8]
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 f8e0 	bl	80026f6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	2b00      	cmp	r3, #0
 800253c:	d008      	beq.n	8002550 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f042 020e 	orr.w	r2, r2, #14
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	e00f      	b.n	8002570 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0204 	bic.w	r2, r2, #4
 800255e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 020a 	orr.w	r2, r2, #10
 800256e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e005      	b.n	800258e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800258a:	2302      	movs	r3, #2
 800258c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800258e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b4:	f003 031c 	and.w	r3, r3, #28
 80025b8:	2204      	movs	r2, #4
 80025ba:	409a      	lsls	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d026      	beq.n	8002612 <HAL_DMA_IRQHandler+0x7a>
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d021      	beq.n	8002612 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d107      	bne.n	80025ec <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0204 	bic.w	r2, r2, #4
 80025ea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f0:	f003 021c 	and.w	r2, r3, #28
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	2104      	movs	r1, #4
 80025fa:	fa01 f202 	lsl.w	r2, r1, r2
 80025fe:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002604:	2b00      	cmp	r3, #0
 8002606:	d071      	beq.n	80026ec <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002610:	e06c      	b.n	80026ec <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002616:	f003 031c 	and.w	r3, r3, #28
 800261a:	2202      	movs	r2, #2
 800261c:	409a      	lsls	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4013      	ands	r3, r2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d02e      	beq.n	8002684 <HAL_DMA_IRQHandler+0xec>
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d029      	beq.n	8002684 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10b      	bne.n	8002656 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 020a 	bic.w	r2, r2, #10
 800264c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265a:	f003 021c 	and.w	r2, r3, #28
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	2102      	movs	r1, #2
 8002664:	fa01 f202 	lsl.w	r2, r1, r2
 8002668:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002676:	2b00      	cmp	r3, #0
 8002678:	d038      	beq.n	80026ec <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002682:	e033      	b.n	80026ec <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002688:	f003 031c 	and.w	r3, r3, #28
 800268c:	2208      	movs	r2, #8
 800268e:	409a      	lsls	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4013      	ands	r3, r2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d02a      	beq.n	80026ee <HAL_DMA_IRQHandler+0x156>
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d025      	beq.n	80026ee <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 020e 	bic.w	r2, r2, #14
 80026b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b6:	f003 021c 	and.w	r2, r3, #28
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	2101      	movs	r1, #1
 80026c0:	fa01 f202 	lsl.w	r2, r1, r2
 80026c4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d004      	beq.n	80026ee <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
}
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b085      	sub	sp, #20
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002708:	f003 021c 	and.w	r2, r3, #28
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002710:	2101      	movs	r1, #1
 8002712:	fa01 f202 	lsl.w	r2, r1, r2
 8002716:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b10      	cmp	r3, #16
 8002726:	d108      	bne.n	800273a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002738:	e007      	b.n	800274a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	60da      	str	r2, [r3, #12]
}
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002766:	e17f      	b.n	8002a68 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	2101      	movs	r1, #1
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	4013      	ands	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 8171 	beq.w	8002a62 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b01      	cmp	r3, #1
 800278a:	d005      	beq.n	8002798 <HAL_GPIO_Init+0x40>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d130      	bne.n	80027fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	2203      	movs	r2, #3
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4013      	ands	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027ce:	2201      	movs	r2, #1
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4013      	ands	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	091b      	lsrs	r3, r3, #4
 80027e4:	f003 0201 	and.w	r2, r3, #1
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b03      	cmp	r3, #3
 8002804:	d118      	bne.n	8002838 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800280c:	2201      	movs	r2, #1
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4013      	ands	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	08db      	lsrs	r3, r3, #3
 8002822:	f003 0201 	and.w	r2, r3, #1
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	2b03      	cmp	r3, #3
 8002842:	d017      	beq.n	8002874 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	2203      	movs	r2, #3
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d123      	bne.n	80028c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	08da      	lsrs	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3208      	adds	r2, #8
 8002888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800288c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	220f      	movs	r2, #15
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	08da      	lsrs	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3208      	adds	r2, #8
 80028c2:	6939      	ldr	r1, [r7, #16]
 80028c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	2203      	movs	r2, #3
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4013      	ands	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0203 	and.w	r2, r3, #3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 80ac 	beq.w	8002a62 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290a:	4b5f      	ldr	r3, [pc, #380]	@ (8002a88 <HAL_GPIO_Init+0x330>)
 800290c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800290e:	4a5e      	ldr	r2, [pc, #376]	@ (8002a88 <HAL_GPIO_Init+0x330>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	6613      	str	r3, [r2, #96]	@ 0x60
 8002916:	4b5c      	ldr	r3, [pc, #368]	@ (8002a88 <HAL_GPIO_Init+0x330>)
 8002918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002922:	4a5a      	ldr	r2, [pc, #360]	@ (8002a8c <HAL_GPIO_Init+0x334>)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	089b      	lsrs	r3, r3, #2
 8002928:	3302      	adds	r3, #2
 800292a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	220f      	movs	r2, #15
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4013      	ands	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800294c:	d025      	beq.n	800299a <HAL_GPIO_Init+0x242>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a4f      	ldr	r2, [pc, #316]	@ (8002a90 <HAL_GPIO_Init+0x338>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d01f      	beq.n	8002996 <HAL_GPIO_Init+0x23e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a4e      	ldr	r2, [pc, #312]	@ (8002a94 <HAL_GPIO_Init+0x33c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d019      	beq.n	8002992 <HAL_GPIO_Init+0x23a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a4d      	ldr	r2, [pc, #308]	@ (8002a98 <HAL_GPIO_Init+0x340>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d013      	beq.n	800298e <HAL_GPIO_Init+0x236>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a4c      	ldr	r2, [pc, #304]	@ (8002a9c <HAL_GPIO_Init+0x344>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d00d      	beq.n	800298a <HAL_GPIO_Init+0x232>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a4b      	ldr	r2, [pc, #300]	@ (8002aa0 <HAL_GPIO_Init+0x348>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d007      	beq.n	8002986 <HAL_GPIO_Init+0x22e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a4a      	ldr	r2, [pc, #296]	@ (8002aa4 <HAL_GPIO_Init+0x34c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d101      	bne.n	8002982 <HAL_GPIO_Init+0x22a>
 800297e:	2306      	movs	r3, #6
 8002980:	e00c      	b.n	800299c <HAL_GPIO_Init+0x244>
 8002982:	2307      	movs	r3, #7
 8002984:	e00a      	b.n	800299c <HAL_GPIO_Init+0x244>
 8002986:	2305      	movs	r3, #5
 8002988:	e008      	b.n	800299c <HAL_GPIO_Init+0x244>
 800298a:	2304      	movs	r3, #4
 800298c:	e006      	b.n	800299c <HAL_GPIO_Init+0x244>
 800298e:	2303      	movs	r3, #3
 8002990:	e004      	b.n	800299c <HAL_GPIO_Init+0x244>
 8002992:	2302      	movs	r3, #2
 8002994:	e002      	b.n	800299c <HAL_GPIO_Init+0x244>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <HAL_GPIO_Init+0x244>
 800299a:	2300      	movs	r3, #0
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	f002 0203 	and.w	r2, r2, #3
 80029a2:	0092      	lsls	r2, r2, #2
 80029a4:	4093      	lsls	r3, r2
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029ac:	4937      	ldr	r1, [pc, #220]	@ (8002a8c <HAL_GPIO_Init+0x334>)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	089b      	lsrs	r3, r3, #2
 80029b2:	3302      	adds	r3, #2
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029ba:	4b3b      	ldr	r3, [pc, #236]	@ (8002aa8 <HAL_GPIO_Init+0x350>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	43db      	mvns	r3, r3
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4013      	ands	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029de:	4a32      	ldr	r2, [pc, #200]	@ (8002aa8 <HAL_GPIO_Init+0x350>)
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029e4:	4b30      	ldr	r3, [pc, #192]	@ (8002aa8 <HAL_GPIO_Init+0x350>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	43db      	mvns	r3, r3
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4013      	ands	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a08:	4a27      	ldr	r2, [pc, #156]	@ (8002aa8 <HAL_GPIO_Init+0x350>)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a0e:	4b26      	ldr	r3, [pc, #152]	@ (8002aa8 <HAL_GPIO_Init+0x350>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a32:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa8 <HAL_GPIO_Init+0x350>)
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a38:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa8 <HAL_GPIO_Init+0x350>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a5c:	4a12      	ldr	r2, [pc, #72]	@ (8002aa8 <HAL_GPIO_Init+0x350>)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	3301      	adds	r3, #1
 8002a66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f47f ae78 	bne.w	8002768 <HAL_GPIO_Init+0x10>
  }
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	371c      	adds	r7, #28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40010000 	.word	0x40010000
 8002a90:	48000400 	.word	0x48000400
 8002a94:	48000800 	.word	0x48000800
 8002a98:	48000c00 	.word	0x48000c00
 8002a9c:	48001000 	.word	0x48001000
 8002aa0:	48001400 	.word	0x48001400
 8002aa4:	48001800 	.word	0x48001800
 8002aa8:	40010400 	.word	0x40010400

08002aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	807b      	strh	r3, [r7, #2]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002abc:	787b      	ldrb	r3, [r7, #1]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ac2:	887a      	ldrh	r2, [r7, #2]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ac8:	e002      	b.n	8002ad0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002aca:	887a      	ldrh	r2, [r7, #2]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ae6:	4b08      	ldr	r3, [pc, #32]	@ (8002b08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	88fb      	ldrh	r3, [r7, #6]
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d006      	beq.n	8002b00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002af2:	4a05      	ldr	r2, [pc, #20]	@ (8002b08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002af8:	88fb      	ldrh	r3, [r7, #6]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe fbc6 	bl	800128c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b00:	bf00      	nop
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40010400 	.word	0x40010400

08002b0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b10:	4b04      	ldr	r3, [pc, #16]	@ (8002b24 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40007000 	.word	0x40007000

08002b28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b36:	d130      	bne.n	8002b9a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b38:	4b23      	ldr	r3, [pc, #140]	@ (8002bc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b44:	d038      	beq.n	8002bb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b46:	4b20      	ldr	r3, [pc, #128]	@ (8002bc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8002bc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b50:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b54:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b56:	4b1d      	ldr	r3, [pc, #116]	@ (8002bcc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2232      	movs	r2, #50	@ 0x32
 8002b5c:	fb02 f303 	mul.w	r3, r2, r3
 8002b60:	4a1b      	ldr	r2, [pc, #108]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b62:	fba2 2303 	umull	r2, r3, r2, r3
 8002b66:	0c9b      	lsrs	r3, r3, #18
 8002b68:	3301      	adds	r3, #1
 8002b6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b6c:	e002      	b.n	8002b74 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	3b01      	subs	r3, #1
 8002b72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b74:	4b14      	ldr	r3, [pc, #80]	@ (8002bc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b80:	d102      	bne.n	8002b88 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f2      	bne.n	8002b6e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b88:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b94:	d110      	bne.n	8002bb8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e00f      	b.n	8002bba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ba6:	d007      	beq.n	8002bb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ba8:	4b07      	ldr	r3, [pc, #28]	@ (8002bc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bb0:	4a05      	ldr	r2, [pc, #20]	@ (8002bc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bb6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40007000 	.word	0x40007000
 8002bcc:	20000034 	.word	0x20000034
 8002bd0:	431bde83 	.word	0x431bde83

08002bd4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e3ca      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002be6:	4b97      	ldr	r3, [pc, #604]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bf0:	4b94      	ldr	r3, [pc, #592]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80e4 	beq.w	8002dd0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <HAL_RCC_OscConfig+0x4a>
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	2b0c      	cmp	r3, #12
 8002c12:	f040 808b 	bne.w	8002d2c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	f040 8087 	bne.w	8002d2c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c1e:	4b89      	ldr	r3, [pc, #548]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d005      	beq.n	8002c36 <HAL_RCC_OscConfig+0x62>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e3a2      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1a      	ldr	r2, [r3, #32]
 8002c3a:	4b82      	ldr	r3, [pc, #520]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d004      	beq.n	8002c50 <HAL_RCC_OscConfig+0x7c>
 8002c46:	4b7f      	ldr	r3, [pc, #508]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c4e:	e005      	b.n	8002c5c <HAL_RCC_OscConfig+0x88>
 8002c50:	4b7c      	ldr	r3, [pc, #496]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c56:	091b      	lsrs	r3, r3, #4
 8002c58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d223      	bcs.n	8002ca8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fd55 	bl	8003714 <RCC_SetFlashLatencyFromMSIRange>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e383      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c74:	4b73      	ldr	r3, [pc, #460]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a72      	ldr	r2, [pc, #456]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002c7a:	f043 0308 	orr.w	r3, r3, #8
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	4b70      	ldr	r3, [pc, #448]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	496d      	ldr	r1, [pc, #436]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c92:	4b6c      	ldr	r3, [pc, #432]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	021b      	lsls	r3, r3, #8
 8002ca0:	4968      	ldr	r1, [pc, #416]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	604b      	str	r3, [r1, #4]
 8002ca6:	e025      	b.n	8002cf4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ca8:	4b66      	ldr	r3, [pc, #408]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a65      	ldr	r2, [pc, #404]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002cae:	f043 0308 	orr.w	r3, r3, #8
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	4b63      	ldr	r3, [pc, #396]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	4960      	ldr	r1, [pc, #384]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cc6:	4b5f      	ldr	r3, [pc, #380]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	021b      	lsls	r3, r3, #8
 8002cd4:	495b      	ldr	r1, [pc, #364]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d109      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 fd15 	bl	8003714 <RCC_SetFlashLatencyFromMSIRange>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e343      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cf4:	f000 fc4a 	bl	800358c <HAL_RCC_GetSysClockFreq>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	4b52      	ldr	r3, [pc, #328]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	091b      	lsrs	r3, r3, #4
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	4950      	ldr	r1, [pc, #320]	@ (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002d06:	5ccb      	ldrb	r3, [r1, r3]
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d10:	4a4e      	ldr	r2, [pc, #312]	@ (8002e4c <HAL_RCC_OscConfig+0x278>)
 8002d12:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d14:	4b4e      	ldr	r3, [pc, #312]	@ (8002e50 <HAL_RCC_OscConfig+0x27c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fe fe57 	bl	80019cc <HAL_InitTick>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d052      	beq.n	8002dce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
 8002d2a:	e327      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d032      	beq.n	8002d9a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d34:	4b43      	ldr	r3, [pc, #268]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a42      	ldr	r2, [pc, #264]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d40:	f7fe fe94 	bl	8001a6c <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d48:	f7fe fe90 	bl	8001a6c <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e310      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d5a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d66:	4b37      	ldr	r3, [pc, #220]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a36      	ldr	r2, [pc, #216]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002d6c:	f043 0308 	orr.w	r3, r3, #8
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	4b34      	ldr	r3, [pc, #208]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	4931      	ldr	r1, [pc, #196]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d84:	4b2f      	ldr	r3, [pc, #188]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	021b      	lsls	r3, r3, #8
 8002d92:	492c      	ldr	r1, [pc, #176]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]
 8002d98:	e01a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d9a:	4b2a      	ldr	r3, [pc, #168]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a29      	ldr	r2, [pc, #164]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002da0:	f023 0301 	bic.w	r3, r3, #1
 8002da4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002da6:	f7fe fe61 	bl	8001a6c <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dae:	f7fe fe5d 	bl	8001a6c <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e2dd      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dc0:	4b20      	ldr	r3, [pc, #128]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f0      	bne.n	8002dae <HAL_RCC_OscConfig+0x1da>
 8002dcc:	e000      	b.n	8002dd0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d074      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d005      	beq.n	8002dee <HAL_RCC_OscConfig+0x21a>
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	2b0c      	cmp	r3, #12
 8002de6:	d10e      	bne.n	8002e06 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	d10b      	bne.n	8002e06 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dee:	4b15      	ldr	r3, [pc, #84]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d064      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x2f0>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d160      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e2ba      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e0e:	d106      	bne.n	8002e1e <HAL_RCC_OscConfig+0x24a>
 8002e10:	4b0c      	ldr	r3, [pc, #48]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a0b      	ldr	r2, [pc, #44]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002e16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	e026      	b.n	8002e6c <HAL_RCC_OscConfig+0x298>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e26:	d115      	bne.n	8002e54 <HAL_RCC_OscConfig+0x280>
 8002e28:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a05      	ldr	r2, [pc, #20]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002e2e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	4b03      	ldr	r3, [pc, #12]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a02      	ldr	r2, [pc, #8]	@ (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	e014      	b.n	8002e6c <HAL_RCC_OscConfig+0x298>
 8002e42:	bf00      	nop
 8002e44:	40021000 	.word	0x40021000
 8002e48:	0800a38c 	.word	0x0800a38c
 8002e4c:	20000034 	.word	0x20000034
 8002e50:	20000038 	.word	0x20000038
 8002e54:	4ba0      	ldr	r3, [pc, #640]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a9f      	ldr	r2, [pc, #636]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 8002e5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	4b9d      	ldr	r3, [pc, #628]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a9c      	ldr	r2, [pc, #624]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 8002e66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d013      	beq.n	8002e9c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7fe fdfa 	bl	8001a6c <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e7c:	f7fe fdf6 	bl	8001a6c <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b64      	cmp	r3, #100	@ 0x64
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e276      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e8e:	4b92      	ldr	r3, [pc, #584]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0f0      	beq.n	8002e7c <HAL_RCC_OscConfig+0x2a8>
 8002e9a:	e014      	b.n	8002ec6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9c:	f7fe fde6 	bl	8001a6c <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea4:	f7fe fde2 	bl	8001a6c <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b64      	cmp	r3, #100	@ 0x64
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e262      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eb6:	4b88      	ldr	r3, [pc, #544]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f0      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x2d0>
 8002ec2:	e000      	b.n	8002ec6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d060      	beq.n	8002f94 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x310>
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	2b0c      	cmp	r3, #12
 8002edc:	d119      	bne.n	8002f12 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d116      	bne.n	8002f12 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ee4:	4b7c      	ldr	r3, [pc, #496]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_RCC_OscConfig+0x328>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e23f      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efc:	4b76      	ldr	r3, [pc, #472]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	061b      	lsls	r3, r3, #24
 8002f0a:	4973      	ldr	r1, [pc, #460]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f10:	e040      	b.n	8002f94 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d023      	beq.n	8002f62 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f1a:	4b6f      	ldr	r3, [pc, #444]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a6e      	ldr	r2, [pc, #440]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 8002f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f26:	f7fe fda1 	bl	8001a6c <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f2e:	f7fe fd9d 	bl	8001a6c <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e21d      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f40:	4b65      	ldr	r3, [pc, #404]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4c:	4b62      	ldr	r3, [pc, #392]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	061b      	lsls	r3, r3, #24
 8002f5a:	495f      	ldr	r1, [pc, #380]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	604b      	str	r3, [r1, #4]
 8002f60:	e018      	b.n	8002f94 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f62:	4b5d      	ldr	r3, [pc, #372]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a5c      	ldr	r2, [pc, #368]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 8002f68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6e:	f7fe fd7d 	bl	8001a6c <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f76:	f7fe fd79 	bl	8001a6c <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e1f9      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f88:	4b53      	ldr	r3, [pc, #332]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1f0      	bne.n	8002f76 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d03c      	beq.n	800301a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d01c      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fa8:	4b4b      	ldr	r3, [pc, #300]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 8002faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fae:	4a4a      	ldr	r2, [pc, #296]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb8:	f7fe fd58 	bl	8001a6c <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc0:	f7fe fd54 	bl	8001a6c <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e1d4      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fd2:	4b41      	ldr	r3, [pc, #260]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 8002fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0ef      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x3ec>
 8002fe0:	e01b      	b.n	800301a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fe2:	4b3d      	ldr	r3, [pc, #244]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 8002fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fe8:	4a3b      	ldr	r2, [pc, #236]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 8002fea:	f023 0301 	bic.w	r3, r3, #1
 8002fee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff2:	f7fe fd3b 	bl	8001a6c <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ffa:	f7fe fd37 	bl	8001a6c <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e1b7      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800300c:	4b32      	ldr	r3, [pc, #200]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 800300e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1ef      	bne.n	8002ffa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0304 	and.w	r3, r3, #4
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 80a6 	beq.w	8003174 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003028:	2300      	movs	r3, #0
 800302a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800302c:	4b2a      	ldr	r3, [pc, #168]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 800302e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003030:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10d      	bne.n	8003054 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003038:	4b27      	ldr	r3, [pc, #156]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 800303a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800303c:	4a26      	ldr	r2, [pc, #152]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 800303e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003042:	6593      	str	r3, [r2, #88]	@ 0x58
 8003044:	4b24      	ldr	r3, [pc, #144]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 8003046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003050:	2301      	movs	r3, #1
 8003052:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003054:	4b21      	ldr	r3, [pc, #132]	@ (80030dc <HAL_RCC_OscConfig+0x508>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d118      	bne.n	8003092 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003060:	4b1e      	ldr	r3, [pc, #120]	@ (80030dc <HAL_RCC_OscConfig+0x508>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1d      	ldr	r2, [pc, #116]	@ (80030dc <HAL_RCC_OscConfig+0x508>)
 8003066:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800306a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800306c:	f7fe fcfe 	bl	8001a6c <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003074:	f7fe fcfa 	bl	8001a6c <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e17a      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003086:	4b15      	ldr	r3, [pc, #84]	@ (80030dc <HAL_RCC_OscConfig+0x508>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d108      	bne.n	80030ac <HAL_RCC_OscConfig+0x4d8>
 800309a:	4b0f      	ldr	r3, [pc, #60]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 800309c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a0:	4a0d      	ldr	r2, [pc, #52]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030aa:	e029      	b.n	8003100 <HAL_RCC_OscConfig+0x52c>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b05      	cmp	r3, #5
 80030b2:	d115      	bne.n	80030e0 <HAL_RCC_OscConfig+0x50c>
 80030b4:	4b08      	ldr	r3, [pc, #32]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ba:	4a07      	ldr	r2, [pc, #28]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 80030bc:	f043 0304 	orr.w	r3, r3, #4
 80030c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030c4:	4b04      	ldr	r3, [pc, #16]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ca:	4a03      	ldr	r2, [pc, #12]	@ (80030d8 <HAL_RCC_OscConfig+0x504>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030d4:	e014      	b.n	8003100 <HAL_RCC_OscConfig+0x52c>
 80030d6:	bf00      	nop
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40007000 	.word	0x40007000
 80030e0:	4b9c      	ldr	r3, [pc, #624]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 80030e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e6:	4a9b      	ldr	r2, [pc, #620]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030f0:	4b98      	ldr	r3, [pc, #608]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 80030f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030f6:	4a97      	ldr	r2, [pc, #604]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 80030f8:	f023 0304 	bic.w	r3, r3, #4
 80030fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d016      	beq.n	8003136 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003108:	f7fe fcb0 	bl	8001a6c <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800310e:	e00a      	b.n	8003126 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003110:	f7fe fcac 	bl	8001a6c <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800311e:	4293      	cmp	r3, r2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e12a      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003126:	4b8b      	ldr	r3, [pc, #556]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 8003128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0ed      	beq.n	8003110 <HAL_RCC_OscConfig+0x53c>
 8003134:	e015      	b.n	8003162 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003136:	f7fe fc99 	bl	8001a6c <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800313c:	e00a      	b.n	8003154 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313e:	f7fe fc95 	bl	8001a6c <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800314c:	4293      	cmp	r3, r2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e113      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003154:	4b7f      	ldr	r3, [pc, #508]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1ed      	bne.n	800313e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003162:	7ffb      	ldrb	r3, [r7, #31]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d105      	bne.n	8003174 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003168:	4b7a      	ldr	r3, [pc, #488]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 800316a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316c:	4a79      	ldr	r2, [pc, #484]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 800316e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003172:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80fe 	beq.w	800337a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003182:	2b02      	cmp	r3, #2
 8003184:	f040 80d0 	bne.w	8003328 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003188:	4b72      	ldr	r3, [pc, #456]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f003 0203 	and.w	r2, r3, #3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003198:	429a      	cmp	r2, r3
 800319a:	d130      	bne.n	80031fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a6:	3b01      	subs	r3, #1
 80031a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d127      	bne.n	80031fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d11f      	bne.n	80031fe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80031c8:	2a07      	cmp	r2, #7
 80031ca:	bf14      	ite	ne
 80031cc:	2201      	movne	r2, #1
 80031ce:	2200      	moveq	r2, #0
 80031d0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d113      	bne.n	80031fe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e0:	085b      	lsrs	r3, r3, #1
 80031e2:	3b01      	subs	r3, #1
 80031e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d109      	bne.n	80031fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	085b      	lsrs	r3, r3, #1
 80031f6:	3b01      	subs	r3, #1
 80031f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d06e      	beq.n	80032dc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	2b0c      	cmp	r3, #12
 8003202:	d069      	beq.n	80032d8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003204:	4b53      	ldr	r3, [pc, #332]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d105      	bne.n	800321c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003210:	4b50      	ldr	r3, [pc, #320]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0ad      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003220:	4b4c      	ldr	r3, [pc, #304]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a4b      	ldr	r2, [pc, #300]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 8003226:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800322a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800322c:	f7fe fc1e 	bl	8001a6c <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003234:	f7fe fc1a 	bl	8001a6c <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e09a      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003246:	4b43      	ldr	r3, [pc, #268]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f0      	bne.n	8003234 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003252:	4b40      	ldr	r3, [pc, #256]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	4b40      	ldr	r3, [pc, #256]	@ (8003358 <HAL_RCC_OscConfig+0x784>)
 8003258:	4013      	ands	r3, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003262:	3a01      	subs	r2, #1
 8003264:	0112      	lsls	r2, r2, #4
 8003266:	4311      	orrs	r1, r2
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800326c:	0212      	lsls	r2, r2, #8
 800326e:	4311      	orrs	r1, r2
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003274:	0852      	lsrs	r2, r2, #1
 8003276:	3a01      	subs	r2, #1
 8003278:	0552      	lsls	r2, r2, #21
 800327a:	4311      	orrs	r1, r2
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003280:	0852      	lsrs	r2, r2, #1
 8003282:	3a01      	subs	r2, #1
 8003284:	0652      	lsls	r2, r2, #25
 8003286:	4311      	orrs	r1, r2
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800328c:	0912      	lsrs	r2, r2, #4
 800328e:	0452      	lsls	r2, r2, #17
 8003290:	430a      	orrs	r2, r1
 8003292:	4930      	ldr	r1, [pc, #192]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 8003294:	4313      	orrs	r3, r2
 8003296:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003298:	4b2e      	ldr	r3, [pc, #184]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a2d      	ldr	r2, [pc, #180]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 800329e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	4a2a      	ldr	r2, [pc, #168]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 80032aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032b0:	f7fe fbdc 	bl	8001a6c <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b8:	f7fe fbd8 	bl	8001a6c <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e058      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ca:	4b22      	ldr	r3, [pc, #136]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f0      	beq.n	80032b8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032d6:	e050      	b.n	800337a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e04f      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d148      	bne.n	800337a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a19      	ldr	r2, [pc, #100]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 80032ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032f4:	4b17      	ldr	r3, [pc, #92]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4a16      	ldr	r2, [pc, #88]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 80032fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003300:	f7fe fbb4 	bl	8001a6c <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003308:	f7fe fbb0 	bl	8001a6c <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e030      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800331a:	4b0e      	ldr	r3, [pc, #56]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0x734>
 8003326:	e028      	b.n	800337a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	2b0c      	cmp	r3, #12
 800332c:	d023      	beq.n	8003376 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332e:	4b09      	ldr	r3, [pc, #36]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a08      	ldr	r2, [pc, #32]	@ (8003354 <HAL_RCC_OscConfig+0x780>)
 8003334:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333a:	f7fe fb97 	bl	8001a6c <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003340:	e00c      	b.n	800335c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003342:	f7fe fb93 	bl	8001a6c <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d905      	bls.n	800335c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e013      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
 8003354:	40021000 	.word	0x40021000
 8003358:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800335c:	4b09      	ldr	r3, [pc, #36]	@ (8003384 <HAL_RCC_OscConfig+0x7b0>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1ec      	bne.n	8003342 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003368:	4b06      	ldr	r3, [pc, #24]	@ (8003384 <HAL_RCC_OscConfig+0x7b0>)
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	4905      	ldr	r1, [pc, #20]	@ (8003384 <HAL_RCC_OscConfig+0x7b0>)
 800336e:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <HAL_RCC_OscConfig+0x7b4>)
 8003370:	4013      	ands	r3, r2
 8003372:	60cb      	str	r3, [r1, #12]
 8003374:	e001      	b.n	800337a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3720      	adds	r7, #32
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40021000 	.word	0x40021000
 8003388:	feeefffc 	.word	0xfeeefffc

0800338c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e0e7      	b.n	8003570 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033a0:	4b75      	ldr	r3, [pc, #468]	@ (8003578 <HAL_RCC_ClockConfig+0x1ec>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d910      	bls.n	80033d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ae:	4b72      	ldr	r3, [pc, #456]	@ (8003578 <HAL_RCC_ClockConfig+0x1ec>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 0207 	bic.w	r2, r3, #7
 80033b6:	4970      	ldr	r1, [pc, #448]	@ (8003578 <HAL_RCC_ClockConfig+0x1ec>)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033be:	4b6e      	ldr	r3, [pc, #440]	@ (8003578 <HAL_RCC_ClockConfig+0x1ec>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0cf      	b.n	8003570 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d010      	beq.n	80033fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	4b66      	ldr	r3, [pc, #408]	@ (800357c <HAL_RCC_ClockConfig+0x1f0>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d908      	bls.n	80033fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ec:	4b63      	ldr	r3, [pc, #396]	@ (800357c <HAL_RCC_ClockConfig+0x1f0>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	4960      	ldr	r1, [pc, #384]	@ (800357c <HAL_RCC_ClockConfig+0x1f0>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d04c      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b03      	cmp	r3, #3
 8003410:	d107      	bne.n	8003422 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003412:	4b5a      	ldr	r3, [pc, #360]	@ (800357c <HAL_RCC_ClockConfig+0x1f0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d121      	bne.n	8003462 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e0a6      	b.n	8003570 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d107      	bne.n	800343a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800342a:	4b54      	ldr	r3, [pc, #336]	@ (800357c <HAL_RCC_ClockConfig+0x1f0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d115      	bne.n	8003462 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e09a      	b.n	8003570 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d107      	bne.n	8003452 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003442:	4b4e      	ldr	r3, [pc, #312]	@ (800357c <HAL_RCC_ClockConfig+0x1f0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e08e      	b.n	8003570 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003452:	4b4a      	ldr	r3, [pc, #296]	@ (800357c <HAL_RCC_ClockConfig+0x1f0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e086      	b.n	8003570 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003462:	4b46      	ldr	r3, [pc, #280]	@ (800357c <HAL_RCC_ClockConfig+0x1f0>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f023 0203 	bic.w	r2, r3, #3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	4943      	ldr	r1, [pc, #268]	@ (800357c <HAL_RCC_ClockConfig+0x1f0>)
 8003470:	4313      	orrs	r3, r2
 8003472:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003474:	f7fe fafa 	bl	8001a6c <HAL_GetTick>
 8003478:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347a:	e00a      	b.n	8003492 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347c:	f7fe faf6 	bl	8001a6c <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e06e      	b.n	8003570 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003492:	4b3a      	ldr	r3, [pc, #232]	@ (800357c <HAL_RCC_ClockConfig+0x1f0>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 020c 	and.w	r2, r3, #12
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d1eb      	bne.n	800347c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d010      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	4b31      	ldr	r3, [pc, #196]	@ (800357c <HAL_RCC_ClockConfig+0x1f0>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034bc:	429a      	cmp	r2, r3
 80034be:	d208      	bcs.n	80034d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c0:	4b2e      	ldr	r3, [pc, #184]	@ (800357c <HAL_RCC_ClockConfig+0x1f0>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	492b      	ldr	r1, [pc, #172]	@ (800357c <HAL_RCC_ClockConfig+0x1f0>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034d2:	4b29      	ldr	r3, [pc, #164]	@ (8003578 <HAL_RCC_ClockConfig+0x1ec>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d210      	bcs.n	8003502 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e0:	4b25      	ldr	r3, [pc, #148]	@ (8003578 <HAL_RCC_ClockConfig+0x1ec>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f023 0207 	bic.w	r2, r3, #7
 80034e8:	4923      	ldr	r1, [pc, #140]	@ (8003578 <HAL_RCC_ClockConfig+0x1ec>)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f0:	4b21      	ldr	r3, [pc, #132]	@ (8003578 <HAL_RCC_ClockConfig+0x1ec>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d001      	beq.n	8003502 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e036      	b.n	8003570 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800350e:	4b1b      	ldr	r3, [pc, #108]	@ (800357c <HAL_RCC_ClockConfig+0x1f0>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	4918      	ldr	r1, [pc, #96]	@ (800357c <HAL_RCC_ClockConfig+0x1f0>)
 800351c:	4313      	orrs	r3, r2
 800351e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d009      	beq.n	8003540 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800352c:	4b13      	ldr	r3, [pc, #76]	@ (800357c <HAL_RCC_ClockConfig+0x1f0>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4910      	ldr	r1, [pc, #64]	@ (800357c <HAL_RCC_ClockConfig+0x1f0>)
 800353c:	4313      	orrs	r3, r2
 800353e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003540:	f000 f824 	bl	800358c <HAL_RCC_GetSysClockFreq>
 8003544:	4602      	mov	r2, r0
 8003546:	4b0d      	ldr	r3, [pc, #52]	@ (800357c <HAL_RCC_ClockConfig+0x1f0>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	091b      	lsrs	r3, r3, #4
 800354c:	f003 030f 	and.w	r3, r3, #15
 8003550:	490b      	ldr	r1, [pc, #44]	@ (8003580 <HAL_RCC_ClockConfig+0x1f4>)
 8003552:	5ccb      	ldrb	r3, [r1, r3]
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	fa22 f303 	lsr.w	r3, r2, r3
 800355c:	4a09      	ldr	r2, [pc, #36]	@ (8003584 <HAL_RCC_ClockConfig+0x1f8>)
 800355e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003560:	4b09      	ldr	r3, [pc, #36]	@ (8003588 <HAL_RCC_ClockConfig+0x1fc>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f7fe fa31 	bl	80019cc <HAL_InitTick>
 800356a:	4603      	mov	r3, r0
 800356c:	72fb      	strb	r3, [r7, #11]

  return status;
 800356e:	7afb      	ldrb	r3, [r7, #11]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40022000 	.word	0x40022000
 800357c:	40021000 	.word	0x40021000
 8003580:	0800a38c 	.word	0x0800a38c
 8003584:	20000034 	.word	0x20000034
 8003588:	20000038 	.word	0x20000038

0800358c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800358c:	b480      	push	{r7}
 800358e:	b089      	sub	sp, #36	@ 0x24
 8003590:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	2300      	movs	r3, #0
 8003598:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800359a:	4b3e      	ldr	r3, [pc, #248]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x108>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x108>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f003 0303 	and.w	r3, r3, #3
 80035ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <HAL_RCC_GetSysClockFreq+0x34>
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	2b0c      	cmp	r3, #12
 80035b8:	d121      	bne.n	80035fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d11e      	bne.n	80035fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035c0:	4b34      	ldr	r3, [pc, #208]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x108>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d107      	bne.n	80035dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035cc:	4b31      	ldr	r3, [pc, #196]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x108>)
 80035ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035d2:	0a1b      	lsrs	r3, r3, #8
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	61fb      	str	r3, [r7, #28]
 80035da:	e005      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x108>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	091b      	lsrs	r3, r3, #4
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003698 <HAL_RCC_GetSysClockFreq+0x10c>)
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10d      	bne.n	8003614 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035fc:	e00a      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	2b04      	cmp	r3, #4
 8003602:	d102      	bne.n	800360a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003604:	4b25      	ldr	r3, [pc, #148]	@ (800369c <HAL_RCC_GetSysClockFreq+0x110>)
 8003606:	61bb      	str	r3, [r7, #24]
 8003608:	e004      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	2b08      	cmp	r3, #8
 800360e:	d101      	bne.n	8003614 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003610:	4b23      	ldr	r3, [pc, #140]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003612:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	2b0c      	cmp	r3, #12
 8003618:	d134      	bne.n	8003684 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800361a:	4b1e      	ldr	r3, [pc, #120]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x108>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b02      	cmp	r3, #2
 8003628:	d003      	beq.n	8003632 <HAL_RCC_GetSysClockFreq+0xa6>
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2b03      	cmp	r3, #3
 800362e:	d003      	beq.n	8003638 <HAL_RCC_GetSysClockFreq+0xac>
 8003630:	e005      	b.n	800363e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003632:	4b1a      	ldr	r3, [pc, #104]	@ (800369c <HAL_RCC_GetSysClockFreq+0x110>)
 8003634:	617b      	str	r3, [r7, #20]
      break;
 8003636:	e005      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003638:	4b19      	ldr	r3, [pc, #100]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800363a:	617b      	str	r3, [r7, #20]
      break;
 800363c:	e002      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	617b      	str	r3, [r7, #20]
      break;
 8003642:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003644:	4b13      	ldr	r3, [pc, #76]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x108>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	3301      	adds	r3, #1
 8003650:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003652:	4b10      	ldr	r3, [pc, #64]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x108>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	0a1b      	lsrs	r3, r3, #8
 8003658:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	fb03 f202 	mul.w	r2, r3, r2
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	fbb2 f3f3 	udiv	r3, r2, r3
 8003668:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800366a:	4b0a      	ldr	r3, [pc, #40]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x108>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	0e5b      	lsrs	r3, r3, #25
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	3301      	adds	r3, #1
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003682:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003684:	69bb      	ldr	r3, [r7, #24]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3724      	adds	r7, #36	@ 0x24
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40021000 	.word	0x40021000
 8003698:	0800a3a4 	.word	0x0800a3a4
 800369c:	00f42400 	.word	0x00f42400
 80036a0:	007a1200 	.word	0x007a1200

080036a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a8:	4b03      	ldr	r3, [pc, #12]	@ (80036b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036aa:	681b      	ldr	r3, [r3, #0]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000034 	.word	0x20000034

080036bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036c0:	f7ff fff0 	bl	80036a4 <HAL_RCC_GetHCLKFreq>
 80036c4:	4602      	mov	r2, r0
 80036c6:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	0a1b      	lsrs	r3, r3, #8
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	4904      	ldr	r1, [pc, #16]	@ (80036e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036d2:	5ccb      	ldrb	r3, [r1, r3]
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036dc:	4618      	mov	r0, r3
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40021000 	.word	0x40021000
 80036e4:	0800a39c 	.word	0x0800a39c

080036e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036ec:	f7ff ffda 	bl	80036a4 <HAL_RCC_GetHCLKFreq>
 80036f0:	4602      	mov	r2, r0
 80036f2:	4b06      	ldr	r3, [pc, #24]	@ (800370c <HAL_RCC_GetPCLK2Freq+0x24>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	0adb      	lsrs	r3, r3, #11
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	4904      	ldr	r1, [pc, #16]	@ (8003710 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036fe:	5ccb      	ldrb	r3, [r1, r3]
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003708:	4618      	mov	r0, r3
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40021000 	.word	0x40021000
 8003710:	0800a39c 	.word	0x0800a39c

08003714 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800371c:	2300      	movs	r3, #0
 800371e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003720:	4b2a      	ldr	r3, [pc, #168]	@ (80037cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800372c:	f7ff f9ee 	bl	8002b0c <HAL_PWREx_GetVoltageRange>
 8003730:	6178      	str	r0, [r7, #20]
 8003732:	e014      	b.n	800375e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003734:	4b25      	ldr	r3, [pc, #148]	@ (80037cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003738:	4a24      	ldr	r2, [pc, #144]	@ (80037cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800373a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800373e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003740:	4b22      	ldr	r3, [pc, #136]	@ (80037cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800374c:	f7ff f9de 	bl	8002b0c <HAL_PWREx_GetVoltageRange>
 8003750:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003752:	4b1e      	ldr	r3, [pc, #120]	@ (80037cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003756:	4a1d      	ldr	r2, [pc, #116]	@ (80037cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003758:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800375c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003764:	d10b      	bne.n	800377e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b80      	cmp	r3, #128	@ 0x80
 800376a:	d919      	bls.n	80037a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003770:	d902      	bls.n	8003778 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003772:	2302      	movs	r3, #2
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	e013      	b.n	80037a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003778:	2301      	movs	r3, #1
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	e010      	b.n	80037a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b80      	cmp	r3, #128	@ 0x80
 8003782:	d902      	bls.n	800378a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003784:	2303      	movs	r3, #3
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	e00a      	b.n	80037a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b80      	cmp	r3, #128	@ 0x80
 800378e:	d102      	bne.n	8003796 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003790:	2302      	movs	r3, #2
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	e004      	b.n	80037a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b70      	cmp	r3, #112	@ 0x70
 800379a:	d101      	bne.n	80037a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800379c:	2301      	movs	r3, #1
 800379e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037a0:	4b0b      	ldr	r3, [pc, #44]	@ (80037d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f023 0207 	bic.w	r2, r3, #7
 80037a8:	4909      	ldr	r1, [pc, #36]	@ (80037d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037b0:	4b07      	ldr	r3, [pc, #28]	@ (80037d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d001      	beq.n	80037c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40021000 	.word	0x40021000
 80037d0:	40022000 	.word	0x40022000

080037d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037dc:	2300      	movs	r3, #0
 80037de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037e0:	2300      	movs	r3, #0
 80037e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d041      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037f4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80037f8:	d02a      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037fa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80037fe:	d824      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003800:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003804:	d008      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003806:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800380a:	d81e      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003810:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003814:	d010      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003816:	e018      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003818:	4b86      	ldr	r3, [pc, #536]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	4a85      	ldr	r2, [pc, #532]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800381e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003822:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003824:	e015      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3304      	adds	r3, #4
 800382a:	2100      	movs	r1, #0
 800382c:	4618      	mov	r0, r3
 800382e:	f000 fabb 	bl	8003da8 <RCCEx_PLLSAI1_Config>
 8003832:	4603      	mov	r3, r0
 8003834:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003836:	e00c      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3320      	adds	r3, #32
 800383c:	2100      	movs	r1, #0
 800383e:	4618      	mov	r0, r3
 8003840:	f000 fba6 	bl	8003f90 <RCCEx_PLLSAI2_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003848:	e003      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	74fb      	strb	r3, [r7, #19]
      break;
 800384e:	e000      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003852:	7cfb      	ldrb	r3, [r7, #19]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10b      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003858:	4b76      	ldr	r3, [pc, #472]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800385a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003866:	4973      	ldr	r1, [pc, #460]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003868:	4313      	orrs	r3, r2
 800386a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800386e:	e001      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003870:	7cfb      	ldrb	r3, [r7, #19]
 8003872:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d041      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003884:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003888:	d02a      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800388a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800388e:	d824      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003890:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003894:	d008      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003896:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800389a:	d81e      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x106>
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80038a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038a4:	d010      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038a6:	e018      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038a8:	4b62      	ldr	r3, [pc, #392]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4a61      	ldr	r2, [pc, #388]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038b4:	e015      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3304      	adds	r3, #4
 80038ba:	2100      	movs	r1, #0
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 fa73 	bl	8003da8 <RCCEx_PLLSAI1_Config>
 80038c2:	4603      	mov	r3, r0
 80038c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038c6:	e00c      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3320      	adds	r3, #32
 80038cc:	2100      	movs	r1, #0
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 fb5e 	bl	8003f90 <RCCEx_PLLSAI2_Config>
 80038d4:	4603      	mov	r3, r0
 80038d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038d8:	e003      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	74fb      	strb	r3, [r7, #19]
      break;
 80038de:	e000      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80038e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038e2:	7cfb      	ldrb	r3, [r7, #19]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10b      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038e8:	4b52      	ldr	r3, [pc, #328]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038f6:	494f      	ldr	r1, [pc, #316]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80038fe:	e001      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003900:	7cfb      	ldrb	r3, [r7, #19]
 8003902:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 80a0 	beq.w	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003912:	2300      	movs	r3, #0
 8003914:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003916:	4b47      	ldr	r3, [pc, #284]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800391a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003926:	2300      	movs	r3, #0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00d      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800392c:	4b41      	ldr	r3, [pc, #260]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800392e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003930:	4a40      	ldr	r2, [pc, #256]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003932:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003936:	6593      	str	r3, [r2, #88]	@ 0x58
 8003938:	4b3e      	ldr	r3, [pc, #248]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800393a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800393c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003944:	2301      	movs	r3, #1
 8003946:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003948:	4b3b      	ldr	r3, [pc, #236]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a3a      	ldr	r2, [pc, #232]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800394e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003952:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003954:	f7fe f88a 	bl	8001a6c <HAL_GetTick>
 8003958:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800395a:	e009      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800395c:	f7fe f886 	bl	8001a6c <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d902      	bls.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	74fb      	strb	r3, [r7, #19]
        break;
 800396e:	e005      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003970:	4b31      	ldr	r3, [pc, #196]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0ef      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800397c:	7cfb      	ldrb	r3, [r7, #19]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d15c      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003982:	4b2c      	ldr	r3, [pc, #176]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003988:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800398c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d01f      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	429a      	cmp	r2, r3
 800399e:	d019      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039a0:	4b24      	ldr	r3, [pc, #144]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039ac:	4b21      	ldr	r3, [pc, #132]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b2:	4a20      	ldr	r2, [pc, #128]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039cc:	4a19      	ldr	r2, [pc, #100]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d016      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039de:	f7fe f845 	bl	8001a6c <HAL_GetTick>
 80039e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039e4:	e00b      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e6:	f7fe f841 	bl	8001a6c <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d902      	bls.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	74fb      	strb	r3, [r7, #19]
            break;
 80039fc:	e006      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0ec      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003a0c:	7cfb      	ldrb	r3, [r7, #19]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10c      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a12:	4b08      	ldr	r3, [pc, #32]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a22:	4904      	ldr	r1, [pc, #16]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003a2a:	e009      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a2c:	7cfb      	ldrb	r3, [r7, #19]
 8003a2e:	74bb      	strb	r3, [r7, #18]
 8003a30:	e006      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003a32:	bf00      	nop
 8003a34:	40021000 	.word	0x40021000
 8003a38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3c:	7cfb      	ldrb	r3, [r7, #19]
 8003a3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a40:	7c7b      	ldrb	r3, [r7, #17]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d105      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a46:	4b9e      	ldr	r3, [pc, #632]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a4a:	4a9d      	ldr	r2, [pc, #628]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a50:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a5e:	4b98      	ldr	r3, [pc, #608]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a64:	f023 0203 	bic.w	r2, r3, #3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6c:	4994      	ldr	r1, [pc, #592]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a80:	4b8f      	ldr	r3, [pc, #572]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a86:	f023 020c 	bic.w	r2, r3, #12
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a8e:	498c      	ldr	r1, [pc, #560]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0304 	and.w	r3, r3, #4
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003aa2:	4b87      	ldr	r3, [pc, #540]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab0:	4983      	ldr	r1, [pc, #524]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ac4:	4b7e      	ldr	r3, [pc, #504]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad2:	497b      	ldr	r1, [pc, #492]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0310 	and.w	r3, r3, #16
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ae6:	4b76      	ldr	r3, [pc, #472]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003af4:	4972      	ldr	r1, [pc, #456]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b08:	4b6d      	ldr	r3, [pc, #436]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b0e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b16:	496a      	ldr	r1, [pc, #424]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b2a:	4b65      	ldr	r3, [pc, #404]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b30:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b38:	4961      	ldr	r1, [pc, #388]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b4c:	4b5c      	ldr	r3, [pc, #368]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b5a:	4959      	ldr	r1, [pc, #356]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b6e:	4b54      	ldr	r3, [pc, #336]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b74:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b7c:	4950      	ldr	r1, [pc, #320]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b90:	4b4b      	ldr	r3, [pc, #300]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b96:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b9e:	4948      	ldr	r1, [pc, #288]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bb2:	4b43      	ldr	r3, [pc, #268]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc0:	493f      	ldr	r1, [pc, #252]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d028      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bd4:	4b3a      	ldr	r3, [pc, #232]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bda:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003be2:	4937      	ldr	r1, [pc, #220]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bf2:	d106      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bf4:	4b32      	ldr	r3, [pc, #200]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4a31      	ldr	r2, [pc, #196]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bfe:	60d3      	str	r3, [r2, #12]
 8003c00:	e011      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c06:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c0a:	d10c      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	2101      	movs	r1, #1
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 f8c8 	bl	8003da8 <RCCEx_PLLSAI1_Config>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c1c:	7cfb      	ldrb	r3, [r7, #19]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003c22:	7cfb      	ldrb	r3, [r7, #19]
 8003c24:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d028      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c32:	4b23      	ldr	r3, [pc, #140]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c38:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c40:	491f      	ldr	r1, [pc, #124]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c50:	d106      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c52:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	4a1a      	ldr	r2, [pc, #104]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c5c:	60d3      	str	r3, [r2, #12]
 8003c5e:	e011      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c68:	d10c      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	2101      	movs	r1, #1
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 f899 	bl	8003da8 <RCCEx_PLLSAI1_Config>
 8003c76:	4603      	mov	r3, r0
 8003c78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c7a:	7cfb      	ldrb	r3, [r7, #19]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003c80:	7cfb      	ldrb	r3, [r7, #19]
 8003c82:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d02b      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c90:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c9e:	4908      	ldr	r1, [pc, #32]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003caa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cae:	d109      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cb0:	4b03      	ldr	r3, [pc, #12]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4a02      	ldr	r2, [pc, #8]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cba:	60d3      	str	r3, [r2, #12]
 8003cbc:	e014      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cc8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ccc:	d10c      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 f867 	bl	8003da8 <RCCEx_PLLSAI1_Config>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cde:	7cfb      	ldrb	r3, [r7, #19]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ce4:	7cfb      	ldrb	r3, [r7, #19]
 8003ce6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d02f      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d02:	4928      	ldr	r1, [pc, #160]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d12:	d10d      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3304      	adds	r3, #4
 8003d18:	2102      	movs	r1, #2
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 f844 	bl	8003da8 <RCCEx_PLLSAI1_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d24:	7cfb      	ldrb	r3, [r7, #19]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d014      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d2a:	7cfb      	ldrb	r3, [r7, #19]
 8003d2c:	74bb      	strb	r3, [r7, #18]
 8003d2e:	e011      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d38:	d10c      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3320      	adds	r3, #32
 8003d3e:	2102      	movs	r1, #2
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 f925 	bl	8003f90 <RCCEx_PLLSAI2_Config>
 8003d46:	4603      	mov	r3, r0
 8003d48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d4a:	7cfb      	ldrb	r3, [r7, #19]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d50:	7cfb      	ldrb	r3, [r7, #19]
 8003d52:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00a      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d60:	4b10      	ldr	r3, [pc, #64]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d66:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d6e:	490d      	ldr	r1, [pc, #52]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00b      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d82:	4b08      	ldr	r3, [pc, #32]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d88:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d92:	4904      	ldr	r1, [pc, #16]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d9a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40021000 	.word	0x40021000

08003da8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003db6:	4b75      	ldr	r3, [pc, #468]	@ (8003f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d018      	beq.n	8003df4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003dc2:	4b72      	ldr	r3, [pc, #456]	@ (8003f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f003 0203 	and.w	r2, r3, #3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d10d      	bne.n	8003dee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
       ||
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003dda:	4b6c      	ldr	r3, [pc, #432]	@ (8003f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	091b      	lsrs	r3, r3, #4
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
       ||
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d047      	beq.n	8003e7e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	73fb      	strb	r3, [r7, #15]
 8003df2:	e044      	b.n	8003e7e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d018      	beq.n	8003e2e <RCCEx_PLLSAI1_Config+0x86>
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d825      	bhi.n	8003e4c <RCCEx_PLLSAI1_Config+0xa4>
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d002      	beq.n	8003e0a <RCCEx_PLLSAI1_Config+0x62>
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d009      	beq.n	8003e1c <RCCEx_PLLSAI1_Config+0x74>
 8003e08:	e020      	b.n	8003e4c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e0a:	4b60      	ldr	r3, [pc, #384]	@ (8003f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d11d      	bne.n	8003e52 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e1a:	e01a      	b.n	8003e52 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e1c:	4b5b      	ldr	r3, [pc, #364]	@ (8003f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d116      	bne.n	8003e56 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e2c:	e013      	b.n	8003e56 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e2e:	4b57      	ldr	r3, [pc, #348]	@ (8003f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10f      	bne.n	8003e5a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e3a:	4b54      	ldr	r3, [pc, #336]	@ (8003f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d109      	bne.n	8003e5a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e4a:	e006      	b.n	8003e5a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e50:	e004      	b.n	8003e5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e52:	bf00      	nop
 8003e54:	e002      	b.n	8003e5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e56:	bf00      	nop
 8003e58:	e000      	b.n	8003e5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10d      	bne.n	8003e7e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e62:	4b4a      	ldr	r3, [pc, #296]	@ (8003f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6819      	ldr	r1, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	430b      	orrs	r3, r1
 8003e78:	4944      	ldr	r1, [pc, #272]	@ (8003f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d17d      	bne.n	8003f80 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e84:	4b41      	ldr	r3, [pc, #260]	@ (8003f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a40      	ldr	r2, [pc, #256]	@ (8003f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e90:	f7fd fdec 	bl	8001a6c <HAL_GetTick>
 8003e94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e96:	e009      	b.n	8003eac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e98:	f7fd fde8 	bl	8001a6c <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d902      	bls.n	8003eac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	73fb      	strb	r3, [r7, #15]
        break;
 8003eaa:	e005      	b.n	8003eb8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003eac:	4b37      	ldr	r3, [pc, #220]	@ (8003f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1ef      	bne.n	8003e98 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d160      	bne.n	8003f80 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d111      	bne.n	8003ee8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ec4:	4b31      	ldr	r3, [pc, #196]	@ (8003f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003ecc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6892      	ldr	r2, [r2, #8]
 8003ed4:	0211      	lsls	r1, r2, #8
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68d2      	ldr	r2, [r2, #12]
 8003eda:	0912      	lsrs	r2, r2, #4
 8003edc:	0452      	lsls	r2, r2, #17
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	492a      	ldr	r1, [pc, #168]	@ (8003f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	610b      	str	r3, [r1, #16]
 8003ee6:	e027      	b.n	8003f38 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d112      	bne.n	8003f14 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003eee:	4b27      	ldr	r3, [pc, #156]	@ (8003f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003ef6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6892      	ldr	r2, [r2, #8]
 8003efe:	0211      	lsls	r1, r2, #8
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6912      	ldr	r2, [r2, #16]
 8003f04:	0852      	lsrs	r2, r2, #1
 8003f06:	3a01      	subs	r2, #1
 8003f08:	0552      	lsls	r2, r2, #21
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	491f      	ldr	r1, [pc, #124]	@ (8003f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	610b      	str	r3, [r1, #16]
 8003f12:	e011      	b.n	8003f38 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f14:	4b1d      	ldr	r3, [pc, #116]	@ (8003f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003f1c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6892      	ldr	r2, [r2, #8]
 8003f24:	0211      	lsls	r1, r2, #8
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6952      	ldr	r2, [r2, #20]
 8003f2a:	0852      	lsrs	r2, r2, #1
 8003f2c:	3a01      	subs	r2, #1
 8003f2e:	0652      	lsls	r2, r2, #25
 8003f30:	430a      	orrs	r2, r1
 8003f32:	4916      	ldr	r1, [pc, #88]	@ (8003f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f38:	4b14      	ldr	r3, [pc, #80]	@ (8003f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a13      	ldr	r2, [pc, #76]	@ (8003f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f44:	f7fd fd92 	bl	8001a6c <HAL_GetTick>
 8003f48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f4a:	e009      	b.n	8003f60 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f4c:	f7fd fd8e 	bl	8001a6c <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d902      	bls.n	8003f60 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	73fb      	strb	r3, [r7, #15]
          break;
 8003f5e:	e005      	b.n	8003f6c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f60:	4b0a      	ldr	r3, [pc, #40]	@ (8003f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0ef      	beq.n	8003f4c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d106      	bne.n	8003f80 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f72:	4b06      	ldr	r3, [pc, #24]	@ (8003f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f74:	691a      	ldr	r2, [r3, #16]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	4904      	ldr	r1, [pc, #16]	@ (8003f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40021000 	.word	0x40021000

08003f90 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f9e:	4b6a      	ldr	r3, [pc, #424]	@ (8004148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d018      	beq.n	8003fdc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003faa:	4b67      	ldr	r3, [pc, #412]	@ (8004148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f003 0203 	and.w	r2, r3, #3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d10d      	bne.n	8003fd6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
       ||
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003fc2:	4b61      	ldr	r3, [pc, #388]	@ (8004148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
       ||
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d047      	beq.n	8004066 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	73fb      	strb	r3, [r7, #15]
 8003fda:	e044      	b.n	8004066 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b03      	cmp	r3, #3
 8003fe2:	d018      	beq.n	8004016 <RCCEx_PLLSAI2_Config+0x86>
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d825      	bhi.n	8004034 <RCCEx_PLLSAI2_Config+0xa4>
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d002      	beq.n	8003ff2 <RCCEx_PLLSAI2_Config+0x62>
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d009      	beq.n	8004004 <RCCEx_PLLSAI2_Config+0x74>
 8003ff0:	e020      	b.n	8004034 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ff2:	4b55      	ldr	r3, [pc, #340]	@ (8004148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d11d      	bne.n	800403a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004002:	e01a      	b.n	800403a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004004:	4b50      	ldr	r3, [pc, #320]	@ (8004148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800400c:	2b00      	cmp	r3, #0
 800400e:	d116      	bne.n	800403e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004014:	e013      	b.n	800403e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004016:	4b4c      	ldr	r3, [pc, #304]	@ (8004148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10f      	bne.n	8004042 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004022:	4b49      	ldr	r3, [pc, #292]	@ (8004148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d109      	bne.n	8004042 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004032:	e006      	b.n	8004042 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	73fb      	strb	r3, [r7, #15]
      break;
 8004038:	e004      	b.n	8004044 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800403a:	bf00      	nop
 800403c:	e002      	b.n	8004044 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800403e:	bf00      	nop
 8004040:	e000      	b.n	8004044 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004042:	bf00      	nop
    }

    if(status == HAL_OK)
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10d      	bne.n	8004066 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800404a:	4b3f      	ldr	r3, [pc, #252]	@ (8004148 <RCCEx_PLLSAI2_Config+0x1b8>)
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6819      	ldr	r1, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	3b01      	subs	r3, #1
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	430b      	orrs	r3, r1
 8004060:	4939      	ldr	r1, [pc, #228]	@ (8004148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004062:	4313      	orrs	r3, r2
 8004064:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d167      	bne.n	800413c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800406c:	4b36      	ldr	r3, [pc, #216]	@ (8004148 <RCCEx_PLLSAI2_Config+0x1b8>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a35      	ldr	r2, [pc, #212]	@ (8004148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004072:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004076:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004078:	f7fd fcf8 	bl	8001a6c <HAL_GetTick>
 800407c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800407e:	e009      	b.n	8004094 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004080:	f7fd fcf4 	bl	8001a6c <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d902      	bls.n	8004094 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	73fb      	strb	r3, [r7, #15]
        break;
 8004092:	e005      	b.n	80040a0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004094:	4b2c      	ldr	r3, [pc, #176]	@ (8004148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1ef      	bne.n	8004080 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d14a      	bne.n	800413c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d111      	bne.n	80040d0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040ac:	4b26      	ldr	r3, [pc, #152]	@ (8004148 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80040b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6892      	ldr	r2, [r2, #8]
 80040bc:	0211      	lsls	r1, r2, #8
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	68d2      	ldr	r2, [r2, #12]
 80040c2:	0912      	lsrs	r2, r2, #4
 80040c4:	0452      	lsls	r2, r2, #17
 80040c6:	430a      	orrs	r2, r1
 80040c8:	491f      	ldr	r1, [pc, #124]	@ (8004148 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	614b      	str	r3, [r1, #20]
 80040ce:	e011      	b.n	80040f4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004148 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80040d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6892      	ldr	r2, [r2, #8]
 80040e0:	0211      	lsls	r1, r2, #8
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6912      	ldr	r2, [r2, #16]
 80040e6:	0852      	lsrs	r2, r2, #1
 80040e8:	3a01      	subs	r2, #1
 80040ea:	0652      	lsls	r2, r2, #25
 80040ec:	430a      	orrs	r2, r1
 80040ee:	4916      	ldr	r1, [pc, #88]	@ (8004148 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80040f4:	4b14      	ldr	r3, [pc, #80]	@ (8004148 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a13      	ldr	r2, [pc, #76]	@ (8004148 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004100:	f7fd fcb4 	bl	8001a6c <HAL_GetTick>
 8004104:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004106:	e009      	b.n	800411c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004108:	f7fd fcb0 	bl	8001a6c <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d902      	bls.n	800411c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	73fb      	strb	r3, [r7, #15]
          break;
 800411a:	e005      	b.n	8004128 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800411c:	4b0a      	ldr	r3, [pc, #40]	@ (8004148 <RCCEx_PLLSAI2_Config+0x1b8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0ef      	beq.n	8004108 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800412e:	4b06      	ldr	r3, [pc, #24]	@ (8004148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004130:	695a      	ldr	r2, [r3, #20]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	4904      	ldr	r1, [pc, #16]	@ (8004148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004138:	4313      	orrs	r3, r2
 800413a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800413c:	7bfb      	ldrb	r3, [r7, #15]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40021000 	.word	0x40021000

0800414c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e095      	b.n	800428a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004162:	2b00      	cmp	r3, #0
 8004164:	d108      	bne.n	8004178 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800416e:	d009      	beq.n	8004184 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	61da      	str	r2, [r3, #28]
 8004176:	e005      	b.n	8004184 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d106      	bne.n	80041a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7fd fa3a 	bl	8001618 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80041c4:	d902      	bls.n	80041cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	e002      	b.n	80041d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80041da:	d007      	beq.n	80041ec <HAL_SPI_Init+0xa0>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80041e4:	d002      	beq.n	80041ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800422e:	ea42 0103 	orr.w	r1, r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004236:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	0c1b      	lsrs	r3, r3, #16
 8004248:	f003 0204 	and.w	r2, r3, #4
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004250:	f003 0310 	and.w	r3, r3, #16
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004268:	ea42 0103 	orr.w	r1, r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b088      	sub	sp, #32
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	603b      	str	r3, [r7, #0]
 800429e:	4613      	mov	r3, r2
 80042a0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042a2:	f7fd fbe3 	bl	8001a6c <HAL_GetTick>
 80042a6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80042a8:	88fb      	ldrh	r3, [r7, #6]
 80042aa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d001      	beq.n	80042bc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80042b8:	2302      	movs	r3, #2
 80042ba:	e15c      	b.n	8004576 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <HAL_SPI_Transmit+0x36>
 80042c2:	88fb      	ldrh	r3, [r7, #6]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e154      	b.n	8004576 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_SPI_Transmit+0x48>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e14d      	b.n	8004576 <HAL_SPI_Transmit+0x2e4>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2203      	movs	r2, #3
 80042e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	88fa      	ldrh	r2, [r7, #6]
 80042fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	88fa      	ldrh	r2, [r7, #6]
 8004300:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800432c:	d10f      	bne.n	800434e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800433c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800434c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004358:	2b40      	cmp	r3, #64	@ 0x40
 800435a:	d007      	beq.n	800436c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800436a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004374:	d952      	bls.n	800441c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <HAL_SPI_Transmit+0xf2>
 800437e:	8b7b      	ldrh	r3, [r7, #26]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d145      	bne.n	8004410 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004388:	881a      	ldrh	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004394:	1c9a      	adds	r2, r3, #2
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043a8:	e032      	b.n	8004410 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d112      	bne.n	80043de <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043bc:	881a      	ldrh	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c8:	1c9a      	adds	r2, r3, #2
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80043dc:	e018      	b.n	8004410 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043de:	f7fd fb45 	bl	8001a6c <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d803      	bhi.n	80043f6 <HAL_SPI_Transmit+0x164>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043f4:	d102      	bne.n	80043fc <HAL_SPI_Transmit+0x16a>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d109      	bne.n	8004410 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e0b2      	b.n	8004576 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1c7      	bne.n	80043aa <HAL_SPI_Transmit+0x118>
 800441a:	e083      	b.n	8004524 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <HAL_SPI_Transmit+0x198>
 8004424:	8b7b      	ldrh	r3, [r7, #26]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d177      	bne.n	800451a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b01      	cmp	r3, #1
 8004432:	d912      	bls.n	800445a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004438:	881a      	ldrh	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004444:	1c9a      	adds	r2, r3, #2
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800444e:	b29b      	uxth	r3, r3
 8004450:	3b02      	subs	r3, #2
 8004452:	b29a      	uxth	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004458:	e05f      	b.n	800451a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	330c      	adds	r3, #12
 8004464:	7812      	ldrb	r2, [r2, #0]
 8004466:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004480:	e04b      	b.n	800451a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b02      	cmp	r3, #2
 800448e:	d12b      	bne.n	80044e8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b01      	cmp	r3, #1
 8004498:	d912      	bls.n	80044c0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449e:	881a      	ldrh	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044aa:	1c9a      	adds	r2, r3, #2
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	3b02      	subs	r3, #2
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80044be:	e02c      	b.n	800451a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	330c      	adds	r3, #12
 80044ca:	7812      	ldrb	r2, [r2, #0]
 80044cc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80044e6:	e018      	b.n	800451a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044e8:	f7fd fac0 	bl	8001a6c <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d803      	bhi.n	8004500 <HAL_SPI_Transmit+0x26e>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044fe:	d102      	bne.n	8004506 <HAL_SPI_Transmit+0x274>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d109      	bne.n	800451a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e02d      	b.n	8004576 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800451e:	b29b      	uxth	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1ae      	bne.n	8004482 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004524:	69fa      	ldr	r2, [r7, #28]
 8004526:	6839      	ldr	r1, [r7, #0]
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 fb65 	bl	8004bf8 <SPI_EndRxTxTransaction>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10a      	bne.n	8004558 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004574:	2300      	movs	r3, #0
  }
}
 8004576:	4618      	mov	r0, r3
 8004578:	3720      	adds	r7, #32
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b08a      	sub	sp, #40	@ 0x28
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800458c:	2301      	movs	r3, #1
 800458e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004590:	f7fd fa6c 	bl	8001a6c <HAL_GetTick>
 8004594:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800459c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80045a4:	887b      	ldrh	r3, [r7, #2]
 80045a6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80045a8:	887b      	ldrh	r3, [r7, #2]
 80045aa:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045ac:	7ffb      	ldrb	r3, [r7, #31]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d00c      	beq.n	80045cc <HAL_SPI_TransmitReceive+0x4e>
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045b8:	d106      	bne.n	80045c8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d102      	bne.n	80045c8 <HAL_SPI_TransmitReceive+0x4a>
 80045c2:	7ffb      	ldrb	r3, [r7, #31]
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d001      	beq.n	80045cc <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80045c8:	2302      	movs	r3, #2
 80045ca:	e1f3      	b.n	80049b4 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <HAL_SPI_TransmitReceive+0x60>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <HAL_SPI_TransmitReceive+0x60>
 80045d8:	887b      	ldrh	r3, [r7, #2]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e1e8      	b.n	80049b4 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_SPI_TransmitReceive+0x72>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e1e1      	b.n	80049b4 <HAL_SPI_TransmitReceive+0x436>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b04      	cmp	r3, #4
 8004602:	d003      	beq.n	800460c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2205      	movs	r2, #5
 8004608:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	887a      	ldrh	r2, [r7, #2]
 800461c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	887a      	ldrh	r2, [r7, #2]
 8004624:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	887a      	ldrh	r2, [r7, #2]
 8004632:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	887a      	ldrh	r2, [r7, #2]
 8004638:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800464e:	d802      	bhi.n	8004656 <HAL_SPI_TransmitReceive+0xd8>
 8004650:	8abb      	ldrh	r3, [r7, #20]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d908      	bls.n	8004668 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004664:	605a      	str	r2, [r3, #4]
 8004666:	e007      	b.n	8004678 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004676:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004682:	2b40      	cmp	r3, #64	@ 0x40
 8004684:	d007      	beq.n	8004696 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004694:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800469e:	f240 8083 	bls.w	80047a8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_SPI_TransmitReceive+0x132>
 80046aa:	8afb      	ldrh	r3, [r7, #22]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d16f      	bne.n	8004790 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b4:	881a      	ldrh	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c0:	1c9a      	adds	r2, r3, #2
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046d4:	e05c      	b.n	8004790 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d11b      	bne.n	800471c <HAL_SPI_TransmitReceive+0x19e>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d016      	beq.n	800471c <HAL_SPI_TransmitReceive+0x19e>
 80046ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d113      	bne.n	800471c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f8:	881a      	ldrh	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004704:	1c9a      	adds	r2, r3, #2
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b01      	cmp	r3, #1
 8004728:	d11c      	bne.n	8004764 <HAL_SPI_TransmitReceive+0x1e6>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004730:	b29b      	uxth	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d016      	beq.n	8004764 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004740:	b292      	uxth	r2, r2
 8004742:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004748:	1c9a      	adds	r2, r3, #2
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004760:	2301      	movs	r3, #1
 8004762:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004764:	f7fd f982 	bl	8001a6c <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004770:	429a      	cmp	r2, r3
 8004772:	d80d      	bhi.n	8004790 <HAL_SPI_TransmitReceive+0x212>
 8004774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004776:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800477a:	d009      	beq.n	8004790 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e111      	b.n	80049b4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004794:	b29b      	uxth	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d19d      	bne.n	80046d6 <HAL_SPI_TransmitReceive+0x158>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d197      	bne.n	80046d6 <HAL_SPI_TransmitReceive+0x158>
 80047a6:	e0e5      	b.n	8004974 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_SPI_TransmitReceive+0x23a>
 80047b0:	8afb      	ldrh	r3, [r7, #22]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	f040 80d1 	bne.w	800495a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d912      	bls.n	80047e8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c6:	881a      	ldrh	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d2:	1c9a      	adds	r2, r3, #2
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047dc:	b29b      	uxth	r3, r3
 80047de:	3b02      	subs	r3, #2
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047e6:	e0b8      	b.n	800495a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	330c      	adds	r3, #12
 80047f2:	7812      	ldrb	r2, [r2, #0]
 80047f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b01      	subs	r3, #1
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800480e:	e0a4      	b.n	800495a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b02      	cmp	r3, #2
 800481c:	d134      	bne.n	8004888 <HAL_SPI_TransmitReceive+0x30a>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d02f      	beq.n	8004888 <HAL_SPI_TransmitReceive+0x30a>
 8004828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482a:	2b01      	cmp	r3, #1
 800482c:	d12c      	bne.n	8004888 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b01      	cmp	r3, #1
 8004836:	d912      	bls.n	800485e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483c:	881a      	ldrh	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004848:	1c9a      	adds	r2, r3, #2
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b02      	subs	r3, #2
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800485c:	e012      	b.n	8004884 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	330c      	adds	r3, #12
 8004868:	7812      	ldrb	r2, [r2, #0]
 800486a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b01      	cmp	r3, #1
 8004894:	d148      	bne.n	8004928 <HAL_SPI_TransmitReceive+0x3aa>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800489c:	b29b      	uxth	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d042      	beq.n	8004928 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d923      	bls.n	80048f6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b8:	b292      	uxth	r2, r2
 80048ba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c0:	1c9a      	adds	r2, r3, #2
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b02      	subs	r3, #2
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048de:	b29b      	uxth	r3, r3
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d81f      	bhi.n	8004924 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80048f2:	605a      	str	r2, [r3, #4]
 80048f4:	e016      	b.n	8004924 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f103 020c 	add.w	r2, r3, #12
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004902:	7812      	ldrb	r2, [r2, #0]
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004924:	2301      	movs	r3, #1
 8004926:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004928:	f7fd f8a0 	bl	8001a6c <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004934:	429a      	cmp	r2, r3
 8004936:	d803      	bhi.n	8004940 <HAL_SPI_TransmitReceive+0x3c2>
 8004938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800493e:	d102      	bne.n	8004946 <HAL_SPI_TransmitReceive+0x3c8>
 8004940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004942:	2b00      	cmp	r3, #0
 8004944:	d109      	bne.n	800495a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e02c      	b.n	80049b4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800495e:	b29b      	uxth	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	f47f af55 	bne.w	8004810 <HAL_SPI_TransmitReceive+0x292>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800496c:	b29b      	uxth	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	f47f af4e 	bne.w	8004810 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004974:	6a3a      	ldr	r2, [r7, #32]
 8004976:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 f93d 	bl	8004bf8 <SPI_EndRxTxTransaction>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d008      	beq.n	8004996 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e00e      	b.n	80049b4 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80049b2:	2300      	movs	r3, #0
  }
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3728      	adds	r7, #40	@ 0x28
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	603b      	str	r3, [r7, #0]
 80049c8:	4613      	mov	r3, r2
 80049ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049cc:	f7fd f84e 	bl	8001a6c <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d4:	1a9b      	subs	r3, r3, r2
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	4413      	add	r3, r2
 80049da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049dc:	f7fd f846 	bl	8001a6c <HAL_GetTick>
 80049e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049e2:	4b39      	ldr	r3, [pc, #228]	@ (8004ac8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	015b      	lsls	r3, r3, #5
 80049e8:	0d1b      	lsrs	r3, r3, #20
 80049ea:	69fa      	ldr	r2, [r7, #28]
 80049ec:	fb02 f303 	mul.w	r3, r2, r3
 80049f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049f2:	e054      	b.n	8004a9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049fa:	d050      	beq.n	8004a9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049fc:	f7fd f836 	bl	8001a6c <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	69fa      	ldr	r2, [r7, #28]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d902      	bls.n	8004a12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d13d      	bne.n	8004a8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a2a:	d111      	bne.n	8004a50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a34:	d004      	beq.n	8004a40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a3e:	d107      	bne.n	8004a50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a58:	d10f      	bne.n	8004a7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e017      	b.n	8004abe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	bf0c      	ite	eq
 8004aae:	2301      	moveq	r3, #1
 8004ab0:	2300      	movne	r3, #0
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	79fb      	ldrb	r3, [r7, #7]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d19b      	bne.n	80049f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3720      	adds	r7, #32
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20000034 	.word	0x20000034

08004acc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08a      	sub	sp, #40	@ 0x28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004ada:	2300      	movs	r3, #0
 8004adc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004ade:	f7fc ffc5 	bl	8001a6c <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae6:	1a9b      	subs	r3, r3, r2
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	4413      	add	r3, r2
 8004aec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004aee:	f7fc ffbd 	bl	8001a6c <HAL_GetTick>
 8004af2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	330c      	adds	r3, #12
 8004afa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004afc:	4b3d      	ldr	r3, [pc, #244]	@ (8004bf4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	4613      	mov	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	00da      	lsls	r2, r3, #3
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	0d1b      	lsrs	r3, r3, #20
 8004b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b0e:	fb02 f303 	mul.w	r3, r2, r3
 8004b12:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b14:	e060      	b.n	8004bd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b1c:	d107      	bne.n	8004b2e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d104      	bne.n	8004b2e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004b2c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b34:	d050      	beq.n	8004bd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b36:	f7fc ff99 	bl	8001a6c <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d902      	bls.n	8004b4c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d13d      	bne.n	8004bc8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b64:	d111      	bne.n	8004b8a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b6e:	d004      	beq.n	8004b7a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b78:	d107      	bne.n	8004b8a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b88:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b92:	d10f      	bne.n	8004bb4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bb2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e010      	b.n	8004bea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689a      	ldr	r2, [r3, #8]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	4013      	ands	r3, r2
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d196      	bne.n	8004b16 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3728      	adds	r7, #40	@ 0x28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20000034 	.word	0x20000034

08004bf8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af02      	add	r7, sp, #8
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f7ff ff5b 	bl	8004acc <SPI_WaitFifoStateUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c20:	f043 0220 	orr.w	r2, r3, #32
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e027      	b.n	8004c7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2200      	movs	r2, #0
 8004c34:	2180      	movs	r1, #128	@ 0x80
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f7ff fec0 	bl	80049bc <SPI_WaitFlagStateUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d007      	beq.n	8004c52 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c46:	f043 0220 	orr.w	r2, r3, #32
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e014      	b.n	8004c7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f7ff ff34 	bl	8004acc <SPI_WaitFifoStateUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d007      	beq.n	8004c7a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c6e:	f043 0220 	orr.w	r2, r3, #32
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e000      	b.n	8004c7c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e040      	b.n	8004d18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fc fcfa 	bl	80016a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2224      	movs	r2, #36	@ 0x24
 8004cb0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0201 	bic.w	r2, r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 fb6a 	bl	80053a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f8af 	bl	8004e34 <UART_SetConfig>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d101      	bne.n	8004ce0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e01b      	b.n	8004d18 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 fbe9 	bl	80054e8 <UART_CheckIdleState>
 8004d16:	4603      	mov	r3, r0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08a      	sub	sp, #40	@ 0x28
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	603b      	str	r3, [r7, #0]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d34:	2b20      	cmp	r3, #32
 8004d36:	d177      	bne.n	8004e28 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <HAL_UART_Transmit+0x24>
 8004d3e:	88fb      	ldrh	r3, [r7, #6]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e070      	b.n	8004e2a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2221      	movs	r2, #33	@ 0x21
 8004d54:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d56:	f7fc fe89 	bl	8001a6c <HAL_GetTick>
 8004d5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	88fa      	ldrh	r2, [r7, #6]
 8004d60:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	88fa      	ldrh	r2, [r7, #6]
 8004d68:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d74:	d108      	bne.n	8004d88 <HAL_UART_Transmit+0x68>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d104      	bne.n	8004d88 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	e003      	b.n	8004d90 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d90:	e02f      	b.n	8004df2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	2180      	movs	r1, #128	@ 0x80
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 fc4b 	bl	8005638 <UART_WaitOnFlagUntilTimeout>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d004      	beq.n	8004db2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2220      	movs	r2, #32
 8004dac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e03b      	b.n	8004e2a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10b      	bne.n	8004dd0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	881a      	ldrh	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dc4:	b292      	uxth	r2, r2
 8004dc6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	3302      	adds	r3, #2
 8004dcc:	61bb      	str	r3, [r7, #24]
 8004dce:	e007      	b.n	8004de0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	781a      	ldrb	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1c9      	bne.n	8004d92 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2200      	movs	r2, #0
 8004e06:	2140      	movs	r1, #64	@ 0x40
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 fc15 	bl	8005638 <UART_WaitOnFlagUntilTimeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d004      	beq.n	8004e1e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2220      	movs	r2, #32
 8004e18:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e005      	b.n	8004e2a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2220      	movs	r2, #32
 8004e22:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	e000      	b.n	8004e2a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004e28:	2302      	movs	r3, #2
  }
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3720      	adds	r7, #32
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
	...

08004e34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e38:	b08a      	sub	sp, #40	@ 0x28
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	4ba4      	ldr	r3, [pc, #656]	@ (80050f4 <UART_SetConfig+0x2c0>)
 8004e64:	4013      	ands	r3, r2
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	6812      	ldr	r2, [r2, #0]
 8004e6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e6c:	430b      	orrs	r3, r1
 8004e6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a99      	ldr	r2, [pc, #612]	@ (80050f8 <UART_SetConfig+0x2c4>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d004      	beq.n	8004ea0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a90      	ldr	r2, [pc, #576]	@ (80050fc <UART_SetConfig+0x2c8>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d126      	bne.n	8004f0c <UART_SetConfig+0xd8>
 8004ebe:	4b90      	ldr	r3, [pc, #576]	@ (8005100 <UART_SetConfig+0x2cc>)
 8004ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec4:	f003 0303 	and.w	r3, r3, #3
 8004ec8:	2b03      	cmp	r3, #3
 8004eca:	d81b      	bhi.n	8004f04 <UART_SetConfig+0xd0>
 8004ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed4 <UART_SetConfig+0xa0>)
 8004ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed2:	bf00      	nop
 8004ed4:	08004ee5 	.word	0x08004ee5
 8004ed8:	08004ef5 	.word	0x08004ef5
 8004edc:	08004eed 	.word	0x08004eed
 8004ee0:	08004efd 	.word	0x08004efd
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eea:	e116      	b.n	800511a <UART_SetConfig+0x2e6>
 8004eec:	2302      	movs	r3, #2
 8004eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ef2:	e112      	b.n	800511a <UART_SetConfig+0x2e6>
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004efa:	e10e      	b.n	800511a <UART_SetConfig+0x2e6>
 8004efc:	2308      	movs	r3, #8
 8004efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f02:	e10a      	b.n	800511a <UART_SetConfig+0x2e6>
 8004f04:	2310      	movs	r3, #16
 8004f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f0a:	e106      	b.n	800511a <UART_SetConfig+0x2e6>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a7c      	ldr	r2, [pc, #496]	@ (8005104 <UART_SetConfig+0x2d0>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d138      	bne.n	8004f88 <UART_SetConfig+0x154>
 8004f16:	4b7a      	ldr	r3, [pc, #488]	@ (8005100 <UART_SetConfig+0x2cc>)
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f1c:	f003 030c 	and.w	r3, r3, #12
 8004f20:	2b0c      	cmp	r3, #12
 8004f22:	d82d      	bhi.n	8004f80 <UART_SetConfig+0x14c>
 8004f24:	a201      	add	r2, pc, #4	@ (adr r2, 8004f2c <UART_SetConfig+0xf8>)
 8004f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2a:	bf00      	nop
 8004f2c:	08004f61 	.word	0x08004f61
 8004f30:	08004f81 	.word	0x08004f81
 8004f34:	08004f81 	.word	0x08004f81
 8004f38:	08004f81 	.word	0x08004f81
 8004f3c:	08004f71 	.word	0x08004f71
 8004f40:	08004f81 	.word	0x08004f81
 8004f44:	08004f81 	.word	0x08004f81
 8004f48:	08004f81 	.word	0x08004f81
 8004f4c:	08004f69 	.word	0x08004f69
 8004f50:	08004f81 	.word	0x08004f81
 8004f54:	08004f81 	.word	0x08004f81
 8004f58:	08004f81 	.word	0x08004f81
 8004f5c:	08004f79 	.word	0x08004f79
 8004f60:	2300      	movs	r3, #0
 8004f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f66:	e0d8      	b.n	800511a <UART_SetConfig+0x2e6>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f6e:	e0d4      	b.n	800511a <UART_SetConfig+0x2e6>
 8004f70:	2304      	movs	r3, #4
 8004f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f76:	e0d0      	b.n	800511a <UART_SetConfig+0x2e6>
 8004f78:	2308      	movs	r3, #8
 8004f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f7e:	e0cc      	b.n	800511a <UART_SetConfig+0x2e6>
 8004f80:	2310      	movs	r3, #16
 8004f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f86:	e0c8      	b.n	800511a <UART_SetConfig+0x2e6>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a5e      	ldr	r2, [pc, #376]	@ (8005108 <UART_SetConfig+0x2d4>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d125      	bne.n	8004fde <UART_SetConfig+0x1aa>
 8004f92:	4b5b      	ldr	r3, [pc, #364]	@ (8005100 <UART_SetConfig+0x2cc>)
 8004f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f98:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f9c:	2b30      	cmp	r3, #48	@ 0x30
 8004f9e:	d016      	beq.n	8004fce <UART_SetConfig+0x19a>
 8004fa0:	2b30      	cmp	r3, #48	@ 0x30
 8004fa2:	d818      	bhi.n	8004fd6 <UART_SetConfig+0x1a2>
 8004fa4:	2b20      	cmp	r3, #32
 8004fa6:	d00a      	beq.n	8004fbe <UART_SetConfig+0x18a>
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	d814      	bhi.n	8004fd6 <UART_SetConfig+0x1a2>
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <UART_SetConfig+0x182>
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d008      	beq.n	8004fc6 <UART_SetConfig+0x192>
 8004fb4:	e00f      	b.n	8004fd6 <UART_SetConfig+0x1a2>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fbc:	e0ad      	b.n	800511a <UART_SetConfig+0x2e6>
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fc4:	e0a9      	b.n	800511a <UART_SetConfig+0x2e6>
 8004fc6:	2304      	movs	r3, #4
 8004fc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fcc:	e0a5      	b.n	800511a <UART_SetConfig+0x2e6>
 8004fce:	2308      	movs	r3, #8
 8004fd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fd4:	e0a1      	b.n	800511a <UART_SetConfig+0x2e6>
 8004fd6:	2310      	movs	r3, #16
 8004fd8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fdc:	e09d      	b.n	800511a <UART_SetConfig+0x2e6>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a4a      	ldr	r2, [pc, #296]	@ (800510c <UART_SetConfig+0x2d8>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d125      	bne.n	8005034 <UART_SetConfig+0x200>
 8004fe8:	4b45      	ldr	r3, [pc, #276]	@ (8005100 <UART_SetConfig+0x2cc>)
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004ff2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ff4:	d016      	beq.n	8005024 <UART_SetConfig+0x1f0>
 8004ff6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ff8:	d818      	bhi.n	800502c <UART_SetConfig+0x1f8>
 8004ffa:	2b80      	cmp	r3, #128	@ 0x80
 8004ffc:	d00a      	beq.n	8005014 <UART_SetConfig+0x1e0>
 8004ffe:	2b80      	cmp	r3, #128	@ 0x80
 8005000:	d814      	bhi.n	800502c <UART_SetConfig+0x1f8>
 8005002:	2b00      	cmp	r3, #0
 8005004:	d002      	beq.n	800500c <UART_SetConfig+0x1d8>
 8005006:	2b40      	cmp	r3, #64	@ 0x40
 8005008:	d008      	beq.n	800501c <UART_SetConfig+0x1e8>
 800500a:	e00f      	b.n	800502c <UART_SetConfig+0x1f8>
 800500c:	2300      	movs	r3, #0
 800500e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005012:	e082      	b.n	800511a <UART_SetConfig+0x2e6>
 8005014:	2302      	movs	r3, #2
 8005016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800501a:	e07e      	b.n	800511a <UART_SetConfig+0x2e6>
 800501c:	2304      	movs	r3, #4
 800501e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005022:	e07a      	b.n	800511a <UART_SetConfig+0x2e6>
 8005024:	2308      	movs	r3, #8
 8005026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800502a:	e076      	b.n	800511a <UART_SetConfig+0x2e6>
 800502c:	2310      	movs	r3, #16
 800502e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005032:	e072      	b.n	800511a <UART_SetConfig+0x2e6>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a35      	ldr	r2, [pc, #212]	@ (8005110 <UART_SetConfig+0x2dc>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d12a      	bne.n	8005094 <UART_SetConfig+0x260>
 800503e:	4b30      	ldr	r3, [pc, #192]	@ (8005100 <UART_SetConfig+0x2cc>)
 8005040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005044:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005048:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800504c:	d01a      	beq.n	8005084 <UART_SetConfig+0x250>
 800504e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005052:	d81b      	bhi.n	800508c <UART_SetConfig+0x258>
 8005054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005058:	d00c      	beq.n	8005074 <UART_SetConfig+0x240>
 800505a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800505e:	d815      	bhi.n	800508c <UART_SetConfig+0x258>
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <UART_SetConfig+0x238>
 8005064:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005068:	d008      	beq.n	800507c <UART_SetConfig+0x248>
 800506a:	e00f      	b.n	800508c <UART_SetConfig+0x258>
 800506c:	2300      	movs	r3, #0
 800506e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005072:	e052      	b.n	800511a <UART_SetConfig+0x2e6>
 8005074:	2302      	movs	r3, #2
 8005076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800507a:	e04e      	b.n	800511a <UART_SetConfig+0x2e6>
 800507c:	2304      	movs	r3, #4
 800507e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005082:	e04a      	b.n	800511a <UART_SetConfig+0x2e6>
 8005084:	2308      	movs	r3, #8
 8005086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800508a:	e046      	b.n	800511a <UART_SetConfig+0x2e6>
 800508c:	2310      	movs	r3, #16
 800508e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005092:	e042      	b.n	800511a <UART_SetConfig+0x2e6>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a17      	ldr	r2, [pc, #92]	@ (80050f8 <UART_SetConfig+0x2c4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d13a      	bne.n	8005114 <UART_SetConfig+0x2e0>
 800509e:	4b18      	ldr	r3, [pc, #96]	@ (8005100 <UART_SetConfig+0x2cc>)
 80050a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80050a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050ac:	d01a      	beq.n	80050e4 <UART_SetConfig+0x2b0>
 80050ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050b2:	d81b      	bhi.n	80050ec <UART_SetConfig+0x2b8>
 80050b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050b8:	d00c      	beq.n	80050d4 <UART_SetConfig+0x2a0>
 80050ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050be:	d815      	bhi.n	80050ec <UART_SetConfig+0x2b8>
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <UART_SetConfig+0x298>
 80050c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050c8:	d008      	beq.n	80050dc <UART_SetConfig+0x2a8>
 80050ca:	e00f      	b.n	80050ec <UART_SetConfig+0x2b8>
 80050cc:	2300      	movs	r3, #0
 80050ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050d2:	e022      	b.n	800511a <UART_SetConfig+0x2e6>
 80050d4:	2302      	movs	r3, #2
 80050d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050da:	e01e      	b.n	800511a <UART_SetConfig+0x2e6>
 80050dc:	2304      	movs	r3, #4
 80050de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050e2:	e01a      	b.n	800511a <UART_SetConfig+0x2e6>
 80050e4:	2308      	movs	r3, #8
 80050e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ea:	e016      	b.n	800511a <UART_SetConfig+0x2e6>
 80050ec:	2310      	movs	r3, #16
 80050ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050f2:	e012      	b.n	800511a <UART_SetConfig+0x2e6>
 80050f4:	efff69f3 	.word	0xefff69f3
 80050f8:	40008000 	.word	0x40008000
 80050fc:	40013800 	.word	0x40013800
 8005100:	40021000 	.word	0x40021000
 8005104:	40004400 	.word	0x40004400
 8005108:	40004800 	.word	0x40004800
 800510c:	40004c00 	.word	0x40004c00
 8005110:	40005000 	.word	0x40005000
 8005114:	2310      	movs	r3, #16
 8005116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a9f      	ldr	r2, [pc, #636]	@ (800539c <UART_SetConfig+0x568>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d17a      	bne.n	800521a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005124:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005128:	2b08      	cmp	r3, #8
 800512a:	d824      	bhi.n	8005176 <UART_SetConfig+0x342>
 800512c:	a201      	add	r2, pc, #4	@ (adr r2, 8005134 <UART_SetConfig+0x300>)
 800512e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005132:	bf00      	nop
 8005134:	08005159 	.word	0x08005159
 8005138:	08005177 	.word	0x08005177
 800513c:	08005161 	.word	0x08005161
 8005140:	08005177 	.word	0x08005177
 8005144:	08005167 	.word	0x08005167
 8005148:	08005177 	.word	0x08005177
 800514c:	08005177 	.word	0x08005177
 8005150:	08005177 	.word	0x08005177
 8005154:	0800516f 	.word	0x0800516f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005158:	f7fe fab0 	bl	80036bc <HAL_RCC_GetPCLK1Freq>
 800515c:	61f8      	str	r0, [r7, #28]
        break;
 800515e:	e010      	b.n	8005182 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005160:	4b8f      	ldr	r3, [pc, #572]	@ (80053a0 <UART_SetConfig+0x56c>)
 8005162:	61fb      	str	r3, [r7, #28]
        break;
 8005164:	e00d      	b.n	8005182 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005166:	f7fe fa11 	bl	800358c <HAL_RCC_GetSysClockFreq>
 800516a:	61f8      	str	r0, [r7, #28]
        break;
 800516c:	e009      	b.n	8005182 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800516e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005172:	61fb      	str	r3, [r7, #28]
        break;
 8005174:	e005      	b.n	8005182 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005180:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 80fb 	beq.w	8005380 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	4613      	mov	r3, r2
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	4413      	add	r3, r2
 8005194:	69fa      	ldr	r2, [r7, #28]
 8005196:	429a      	cmp	r2, r3
 8005198:	d305      	bcc.n	80051a6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d903      	bls.n	80051ae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051ac:	e0e8      	b.n	8005380 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	2200      	movs	r2, #0
 80051b2:	461c      	mov	r4, r3
 80051b4:	4615      	mov	r5, r2
 80051b6:	f04f 0200 	mov.w	r2, #0
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	022b      	lsls	r3, r5, #8
 80051c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80051c4:	0222      	lsls	r2, r4, #8
 80051c6:	68f9      	ldr	r1, [r7, #12]
 80051c8:	6849      	ldr	r1, [r1, #4]
 80051ca:	0849      	lsrs	r1, r1, #1
 80051cc:	2000      	movs	r0, #0
 80051ce:	4688      	mov	r8, r1
 80051d0:	4681      	mov	r9, r0
 80051d2:	eb12 0a08 	adds.w	sl, r2, r8
 80051d6:	eb43 0b09 	adc.w	fp, r3, r9
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	603b      	str	r3, [r7, #0]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051e8:	4650      	mov	r0, sl
 80051ea:	4659      	mov	r1, fp
 80051ec:	f7fb fb46 	bl	800087c <__aeabi_uldivmod>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4613      	mov	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051fe:	d308      	bcc.n	8005212 <UART_SetConfig+0x3de>
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005206:	d204      	bcs.n	8005212 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	60da      	str	r2, [r3, #12]
 8005210:	e0b6      	b.n	8005380 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005218:	e0b2      	b.n	8005380 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005222:	d15e      	bne.n	80052e2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005224:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005228:	2b08      	cmp	r3, #8
 800522a:	d828      	bhi.n	800527e <UART_SetConfig+0x44a>
 800522c:	a201      	add	r2, pc, #4	@ (adr r2, 8005234 <UART_SetConfig+0x400>)
 800522e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005232:	bf00      	nop
 8005234:	08005259 	.word	0x08005259
 8005238:	08005261 	.word	0x08005261
 800523c:	08005269 	.word	0x08005269
 8005240:	0800527f 	.word	0x0800527f
 8005244:	0800526f 	.word	0x0800526f
 8005248:	0800527f 	.word	0x0800527f
 800524c:	0800527f 	.word	0x0800527f
 8005250:	0800527f 	.word	0x0800527f
 8005254:	08005277 	.word	0x08005277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005258:	f7fe fa30 	bl	80036bc <HAL_RCC_GetPCLK1Freq>
 800525c:	61f8      	str	r0, [r7, #28]
        break;
 800525e:	e014      	b.n	800528a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005260:	f7fe fa42 	bl	80036e8 <HAL_RCC_GetPCLK2Freq>
 8005264:	61f8      	str	r0, [r7, #28]
        break;
 8005266:	e010      	b.n	800528a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005268:	4b4d      	ldr	r3, [pc, #308]	@ (80053a0 <UART_SetConfig+0x56c>)
 800526a:	61fb      	str	r3, [r7, #28]
        break;
 800526c:	e00d      	b.n	800528a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800526e:	f7fe f98d 	bl	800358c <HAL_RCC_GetSysClockFreq>
 8005272:	61f8      	str	r0, [r7, #28]
        break;
 8005274:	e009      	b.n	800528a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005276:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800527a:	61fb      	str	r3, [r7, #28]
        break;
 800527c:	e005      	b.n	800528a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005288:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d077      	beq.n	8005380 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	005a      	lsls	r2, r3, #1
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	085b      	lsrs	r3, r3, #1
 800529a:	441a      	add	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	2b0f      	cmp	r3, #15
 80052aa:	d916      	bls.n	80052da <UART_SetConfig+0x4a6>
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052b2:	d212      	bcs.n	80052da <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	f023 030f 	bic.w	r3, r3, #15
 80052bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	085b      	lsrs	r3, r3, #1
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	8afb      	ldrh	r3, [r7, #22]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	8afa      	ldrh	r2, [r7, #22]
 80052d6:	60da      	str	r2, [r3, #12]
 80052d8:	e052      	b.n	8005380 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80052e0:	e04e      	b.n	8005380 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052e6:	2b08      	cmp	r3, #8
 80052e8:	d827      	bhi.n	800533a <UART_SetConfig+0x506>
 80052ea:	a201      	add	r2, pc, #4	@ (adr r2, 80052f0 <UART_SetConfig+0x4bc>)
 80052ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f0:	08005315 	.word	0x08005315
 80052f4:	0800531d 	.word	0x0800531d
 80052f8:	08005325 	.word	0x08005325
 80052fc:	0800533b 	.word	0x0800533b
 8005300:	0800532b 	.word	0x0800532b
 8005304:	0800533b 	.word	0x0800533b
 8005308:	0800533b 	.word	0x0800533b
 800530c:	0800533b 	.word	0x0800533b
 8005310:	08005333 	.word	0x08005333
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005314:	f7fe f9d2 	bl	80036bc <HAL_RCC_GetPCLK1Freq>
 8005318:	61f8      	str	r0, [r7, #28]
        break;
 800531a:	e014      	b.n	8005346 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800531c:	f7fe f9e4 	bl	80036e8 <HAL_RCC_GetPCLK2Freq>
 8005320:	61f8      	str	r0, [r7, #28]
        break;
 8005322:	e010      	b.n	8005346 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005324:	4b1e      	ldr	r3, [pc, #120]	@ (80053a0 <UART_SetConfig+0x56c>)
 8005326:	61fb      	str	r3, [r7, #28]
        break;
 8005328:	e00d      	b.n	8005346 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800532a:	f7fe f92f 	bl	800358c <HAL_RCC_GetSysClockFreq>
 800532e:	61f8      	str	r0, [r7, #28]
        break;
 8005330:	e009      	b.n	8005346 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005336:	61fb      	str	r3, [r7, #28]
        break;
 8005338:	e005      	b.n	8005346 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005344:	bf00      	nop
    }

    if (pclk != 0U)
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d019      	beq.n	8005380 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	085a      	lsrs	r2, r3, #1
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	441a      	add	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	fbb2 f3f3 	udiv	r3, r2, r3
 800535e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	2b0f      	cmp	r3, #15
 8005364:	d909      	bls.n	800537a <UART_SetConfig+0x546>
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800536c:	d205      	bcs.n	800537a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	60da      	str	r2, [r3, #12]
 8005378:	e002      	b.n	8005380 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800538c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005390:	4618      	mov	r0, r3
 8005392:	3728      	adds	r7, #40	@ 0x28
 8005394:	46bd      	mov	sp, r7
 8005396:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800539a:	bf00      	nop
 800539c:	40008000 	.word	0x40008000
 80053a0:	00f42400 	.word	0x00f42400

080053a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00a      	beq.n	80053ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005438:	f003 0310 	and.w	r3, r3, #16
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545a:	f003 0320 	and.w	r3, r3, #32
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005480:	2b00      	cmp	r3, #0
 8005482:	d01a      	beq.n	80054ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054a2:	d10a      	bne.n	80054ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	605a      	str	r2, [r3, #4]
  }
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b098      	sub	sp, #96	@ 0x60
 80054ec:	af02      	add	r7, sp, #8
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054f8:	f7fc fab8 	bl	8001a6c <HAL_GetTick>
 80054fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0308 	and.w	r3, r3, #8
 8005508:	2b08      	cmp	r3, #8
 800550a:	d12e      	bne.n	800556a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800550c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005514:	2200      	movs	r2, #0
 8005516:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f88c 	bl	8005638 <UART_WaitOnFlagUntilTimeout>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d021      	beq.n	800556a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800552e:	e853 3f00 	ldrex	r3, [r3]
 8005532:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005536:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800553a:	653b      	str	r3, [r7, #80]	@ 0x50
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	461a      	mov	r2, r3
 8005542:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005544:	647b      	str	r3, [r7, #68]	@ 0x44
 8005546:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005548:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800554a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800554c:	e841 2300 	strex	r3, r2, [r1]
 8005550:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1e6      	bne.n	8005526 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2220      	movs	r2, #32
 800555c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e062      	b.n	8005630 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0304 	and.w	r3, r3, #4
 8005574:	2b04      	cmp	r3, #4
 8005576:	d149      	bne.n	800560c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005578:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005580:	2200      	movs	r2, #0
 8005582:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f856 	bl	8005638 <UART_WaitOnFlagUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d03c      	beq.n	800560c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559a:	e853 3f00 	ldrex	r3, [r3]
 800559e:	623b      	str	r3, [r7, #32]
   return(result);
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	461a      	mov	r2, r3
 80055ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80055b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055b8:	e841 2300 	strex	r3, r2, [r1]
 80055bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1e6      	bne.n	8005592 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3308      	adds	r3, #8
 80055ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	e853 3f00 	ldrex	r3, [r3]
 80055d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0301 	bic.w	r3, r3, #1
 80055da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3308      	adds	r3, #8
 80055e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055e4:	61fa      	str	r2, [r7, #28]
 80055e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e8:	69b9      	ldr	r1, [r7, #24]
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	e841 2300 	strex	r3, r2, [r1]
 80055f0:	617b      	str	r3, [r7, #20]
   return(result);
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e5      	bne.n	80055c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e011      	b.n	8005630 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2220      	movs	r2, #32
 8005610:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2220      	movs	r2, #32
 8005616:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3758      	adds	r7, #88	@ 0x58
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	603b      	str	r3, [r7, #0]
 8005644:	4613      	mov	r3, r2
 8005646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005648:	e04f      	b.n	80056ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005650:	d04b      	beq.n	80056ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005652:	f7fc fa0b 	bl	8001a6c <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	429a      	cmp	r2, r3
 8005660:	d302      	bcc.n	8005668 <UART_WaitOnFlagUntilTimeout+0x30>
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e04e      	b.n	800570a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0304 	and.w	r3, r3, #4
 8005676:	2b00      	cmp	r3, #0
 8005678:	d037      	beq.n	80056ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2b80      	cmp	r3, #128	@ 0x80
 800567e:	d034      	beq.n	80056ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2b40      	cmp	r3, #64	@ 0x40
 8005684:	d031      	beq.n	80056ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	f003 0308 	and.w	r3, r3, #8
 8005690:	2b08      	cmp	r3, #8
 8005692:	d110      	bne.n	80056b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2208      	movs	r2, #8
 800569a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 f838 	bl	8005712 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2208      	movs	r2, #8
 80056a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e029      	b.n	800570a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056c4:	d111      	bne.n	80056ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 f81e 	bl	8005712 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2220      	movs	r2, #32
 80056da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e00f      	b.n	800570a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69da      	ldr	r2, [r3, #28]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4013      	ands	r3, r2
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	bf0c      	ite	eq
 80056fa:	2301      	moveq	r3, #1
 80056fc:	2300      	movne	r3, #0
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	461a      	mov	r2, r3
 8005702:	79fb      	ldrb	r3, [r7, #7]
 8005704:	429a      	cmp	r2, r3
 8005706:	d0a0      	beq.n	800564a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005712:	b480      	push	{r7}
 8005714:	b095      	sub	sp, #84	@ 0x54
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005722:	e853 3f00 	ldrex	r3, [r3]
 8005726:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800572e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005738:	643b      	str	r3, [r7, #64]	@ 0x40
 800573a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800573e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005740:	e841 2300 	strex	r3, r2, [r1]
 8005744:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1e6      	bne.n	800571a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3308      	adds	r3, #8
 8005752:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	e853 3f00 	ldrex	r3, [r3]
 800575a:	61fb      	str	r3, [r7, #28]
   return(result);
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	f023 0301 	bic.w	r3, r3, #1
 8005762:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3308      	adds	r3, #8
 800576a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800576c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800576e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005772:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800577a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e5      	bne.n	800574c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005784:	2b01      	cmp	r3, #1
 8005786:	d118      	bne.n	80057ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	e853 3f00 	ldrex	r3, [r3]
 8005794:	60bb      	str	r3, [r7, #8]
   return(result);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f023 0310 	bic.w	r3, r3, #16
 800579c:	647b      	str	r3, [r7, #68]	@ 0x44
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057a6:	61bb      	str	r3, [r7, #24]
 80057a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057aa:	6979      	ldr	r1, [r7, #20]
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	e841 2300 	strex	r3, r2, [r1]
 80057b2:	613b      	str	r3, [r7, #16]
   return(result);
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1e6      	bne.n	8005788 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2220      	movs	r2, #32
 80057be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80057ce:	bf00      	nop
 80057d0:	3754      	adds	r7, #84	@ 0x54
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
	...

080057dc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80057e0:	4904      	ldr	r1, [pc, #16]	@ (80057f4 <MX_FATFS_Init+0x18>)
 80057e2:	4805      	ldr	r0, [pc, #20]	@ (80057f8 <MX_FATFS_Init+0x1c>)
 80057e4:	f003 fc58 	bl	8009098 <FATFS_LinkDriver>
 80057e8:	4603      	mov	r3, r0
 80057ea:	461a      	mov	r2, r3
 80057ec:	4b03      	ldr	r3, [pc, #12]	@ (80057fc <MX_FATFS_Init+0x20>)
 80057ee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80057f0:	bf00      	nop
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	20004a68 	.word	0x20004a68
 80057f8:	20000040 	.word	0x20000040
 80057fc:	20004a64 	.word	0x20004a64

08005800 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005800:	b480      	push	{r7}
 8005802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005804:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005806:	4618      	mov	r0, r3
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8005814:	2200      	movs	r2, #0
 8005816:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800581a:	4804      	ldr	r0, [pc, #16]	@ (800582c <SELECT+0x1c>)
 800581c:	f7fd f946 	bl	8002aac <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8005820:	2001      	movs	r0, #1
 8005822:	f7fc f92f 	bl	8001a84 <HAL_Delay>
}
 8005826:	bf00      	nop
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	48000400 	.word	0x48000400

08005830 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8005834:	2201      	movs	r2, #1
 8005836:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800583a:	4804      	ldr	r0, [pc, #16]	@ (800584c <DESELECT+0x1c>)
 800583c:	f7fd f936 	bl	8002aac <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8005840:	2001      	movs	r0, #1
 8005842:	f7fc f91f 	bl	8001a84 <HAL_Delay>
}
 8005846:	bf00      	nop
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	48000400 	.word	0x48000400

08005850 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	4603      	mov	r3, r0
 8005858:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800585a:	bf00      	nop
 800585c:	4b08      	ldr	r3, [pc, #32]	@ (8005880 <SPI_TxByte+0x30>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b02      	cmp	r3, #2
 8005868:	d1f8      	bne.n	800585c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800586a:	1df9      	adds	r1, r7, #7
 800586c:	2364      	movs	r3, #100	@ 0x64
 800586e:	2201      	movs	r2, #1
 8005870:	4803      	ldr	r0, [pc, #12]	@ (8005880 <SPI_TxByte+0x30>)
 8005872:	f7fe fd0e 	bl	8004292 <HAL_SPI_Transmit>
}
 8005876:	bf00      	nop
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	200001a0 	.word	0x200001a0

08005884 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005890:	bf00      	nop
 8005892:	4b08      	ldr	r3, [pc, #32]	@ (80058b4 <SPI_TxBuffer+0x30>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b02      	cmp	r3, #2
 800589e:	d1f8      	bne.n	8005892 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80058a0:	887a      	ldrh	r2, [r7, #2]
 80058a2:	2364      	movs	r3, #100	@ 0x64
 80058a4:	6879      	ldr	r1, [r7, #4]
 80058a6:	4803      	ldr	r0, [pc, #12]	@ (80058b4 <SPI_TxBuffer+0x30>)
 80058a8:	f7fe fcf3 	bl	8004292 <HAL_SPI_Transmit>
}
 80058ac:	bf00      	nop
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	200001a0 	.word	0x200001a0

080058b8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80058be:	23ff      	movs	r3, #255	@ 0xff
 80058c0:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80058c2:	bf00      	nop
 80058c4:	4b09      	ldr	r3, [pc, #36]	@ (80058ec <SPI_RxByte+0x34>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d1f8      	bne.n	80058c4 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80058d2:	1dba      	adds	r2, r7, #6
 80058d4:	1df9      	adds	r1, r7, #7
 80058d6:	2364      	movs	r3, #100	@ 0x64
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	2301      	movs	r3, #1
 80058dc:	4803      	ldr	r0, [pc, #12]	@ (80058ec <SPI_RxByte+0x34>)
 80058de:	f7fe fe4e 	bl	800457e <HAL_SPI_TransmitReceive>

  return data;
 80058e2:	79bb      	ldrb	r3, [r7, #6]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	200001a0 	.word	0x200001a0

080058f0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80058f8:	f7ff ffde 	bl	80058b8 <SPI_RxByte>
 80058fc:	4603      	mov	r3, r0
 80058fe:	461a      	mov	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	701a      	strb	r2, [r3, #0]
}
 8005904:	bf00      	nop
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 8005912:	4b0a      	ldr	r3, [pc, #40]	@ (800593c <SD_ReadyWait+0x30>)
 8005914:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8005918:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800591a:	f7ff ffcd 	bl	80058b8 <SPI_RxByte>
 800591e:	4603      	mov	r3, r0
 8005920:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8005922:	79fb      	ldrb	r3, [r7, #7]
 8005924:	2bff      	cmp	r3, #255	@ 0xff
 8005926:	d003      	beq.n	8005930 <SD_ReadyWait+0x24>
 8005928:	4b04      	ldr	r3, [pc, #16]	@ (800593c <SD_ReadyWait+0x30>)
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1f4      	bne.n	800591a <SD_ReadyWait+0xe>

  return res;
 8005930:	79fb      	ldrb	r3, [r7, #7]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20004a6e 	.word	0x20004a6e

08005940 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8005946:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800594a:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 800594c:	f7ff ff70 	bl	8005830 <DESELECT>
  for(int i = 0; i < 10; i++)
 8005950:	2300      	movs	r3, #0
 8005952:	60bb      	str	r3, [r7, #8]
 8005954:	e005      	b.n	8005962 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8005956:	20ff      	movs	r0, #255	@ 0xff
 8005958:	f7ff ff7a 	bl	8005850 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	3301      	adds	r3, #1
 8005960:	60bb      	str	r3, [r7, #8]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b09      	cmp	r3, #9
 8005966:	ddf6      	ble.n	8005956 <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8005968:	f7ff ff52 	bl	8005810 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800596c:	2340      	movs	r3, #64	@ 0x40
 800596e:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8005970:	2300      	movs	r3, #0
 8005972:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8005974:	2300      	movs	r3, #0
 8005976:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8005978:	2300      	movs	r3, #0
 800597a:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8005980:	2395      	movs	r3, #149	@ 0x95
 8005982:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8005984:	463b      	mov	r3, r7
 8005986:	2106      	movs	r1, #6
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff ff7b 	bl	8005884 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800598e:	e002      	b.n	8005996 <SD_PowerOn+0x56>
  {
    cnt--;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3b01      	subs	r3, #1
 8005994:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8005996:	f7ff ff8f 	bl	80058b8 <SPI_RxByte>
 800599a:	4603      	mov	r3, r0
 800599c:	2b01      	cmp	r3, #1
 800599e:	d002      	beq.n	80059a6 <SD_PowerOn+0x66>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1f4      	bne.n	8005990 <SD_PowerOn+0x50>
  }

  DESELECT();
 80059a6:	f7ff ff43 	bl	8005830 <DESELECT>
  SPI_TxByte(0XFF);
 80059aa:	20ff      	movs	r0, #255	@ 0xff
 80059ac:	f7ff ff50 	bl	8005850 <SPI_TxByte>

  PowerFlag = 1;
 80059b0:	4b03      	ldr	r3, [pc, #12]	@ (80059c0 <SD_PowerOn+0x80>)
 80059b2:	2201      	movs	r2, #1
 80059b4:	701a      	strb	r2, [r3, #0]
}
 80059b6:	bf00      	nop
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20004a71 	.word	0x20004a71

080059c4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80059c4:	b480      	push	{r7}
 80059c6:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80059c8:	4b03      	ldr	r3, [pc, #12]	@ (80059d8 <SD_PowerOff+0x14>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	701a      	strb	r2, [r3, #0]
}
 80059ce:	bf00      	nop
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	20004a71 	.word	0x20004a71

080059dc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
  return PowerFlag;
 80059e0:	4b03      	ldr	r3, [pc, #12]	@ (80059f0 <SD_CheckPower+0x14>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	20004a71 	.word	0x20004a71

080059f4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 80059fe:	4b13      	ldr	r3, [pc, #76]	@ (8005a4c <SD_RxDataBlock+0x58>)
 8005a00:	22c8      	movs	r2, #200	@ 0xc8
 8005a02:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8005a04:	f7ff ff58 	bl	80058b8 <SPI_RxByte>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
 8005a0e:	2bff      	cmp	r3, #255	@ 0xff
 8005a10:	d103      	bne.n	8005a1a <SD_RxDataBlock+0x26>
 8005a12:	4b0e      	ldr	r3, [pc, #56]	@ (8005a4c <SD_RxDataBlock+0x58>)
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1f4      	bne.n	8005a04 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
 8005a1c:	2bfe      	cmp	r3, #254	@ 0xfe
 8005a1e:	d001      	beq.n	8005a24 <SD_RxDataBlock+0x30>
 8005a20:	2300      	movs	r3, #0
 8005a22:	e00f      	b.n	8005a44 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	1c5a      	adds	r2, r3, #1
 8005a28:	607a      	str	r2, [r7, #4]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7ff ff60 	bl	80058f0 <SPI_RxBytePtr>
  } while(len--);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	1e5a      	subs	r2, r3, #1
 8005a34:	603a      	str	r2, [r7, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1f4      	bne.n	8005a24 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 8005a3a:	f7ff ff3d 	bl	80058b8 <SPI_RxByte>
  SPI_RxByte();
 8005a3e:	f7ff ff3b 	bl	80058b8 <SPI_RxByte>

  return TRUE;
 8005a42:	2301      	movs	r3, #1
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	20004a6c 	.word	0x20004a6c

08005a50 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8005a60:	f7ff ff54 	bl	800590c <SD_ReadyWait>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2bff      	cmp	r3, #255	@ 0xff
 8005a68:	d001      	beq.n	8005a6e <SD_TxDataBlock+0x1e>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	e02f      	b.n	8005ace <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8005a6e:	78fb      	ldrb	r3, [r7, #3]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7ff feed 	bl	8005850 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8005a76:	78fb      	ldrb	r3, [r7, #3]
 8005a78:	2bfd      	cmp	r3, #253	@ 0xfd
 8005a7a:	d020      	beq.n	8005abe <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8005a7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7ff feff 	bl	8005884 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 8005a86:	f7ff ff17 	bl	80058b8 <SPI_RxByte>
    SPI_RxByte();
 8005a8a:	f7ff ff15 	bl	80058b8 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8005a8e:	e00b      	b.n	8005aa8 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8005a90:	f7ff ff12 	bl	80058b8 <SPI_RxByte>
 8005a94:	4603      	mov	r3, r0
 8005a96:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
 8005a9a:	f003 031f 	and.w	r3, r3, #31
 8005a9e:	2b05      	cmp	r3, #5
 8005aa0:	d006      	beq.n	8005ab0 <SD_TxDataBlock+0x60>
      i++;
 8005aa2:	7bbb      	ldrb	r3, [r7, #14]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8005aa8:	7bbb      	ldrb	r3, [r7, #14]
 8005aaa:	2b40      	cmp	r3, #64	@ 0x40
 8005aac:	d9f0      	bls.n	8005a90 <SD_TxDataBlock+0x40>
 8005aae:	e000      	b.n	8005ab2 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8005ab0:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8005ab2:	bf00      	nop
 8005ab4:	f7ff ff00 	bl	80058b8 <SPI_RxByte>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0fa      	beq.n	8005ab4 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
 8005ac0:	f003 031f 	and.w	r3, r3, #31
 8005ac4:	2b05      	cmp	r3, #5
 8005ac6:	d101      	bne.n	8005acc <SD_TxDataBlock+0x7c>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e000      	b.n	8005ace <SD_TxDataBlock+0x7e>

  return FALSE;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b084      	sub	sp, #16
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	4603      	mov	r3, r0
 8005ade:	6039      	str	r1, [r7, #0]
 8005ae0:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8005ae2:	f7ff ff13 	bl	800590c <SD_ReadyWait>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2bff      	cmp	r3, #255	@ 0xff
 8005aea:	d001      	beq.n	8005af0 <SD_SendCmd+0x1a>
 8005aec:	23ff      	movs	r3, #255	@ 0xff
 8005aee:	e042      	b.n	8005b76 <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8005af0:	79fb      	ldrb	r3, [r7, #7]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff feac 	bl	8005850 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	0e1b      	lsrs	r3, r3, #24
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7ff fea6 	bl	8005850 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	0c1b      	lsrs	r3, r3, #16
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7ff fea0 	bl	8005850 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	0a1b      	lsrs	r3, r3, #8
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7ff fe9a 	bl	8005850 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff fe95 	bl	8005850 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8005b26:	79fb      	ldrb	r3, [r7, #7]
 8005b28:	2b40      	cmp	r3, #64	@ 0x40
 8005b2a:	d102      	bne.n	8005b32 <SD_SendCmd+0x5c>
 8005b2c:	2395      	movs	r3, #149	@ 0x95
 8005b2e:	73fb      	strb	r3, [r7, #15]
 8005b30:	e007      	b.n	8005b42 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8005b32:	79fb      	ldrb	r3, [r7, #7]
 8005b34:	2b48      	cmp	r3, #72	@ 0x48
 8005b36:	d102      	bne.n	8005b3e <SD_SendCmd+0x68>
 8005b38:	2387      	movs	r3, #135	@ 0x87
 8005b3a:	73fb      	strb	r3, [r7, #15]
 8005b3c:	e001      	b.n	8005b42 <SD_SendCmd+0x6c>
  else crc = 1;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff fe83 	bl	8005850 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8005b4a:	79fb      	ldrb	r3, [r7, #7]
 8005b4c:	2b4c      	cmp	r3, #76	@ 0x4c
 8005b4e:	d101      	bne.n	8005b54 <SD_SendCmd+0x7e>
 8005b50:	f7ff feb2 	bl	80058b8 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 8005b54:	230a      	movs	r3, #10
 8005b56:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8005b58:	f7ff feae 	bl	80058b8 <SPI_RxByte>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8005b60:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	da05      	bge.n	8005b74 <SD_SendCmd+0x9e>
 8005b68:	7bbb      	ldrb	r3, [r7, #14]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	73bb      	strb	r3, [r7, #14]
 8005b6e:	7bbb      	ldrb	r3, [r7, #14]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1f1      	bne.n	8005b58 <SD_SendCmd+0x82>

  return res;
 8005b74:	7b7b      	ldrb	r3, [r7, #13]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8005b80:	b590      	push	{r4, r7, lr}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	4603      	mov	r3, r0
 8005b88:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8005b8a:	79fb      	ldrb	r3, [r7, #7]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <SD_disk_initialize+0x14>
 8005b90:	2301      	movs	r3, #1
 8005b92:	e0d1      	b.n	8005d38 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8005b94:	4b6a      	ldr	r3, [pc, #424]	@ (8005d40 <SD_disk_initialize+0x1c0>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <SD_disk_initialize+0x2a>
 8005ba2:	4b67      	ldr	r3, [pc, #412]	@ (8005d40 <SD_disk_initialize+0x1c0>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	e0c6      	b.n	8005d38 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8005baa:	f7ff fec9 	bl	8005940 <SD_PowerOn>

  /* slave select */
  SELECT();
 8005bae:	f7ff fe2f 	bl	8005810 <SELECT>

  /* check disk type */
  type = 0;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	2040      	movs	r0, #64	@ 0x40
 8005bba:	f7ff ff8c 	bl	8005ad6 <SD_SendCmd>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	f040 80a1 	bne.w	8005d08 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8005bc6:	4b5f      	ldr	r3, [pc, #380]	@ (8005d44 <SD_disk_initialize+0x1c4>)
 8005bc8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005bcc:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8005bce:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8005bd2:	2048      	movs	r0, #72	@ 0x48
 8005bd4:	f7ff ff7f 	bl	8005ad6 <SD_SendCmd>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d155      	bne.n	8005c8a <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8005bde:	2300      	movs	r3, #0
 8005be0:	73fb      	strb	r3, [r7, #15]
 8005be2:	e00c      	b.n	8005bfe <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8005be4:	7bfc      	ldrb	r4, [r7, #15]
 8005be6:	f7ff fe67 	bl	80058b8 <SPI_RxByte>
 8005bea:	4603      	mov	r3, r0
 8005bec:	461a      	mov	r2, r3
 8005bee:	f104 0310 	add.w	r3, r4, #16
 8005bf2:	443b      	add	r3, r7
 8005bf4:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	73fb      	strb	r3, [r7, #15]
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
 8005c00:	2b03      	cmp	r3, #3
 8005c02:	d9ef      	bls.n	8005be4 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8005c04:	7abb      	ldrb	r3, [r7, #10]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d17e      	bne.n	8005d08 <SD_disk_initialize+0x188>
 8005c0a:	7afb      	ldrb	r3, [r7, #11]
 8005c0c:	2baa      	cmp	r3, #170	@ 0xaa
 8005c0e:	d17b      	bne.n	8005d08 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8005c10:	2100      	movs	r1, #0
 8005c12:	2077      	movs	r0, #119	@ 0x77
 8005c14:	f7ff ff5f 	bl	8005ad6 <SD_SendCmd>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d807      	bhi.n	8005c2e <SD_disk_initialize+0xae>
 8005c1e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005c22:	2069      	movs	r0, #105	@ 0x69
 8005c24:	f7ff ff57 	bl	8005ad6 <SD_SendCmd>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d004      	beq.n	8005c38 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8005c2e:	4b45      	ldr	r3, [pc, #276]	@ (8005d44 <SD_disk_initialize+0x1c4>)
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1ec      	bne.n	8005c10 <SD_disk_initialize+0x90>
 8005c36:	e000      	b.n	8005c3a <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8005c38:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8005c3a:	4b42      	ldr	r3, [pc, #264]	@ (8005d44 <SD_disk_initialize+0x1c4>)
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d062      	beq.n	8005d08 <SD_disk_initialize+0x188>
 8005c42:	2100      	movs	r1, #0
 8005c44:	207a      	movs	r0, #122	@ 0x7a
 8005c46:	f7ff ff46 	bl	8005ad6 <SD_SendCmd>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d15b      	bne.n	8005d08 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8005c50:	2300      	movs	r3, #0
 8005c52:	73fb      	strb	r3, [r7, #15]
 8005c54:	e00c      	b.n	8005c70 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8005c56:	7bfc      	ldrb	r4, [r7, #15]
 8005c58:	f7ff fe2e 	bl	80058b8 <SPI_RxByte>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f104 0310 	add.w	r3, r4, #16
 8005c64:	443b      	add	r3, r7
 8005c66:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	73fb      	strb	r3, [r7, #15]
 8005c70:	7bfb      	ldrb	r3, [r7, #15]
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	d9ef      	bls.n	8005c56 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8005c76:	7a3b      	ldrb	r3, [r7, #8]
 8005c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <SD_disk_initialize+0x104>
 8005c80:	230c      	movs	r3, #12
 8005c82:	e000      	b.n	8005c86 <SD_disk_initialize+0x106>
 8005c84:	2304      	movs	r3, #4
 8005c86:	73bb      	strb	r3, [r7, #14]
 8005c88:	e03e      	b.n	8005d08 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	2077      	movs	r0, #119	@ 0x77
 8005c8e:	f7ff ff22 	bl	8005ad6 <SD_SendCmd>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d808      	bhi.n	8005caa <SD_disk_initialize+0x12a>
 8005c98:	2100      	movs	r1, #0
 8005c9a:	2069      	movs	r0, #105	@ 0x69
 8005c9c:	f7ff ff1b 	bl	8005ad6 <SD_SendCmd>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d801      	bhi.n	8005caa <SD_disk_initialize+0x12a>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	e000      	b.n	8005cac <SD_disk_initialize+0x12c>
 8005caa:	2301      	movs	r3, #1
 8005cac:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8005cae:	7bbb      	ldrb	r3, [r7, #14]
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d10e      	bne.n	8005cd2 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	2077      	movs	r0, #119	@ 0x77
 8005cb8:	f7ff ff0d 	bl	8005ad6 <SD_SendCmd>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d80e      	bhi.n	8005ce0 <SD_disk_initialize+0x160>
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	2069      	movs	r0, #105	@ 0x69
 8005cc6:	f7ff ff06 	bl	8005ad6 <SD_SendCmd>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d107      	bne.n	8005ce0 <SD_disk_initialize+0x160>
 8005cd0:	e00c      	b.n	8005cec <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	2041      	movs	r0, #65	@ 0x41
 8005cd6:	f7ff fefe 	bl	8005ad6 <SD_SendCmd>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d004      	beq.n	8005cea <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8005ce0:	4b18      	ldr	r3, [pc, #96]	@ (8005d44 <SD_disk_initialize+0x1c4>)
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1e2      	bne.n	8005cae <SD_disk_initialize+0x12e>
 8005ce8:	e000      	b.n	8005cec <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8005cea:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8005cec:	4b15      	ldr	r3, [pc, #84]	@ (8005d44 <SD_disk_initialize+0x1c4>)
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d007      	beq.n	8005d04 <SD_disk_initialize+0x184>
 8005cf4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005cf8:	2050      	movs	r0, #80	@ 0x50
 8005cfa:	f7ff feec 	bl	8005ad6 <SD_SendCmd>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <SD_disk_initialize+0x188>
 8005d04:	2300      	movs	r3, #0
 8005d06:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8005d08:	4a0f      	ldr	r2, [pc, #60]	@ (8005d48 <SD_disk_initialize+0x1c8>)
 8005d0a:	7bbb      	ldrb	r3, [r7, #14]
 8005d0c:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8005d0e:	f7ff fd8f 	bl	8005830 <DESELECT>
  SPI_RxByte();
 8005d12:	f7ff fdd1 	bl	80058b8 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 8005d16:	7bbb      	ldrb	r3, [r7, #14]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d008      	beq.n	8005d2e <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8005d1c:	4b08      	ldr	r3, [pc, #32]	@ (8005d40 <SD_disk_initialize+0x1c0>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	f023 0301 	bic.w	r3, r3, #1
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	4b05      	ldr	r3, [pc, #20]	@ (8005d40 <SD_disk_initialize+0x1c0>)
 8005d2a:	701a      	strb	r2, [r3, #0]
 8005d2c:	e001      	b.n	8005d32 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8005d2e:	f7ff fe49 	bl	80059c4 <SD_PowerOff>
  }

  return Stat;
 8005d32:	4b03      	ldr	r3, [pc, #12]	@ (8005d40 <SD_disk_initialize+0x1c0>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	b2db      	uxtb	r3, r3
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd90      	pop	{r4, r7, pc}
 8005d40:	2000003d 	.word	0x2000003d
 8005d44:	20004a6c 	.word	0x20004a6c
 8005d48:	20004a70 	.word	0x20004a70

08005d4c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	4603      	mov	r3, r0
 8005d54:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8005d56:	79fb      	ldrb	r3, [r7, #7]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <SD_disk_status+0x14>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e002      	b.n	8005d66 <SD_disk_status+0x1a>
  return Stat;
 8005d60:	4b04      	ldr	r3, [pc, #16]	@ (8005d74 <SD_disk_status+0x28>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	b2db      	uxtb	r3, r3
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	2000003d 	.word	0x2000003d

08005d78 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	607a      	str	r2, [r7, #4]
 8005d82:	603b      	str	r3, [r7, #0]
 8005d84:	4603      	mov	r3, r0
 8005d86:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d102      	bne.n	8005d94 <SD_disk_read+0x1c>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <SD_disk_read+0x20>
 8005d94:	2304      	movs	r3, #4
 8005d96:	e051      	b.n	8005e3c <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005d98:	4b2a      	ldr	r3, [pc, #168]	@ (8005e44 <SD_disk_read+0xcc>)
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <SD_disk_read+0x32>
 8005da6:	2303      	movs	r3, #3
 8005da8:	e048      	b.n	8005e3c <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8005daa:	4b27      	ldr	r3, [pc, #156]	@ (8005e48 <SD_disk_read+0xd0>)
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	f003 0304 	and.w	r3, r3, #4
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d102      	bne.n	8005dbc <SD_disk_read+0x44>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	025b      	lsls	r3, r3, #9
 8005dba:	607b      	str	r3, [r7, #4]

  SELECT();
 8005dbc:	f7ff fd28 	bl	8005810 <SELECT>

  if (count == 1)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d111      	bne.n	8005dea <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	2051      	movs	r0, #81	@ 0x51
 8005dca:	f7ff fe84 	bl	8005ad6 <SD_SendCmd>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d129      	bne.n	8005e28 <SD_disk_read+0xb0>
 8005dd4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005dd8:	68b8      	ldr	r0, [r7, #8]
 8005dda:	f7ff fe0b 	bl	80059f4 <SD_RxDataBlock>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d021      	beq.n	8005e28 <SD_disk_read+0xb0>
 8005de4:	2300      	movs	r3, #0
 8005de6:	603b      	str	r3, [r7, #0]
 8005de8:	e01e      	b.n	8005e28 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8005dea:	6879      	ldr	r1, [r7, #4]
 8005dec:	2052      	movs	r0, #82	@ 0x52
 8005dee:	f7ff fe72 	bl	8005ad6 <SD_SendCmd>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d117      	bne.n	8005e28 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8005df8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005dfc:	68b8      	ldr	r0, [r7, #8]
 8005dfe:	f7ff fdf9 	bl	80059f4 <SD_RxDataBlock>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <SD_disk_read+0xa6>
        buff += 512;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005e0e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	603b      	str	r3, [r7, #0]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1ed      	bne.n	8005df8 <SD_disk_read+0x80>
 8005e1c:	e000      	b.n	8005e20 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8005e1e:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8005e20:	2100      	movs	r1, #0
 8005e22:	204c      	movs	r0, #76	@ 0x4c
 8005e24:	f7ff fe57 	bl	8005ad6 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8005e28:	f7ff fd02 	bl	8005830 <DESELECT>
  SPI_RxByte();
 8005e2c:	f7ff fd44 	bl	80058b8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	bf14      	ite	ne
 8005e36:	2301      	movne	r3, #1
 8005e38:	2300      	moveq	r3, #0
 8005e3a:	b2db      	uxtb	r3, r3
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	2000003d 	.word	0x2000003d
 8005e48:	20004a70 	.word	0x20004a70

08005e4c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60b9      	str	r1, [r7, #8]
 8005e54:	607a      	str	r2, [r7, #4]
 8005e56:	603b      	str	r3, [r7, #0]
 8005e58:	4603      	mov	r3, r0
 8005e5a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d102      	bne.n	8005e68 <SD_disk_write+0x1c>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <SD_disk_write+0x20>
 8005e68:	2304      	movs	r3, #4
 8005e6a:	e06b      	b.n	8005f44 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005e6c:	4b37      	ldr	r3, [pc, #220]	@ (8005f4c <SD_disk_write+0x100>)
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <SD_disk_write+0x32>
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e062      	b.n	8005f44 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8005e7e:	4b33      	ldr	r3, [pc, #204]	@ (8005f4c <SD_disk_write+0x100>)
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <SD_disk_write+0x44>
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e059      	b.n	8005f44 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8005e90:	4b2f      	ldr	r3, [pc, #188]	@ (8005f50 <SD_disk_write+0x104>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d102      	bne.n	8005ea2 <SD_disk_write+0x56>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	025b      	lsls	r3, r3, #9
 8005ea0:	607b      	str	r3, [r7, #4]

  SELECT();
 8005ea2:	f7ff fcb5 	bl	8005810 <SELECT>

  if (count == 1)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d110      	bne.n	8005ece <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8005eac:	6879      	ldr	r1, [r7, #4]
 8005eae:	2058      	movs	r0, #88	@ 0x58
 8005eb0:	f7ff fe11 	bl	8005ad6 <SD_SendCmd>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d13a      	bne.n	8005f30 <SD_disk_write+0xe4>
 8005eba:	21fe      	movs	r1, #254	@ 0xfe
 8005ebc:	68b8      	ldr	r0, [r7, #8]
 8005ebe:	f7ff fdc7 	bl	8005a50 <SD_TxDataBlock>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d033      	beq.n	8005f30 <SD_disk_write+0xe4>
      count = 0;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	603b      	str	r3, [r7, #0]
 8005ecc:	e030      	b.n	8005f30 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8005ece:	4b20      	ldr	r3, [pc, #128]	@ (8005f50 <SD_disk_write+0x104>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d007      	beq.n	8005eea <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8005eda:	2100      	movs	r1, #0
 8005edc:	2077      	movs	r0, #119	@ 0x77
 8005ede:	f7ff fdfa 	bl	8005ad6 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8005ee2:	6839      	ldr	r1, [r7, #0]
 8005ee4:	2057      	movs	r0, #87	@ 0x57
 8005ee6:	f7ff fdf6 	bl	8005ad6 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8005eea:	6879      	ldr	r1, [r7, #4]
 8005eec:	2059      	movs	r0, #89	@ 0x59
 8005eee:	f7ff fdf2 	bl	8005ad6 <SD_SendCmd>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d11b      	bne.n	8005f30 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8005ef8:	21fc      	movs	r1, #252	@ 0xfc
 8005efa:	68b8      	ldr	r0, [r7, #8]
 8005efc:	f7ff fda8 	bl	8005a50 <SD_TxDataBlock>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <SD_disk_write+0xd0>
        buff += 512;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005f0c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	3b01      	subs	r3, #1
 8005f12:	603b      	str	r3, [r7, #0]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1ee      	bne.n	8005ef8 <SD_disk_write+0xac>
 8005f1a:	e000      	b.n	8005f1e <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8005f1c:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8005f1e:	21fd      	movs	r1, #253	@ 0xfd
 8005f20:	2000      	movs	r0, #0
 8005f22:	f7ff fd95 	bl	8005a50 <SD_TxDataBlock>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <SD_disk_write+0xe4>
      {
        count = 1;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8005f30:	f7ff fc7e 	bl	8005830 <DESELECT>
  SPI_RxByte();
 8005f34:	f7ff fcc0 	bl	80058b8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	bf14      	ite	ne
 8005f3e:	2301      	movne	r3, #1
 8005f40:	2300      	moveq	r3, #0
 8005f42:	b2db      	uxtb	r3, r3
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	2000003d 	.word	0x2000003d
 8005f50:	20004a70 	.word	0x20004a70

08005f54 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8005f54:	b590      	push	{r4, r7, lr}
 8005f56:	b08b      	sub	sp, #44	@ 0x2c
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	603a      	str	r2, [r7, #0]
 8005f5e:	71fb      	strb	r3, [r7, #7]
 8005f60:	460b      	mov	r3, r1
 8005f62:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <SD_disk_ioctl+0x1e>
 8005f6e:	2304      	movs	r3, #4
 8005f70:	e113      	b.n	800619a <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8005f78:	79bb      	ldrb	r3, [r7, #6]
 8005f7a:	2b05      	cmp	r3, #5
 8005f7c:	d124      	bne.n	8005fc8 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d012      	beq.n	8005fac <SD_disk_ioctl+0x58>
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	dc1a      	bgt.n	8005fc0 <SD_disk_ioctl+0x6c>
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <SD_disk_ioctl+0x40>
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d006      	beq.n	8005fa0 <SD_disk_ioctl+0x4c>
 8005f92:	e015      	b.n	8005fc0 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8005f94:	f7ff fd16 	bl	80059c4 <SD_PowerOff>
      res = RES_OK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8005f9e:	e0fa      	b.n	8006196 <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8005fa0:	f7ff fcce 	bl	8005940 <SD_PowerOn>
      res = RES_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8005faa:	e0f4      	b.n	8006196 <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	1c5c      	adds	r4, r3, #1
 8005fb0:	f7ff fd14 	bl	80059dc <SD_CheckPower>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8005fbe:	e0ea      	b.n	8006196 <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8005fc0:	2304      	movs	r3, #4
 8005fc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005fc6:	e0e6      	b.n	8006196 <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005fc8:	4b76      	ldr	r3, [pc, #472]	@ (80061a4 <SD_disk_ioctl+0x250>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <SD_disk_ioctl+0x86>
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e0df      	b.n	800619a <SD_disk_ioctl+0x246>

    SELECT();
 8005fda:	f7ff fc19 	bl	8005810 <SELECT>

    switch (ctrl)
 8005fde:	79bb      	ldrb	r3, [r7, #6]
 8005fe0:	2b0d      	cmp	r3, #13
 8005fe2:	f200 80c9 	bhi.w	8006178 <SD_disk_ioctl+0x224>
 8005fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fec <SD_disk_ioctl+0x98>)
 8005fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fec:	080060e3 	.word	0x080060e3
 8005ff0:	08006025 	.word	0x08006025
 8005ff4:	080060d3 	.word	0x080060d3
 8005ff8:	08006179 	.word	0x08006179
 8005ffc:	08006179 	.word	0x08006179
 8006000:	08006179 	.word	0x08006179
 8006004:	08006179 	.word	0x08006179
 8006008:	08006179 	.word	0x08006179
 800600c:	08006179 	.word	0x08006179
 8006010:	08006179 	.word	0x08006179
 8006014:	08006179 	.word	0x08006179
 8006018:	080060f5 	.word	0x080060f5
 800601c:	08006119 	.word	0x08006119
 8006020:	0800613d 	.word	0x0800613d
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8006024:	2100      	movs	r1, #0
 8006026:	2049      	movs	r0, #73	@ 0x49
 8006028:	f7ff fd55 	bl	8005ad6 <SD_SendCmd>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	f040 80a6 	bne.w	8006180 <SD_disk_ioctl+0x22c>
 8006034:	f107 030c 	add.w	r3, r7, #12
 8006038:	2110      	movs	r1, #16
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff fcda 	bl	80059f4 <SD_RxDataBlock>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 809c 	beq.w	8006180 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8006048:	7b3b      	ldrb	r3, [r7, #12]
 800604a:	099b      	lsrs	r3, r3, #6
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b01      	cmp	r3, #1
 8006050:	d10d      	bne.n	800606e <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8006052:	7d7b      	ldrb	r3, [r7, #21]
 8006054:	461a      	mov	r2, r3
 8006056:	7d3b      	ldrb	r3, [r7, #20]
 8006058:	021b      	lsls	r3, r3, #8
 800605a:	b29b      	uxth	r3, r3
 800605c:	4413      	add	r3, r2
 800605e:	b29b      	uxth	r3, r3
 8006060:	3301      	adds	r3, #1
 8006062:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8006064:	8bfb      	ldrh	r3, [r7, #30]
 8006066:	029a      	lsls	r2, r3, #10
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	e02d      	b.n	80060ca <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800606e:	7c7b      	ldrb	r3, [r7, #17]
 8006070:	f003 030f 	and.w	r3, r3, #15
 8006074:	b2da      	uxtb	r2, r3
 8006076:	7dbb      	ldrb	r3, [r7, #22]
 8006078:	09db      	lsrs	r3, r3, #7
 800607a:	b2db      	uxtb	r3, r3
 800607c:	4413      	add	r3, r2
 800607e:	b2da      	uxtb	r2, r3
 8006080:	7d7b      	ldrb	r3, [r7, #21]
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	b2db      	uxtb	r3, r3
 8006086:	f003 0306 	and.w	r3, r3, #6
 800608a:	b2db      	uxtb	r3, r3
 800608c:	4413      	add	r3, r2
 800608e:	b2db      	uxtb	r3, r3
 8006090:	3302      	adds	r3, #2
 8006092:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8006096:	7d3b      	ldrb	r3, [r7, #20]
 8006098:	099b      	lsrs	r3, r3, #6
 800609a:	b2db      	uxtb	r3, r3
 800609c:	461a      	mov	r2, r3
 800609e:	7cfb      	ldrb	r3, [r7, #19]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	4413      	add	r3, r2
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	7cbb      	ldrb	r3, [r7, #18]
 80060aa:	029b      	lsls	r3, r3, #10
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	4413      	add	r3, r2
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	3301      	adds	r3, #1
 80060ba:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80060bc:	8bfa      	ldrh	r2, [r7, #30]
 80060be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80060c2:	3b09      	subs	r3, #9
 80060c4:	409a      	lsls	r2, r3
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80060d0:	e056      	b.n	8006180 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060d8:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80060e0:	e055      	b.n	800618e <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80060e2:	f7ff fc13 	bl	800590c <SD_ReadyWait>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2bff      	cmp	r3, #255	@ 0xff
 80060ea:	d14b      	bne.n	8006184 <SD_disk_ioctl+0x230>
 80060ec:	2300      	movs	r3, #0
 80060ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80060f2:	e047      	b.n	8006184 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80060f4:	2100      	movs	r1, #0
 80060f6:	2049      	movs	r0, #73	@ 0x49
 80060f8:	f7ff fced 	bl	8005ad6 <SD_SendCmd>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d142      	bne.n	8006188 <SD_disk_ioctl+0x234>
 8006102:	2110      	movs	r1, #16
 8006104:	6a38      	ldr	r0, [r7, #32]
 8006106:	f7ff fc75 	bl	80059f4 <SD_RxDataBlock>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d03b      	beq.n	8006188 <SD_disk_ioctl+0x234>
 8006110:	2300      	movs	r3, #0
 8006112:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8006116:	e037      	b.n	8006188 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8006118:	2100      	movs	r1, #0
 800611a:	204a      	movs	r0, #74	@ 0x4a
 800611c:	f7ff fcdb 	bl	8005ad6 <SD_SendCmd>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d132      	bne.n	800618c <SD_disk_ioctl+0x238>
 8006126:	2110      	movs	r1, #16
 8006128:	6a38      	ldr	r0, [r7, #32]
 800612a:	f7ff fc63 	bl	80059f4 <SD_RxDataBlock>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d02b      	beq.n	800618c <SD_disk_ioctl+0x238>
 8006134:	2300      	movs	r3, #0
 8006136:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800613a:	e027      	b.n	800618c <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 800613c:	2100      	movs	r1, #0
 800613e:	207a      	movs	r0, #122	@ 0x7a
 8006140:	f7ff fcc9 	bl	8005ad6 <SD_SendCmd>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d116      	bne.n	8006178 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 800614a:	2300      	movs	r3, #0
 800614c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006150:	e00b      	b.n	800616a <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8006152:	6a3c      	ldr	r4, [r7, #32]
 8006154:	1c63      	adds	r3, r4, #1
 8006156:	623b      	str	r3, [r7, #32]
 8006158:	f7ff fbae 	bl	80058b8 <SPI_RxByte>
 800615c:	4603      	mov	r3, r0
 800615e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8006160:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006164:	3301      	adds	r3, #1
 8006166:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800616a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800616e:	2b03      	cmp	r3, #3
 8006170:	d9ef      	bls.n	8006152 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8006178:	2304      	movs	r3, #4
 800617a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800617e:	e006      	b.n	800618e <SD_disk_ioctl+0x23a>
      break;
 8006180:	bf00      	nop
 8006182:	e004      	b.n	800618e <SD_disk_ioctl+0x23a>
      break;
 8006184:	bf00      	nop
 8006186:	e002      	b.n	800618e <SD_disk_ioctl+0x23a>
      break;
 8006188:	bf00      	nop
 800618a:	e000      	b.n	800618e <SD_disk_ioctl+0x23a>
      break;
 800618c:	bf00      	nop
    }

    DESELECT();
 800618e:	f7ff fb4f 	bl	8005830 <DESELECT>
    SPI_RxByte();
 8006192:	f7ff fb91 	bl	80058b8 <SPI_RxByte>
  }

  return res;
 8006196:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800619a:	4618      	mov	r0, r3
 800619c:	372c      	adds	r7, #44	@ 0x2c
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd90      	pop	{r4, r7, pc}
 80061a2:	bf00      	nop
 80061a4:	2000003d 	.word	0x2000003d

080061a8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	4603      	mov	r3, r0
 80061b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80061b2:	79fb      	ldrb	r3, [r7, #7]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7ff fce3 	bl	8005b80 <SD_disk_initialize>
 80061ba:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	4603      	mov	r3, r0
 80061cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80061ce:	79fb      	ldrb	r3, [r7, #7]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7ff fdbb 	bl	8005d4c <SD_disk_status>
 80061d6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60b9      	str	r1, [r7, #8]
 80061e8:	607a      	str	r2, [r7, #4]
 80061ea:	603b      	str	r3, [r7, #0]
 80061ec:	4603      	mov	r3, r0
 80061ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80061f0:	7bf8      	ldrb	r0, [r7, #15]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	68b9      	ldr	r1, [r7, #8]
 80061f8:	f7ff fdbe 	bl	8005d78 <SD_disk_read>
 80061fc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	603b      	str	r3, [r7, #0]
 8006212:	4603      	mov	r3, r0
 8006214:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8006216:	7bf8      	ldrb	r0, [r7, #15]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	68b9      	ldr	r1, [r7, #8]
 800621e:	f7ff fe15 	bl	8005e4c <SD_disk_write>
 8006222:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	4603      	mov	r3, r0
 8006234:	603a      	str	r2, [r7, #0]
 8006236:	71fb      	strb	r3, [r7, #7]
 8006238:	460b      	mov	r3, r1
 800623a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800623c:	79b9      	ldrb	r1, [r7, #6]
 800623e:	79fb      	ldrb	r3, [r7, #7]
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff fe86 	bl	8005f54 <SD_disk_ioctl>
 8006248:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800624a:	4618      	mov	r0, r3
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
	...

08006254 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	4603      	mov	r3, r0
 800625c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800625e:	79fb      	ldrb	r3, [r7, #7]
 8006260:	4a08      	ldr	r2, [pc, #32]	@ (8006284 <disk_status+0x30>)
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	79fa      	ldrb	r2, [r7, #7]
 800626c:	4905      	ldr	r1, [pc, #20]	@ (8006284 <disk_status+0x30>)
 800626e:	440a      	add	r2, r1
 8006270:	7a12      	ldrb	r2, [r2, #8]
 8006272:	4610      	mov	r0, r2
 8006274:	4798      	blx	r3
 8006276:	4603      	mov	r3, r0
 8006278:	73fb      	strb	r3, [r7, #15]
  return stat;
 800627a:	7bfb      	ldrb	r3, [r7, #15]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	20004c9c 	.word	0x20004c9c

08006288 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	4603      	mov	r3, r0
 8006290:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	4a0d      	ldr	r2, [pc, #52]	@ (80062d0 <disk_initialize+0x48>)
 800629a:	5cd3      	ldrb	r3, [r2, r3]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d111      	bne.n	80062c4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80062a0:	79fb      	ldrb	r3, [r7, #7]
 80062a2:	4a0b      	ldr	r2, [pc, #44]	@ (80062d0 <disk_initialize+0x48>)
 80062a4:	2101      	movs	r1, #1
 80062a6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80062a8:	79fb      	ldrb	r3, [r7, #7]
 80062aa:	4a09      	ldr	r2, [pc, #36]	@ (80062d0 <disk_initialize+0x48>)
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	79fa      	ldrb	r2, [r7, #7]
 80062b6:	4906      	ldr	r1, [pc, #24]	@ (80062d0 <disk_initialize+0x48>)
 80062b8:	440a      	add	r2, r1
 80062ba:	7a12      	ldrb	r2, [r2, #8]
 80062bc:	4610      	mov	r0, r2
 80062be:	4798      	blx	r3
 80062c0:	4603      	mov	r3, r0
 80062c2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20004c9c 	.word	0x20004c9c

080062d4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80062d4:	b590      	push	{r4, r7, lr}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	607a      	str	r2, [r7, #4]
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	4603      	mov	r3, r0
 80062e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
 80062e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006310 <disk_read+0x3c>)
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	689c      	ldr	r4, [r3, #8]
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
 80062f2:	4a07      	ldr	r2, [pc, #28]	@ (8006310 <disk_read+0x3c>)
 80062f4:	4413      	add	r3, r2
 80062f6:	7a18      	ldrb	r0, [r3, #8]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	68b9      	ldr	r1, [r7, #8]
 80062fe:	47a0      	blx	r4
 8006300:	4603      	mov	r3, r0
 8006302:	75fb      	strb	r3, [r7, #23]
  return res;
 8006304:	7dfb      	ldrb	r3, [r7, #23]
}
 8006306:	4618      	mov	r0, r3
 8006308:	371c      	adds	r7, #28
 800630a:	46bd      	mov	sp, r7
 800630c:	bd90      	pop	{r4, r7, pc}
 800630e:	bf00      	nop
 8006310:	20004c9c 	.word	0x20004c9c

08006314 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006314:	b590      	push	{r4, r7, lr}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	60b9      	str	r1, [r7, #8]
 800631c:	607a      	str	r2, [r7, #4]
 800631e:	603b      	str	r3, [r7, #0]
 8006320:	4603      	mov	r3, r0
 8006322:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006324:	7bfb      	ldrb	r3, [r7, #15]
 8006326:	4a0a      	ldr	r2, [pc, #40]	@ (8006350 <disk_write+0x3c>)
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	68dc      	ldr	r4, [r3, #12]
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	4a07      	ldr	r2, [pc, #28]	@ (8006350 <disk_write+0x3c>)
 8006334:	4413      	add	r3, r2
 8006336:	7a18      	ldrb	r0, [r3, #8]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	68b9      	ldr	r1, [r7, #8]
 800633e:	47a0      	blx	r4
 8006340:	4603      	mov	r3, r0
 8006342:	75fb      	strb	r3, [r7, #23]
  return res;
 8006344:	7dfb      	ldrb	r3, [r7, #23]
}
 8006346:	4618      	mov	r0, r3
 8006348:	371c      	adds	r7, #28
 800634a:	46bd      	mov	sp, r7
 800634c:	bd90      	pop	{r4, r7, pc}
 800634e:	bf00      	nop
 8006350:	20004c9c 	.word	0x20004c9c

08006354 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	4603      	mov	r3, r0
 800635c:	603a      	str	r2, [r7, #0]
 800635e:	71fb      	strb	r3, [r7, #7]
 8006360:	460b      	mov	r3, r1
 8006362:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006364:	79fb      	ldrb	r3, [r7, #7]
 8006366:	4a09      	ldr	r2, [pc, #36]	@ (800638c <disk_ioctl+0x38>)
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	79fa      	ldrb	r2, [r7, #7]
 8006372:	4906      	ldr	r1, [pc, #24]	@ (800638c <disk_ioctl+0x38>)
 8006374:	440a      	add	r2, r1
 8006376:	7a10      	ldrb	r0, [r2, #8]
 8006378:	79b9      	ldrb	r1, [r7, #6]
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	4798      	blx	r3
 800637e:	4603      	mov	r3, r0
 8006380:	73fb      	strb	r3, [r7, #15]
  return res;
 8006382:	7bfb      	ldrb	r3, [r7, #15]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	20004c9c 	.word	0x20004c9c

08006390 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3301      	adds	r3, #1
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80063a0:	89fb      	ldrh	r3, [r7, #14]
 80063a2:	021b      	lsls	r3, r3, #8
 80063a4:	b21a      	sxth	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	b21b      	sxth	r3, r3
 80063ac:	4313      	orrs	r3, r2
 80063ae:	b21b      	sxth	r3, r3
 80063b0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80063b2:	89fb      	ldrh	r3, [r7, #14]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3303      	adds	r3, #3
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	021b      	lsls	r3, r3, #8
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	3202      	adds	r2, #2
 80063d8:	7812      	ldrb	r2, [r2, #0]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	021b      	lsls	r3, r3, #8
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	3201      	adds	r2, #1
 80063e6:	7812      	ldrb	r2, [r2, #0]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	021b      	lsls	r3, r3, #8
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	7812      	ldrb	r2, [r2, #0]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]
	return rv;
 80063f8:	68fb      	ldr	r3, [r7, #12]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006406:	b480      	push	{r7}
 8006408:	b083      	sub	sp, #12
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	460b      	mov	r3, r1
 8006410:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	887a      	ldrh	r2, [r7, #2]
 800641a:	b2d2      	uxtb	r2, r2
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	887b      	ldrh	r3, [r7, #2]
 8006420:	0a1b      	lsrs	r3, r3, #8
 8006422:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	607a      	str	r2, [r7, #4]
 800642a:	887a      	ldrh	r2, [r7, #2]
 800642c:	b2d2      	uxtb	r2, r2
 800642e:	701a      	strb	r2, [r3, #0]
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	607a      	str	r2, [r7, #4]
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	b2d2      	uxtb	r2, r2
 8006450:	701a      	strb	r2, [r3, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	0a1b      	lsrs	r3, r3, #8
 8006456:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	1c5a      	adds	r2, r3, #1
 800645c:	607a      	str	r2, [r7, #4]
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	b2d2      	uxtb	r2, r2
 8006462:	701a      	strb	r2, [r3, #0]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	0a1b      	lsrs	r3, r3, #8
 8006468:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	1c5a      	adds	r2, r3, #1
 800646e:	607a      	str	r2, [r7, #4]
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	0a1b      	lsrs	r3, r3, #8
 800647a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	607a      	str	r2, [r7, #4]
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	b2d2      	uxtb	r2, r2
 8006486:	701a      	strb	r2, [r3, #0]
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00d      	beq.n	80064ca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	1c53      	adds	r3, r2, #1
 80064b2:	613b      	str	r3, [r7, #16]
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	1c59      	adds	r1, r3, #1
 80064b8:	6179      	str	r1, [r7, #20]
 80064ba:	7812      	ldrb	r2, [r2, #0]
 80064bc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	3b01      	subs	r3, #1
 80064c2:	607b      	str	r3, [r7, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1f1      	bne.n	80064ae <mem_cpy+0x1a>
	}
}
 80064ca:	bf00      	nop
 80064cc:	371c      	adds	r7, #28
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80064d6:	b480      	push	{r7}
 80064d8:	b087      	sub	sp, #28
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	617a      	str	r2, [r7, #20]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	3b01      	subs	r3, #1
 80064f6:	607b      	str	r3, [r7, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1f3      	bne.n	80064e6 <mem_set+0x10>
}
 80064fe:	bf00      	nop
 8006500:	bf00      	nop
 8006502:	371c      	adds	r7, #28
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800650c:	b480      	push	{r7}
 800650e:	b089      	sub	sp, #36	@ 0x24
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	61fb      	str	r3, [r7, #28]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	61fa      	str	r2, [r7, #28]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	4619      	mov	r1, r3
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	1c5a      	adds	r2, r3, #1
 8006532:	61ba      	str	r2, [r7, #24]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	1acb      	subs	r3, r1, r3
 8006538:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	3b01      	subs	r3, #1
 800653e:	607b      	str	r3, [r7, #4]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <mem_cmp+0x40>
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d0eb      	beq.n	8006524 <mem_cmp+0x18>

	return r;
 800654c:	697b      	ldr	r3, [r7, #20]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3724      	adds	r7, #36	@ 0x24
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006564:	e002      	b.n	800656c <chk_chr+0x12>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3301      	adds	r3, #1
 800656a:	607b      	str	r3, [r7, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d005      	beq.n	8006580 <chk_chr+0x26>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	461a      	mov	r2, r3
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	4293      	cmp	r3, r2
 800657e:	d1f2      	bne.n	8006566 <chk_chr+0xc>
	return *str;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	781b      	ldrb	r3, [r3, #0]
}
 8006584:	4618      	mov	r0, r3
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800659a:	2300      	movs	r3, #0
 800659c:	60bb      	str	r3, [r7, #8]
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	60fb      	str	r3, [r7, #12]
 80065a2:	e029      	b.n	80065f8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80065a4:	4a27      	ldr	r2, [pc, #156]	@ (8006644 <chk_lock+0xb4>)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	011b      	lsls	r3, r3, #4
 80065aa:	4413      	add	r3, r2
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d01d      	beq.n	80065ee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80065b2:	4a24      	ldr	r2, [pc, #144]	@ (8006644 <chk_lock+0xb4>)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	011b      	lsls	r3, r3, #4
 80065b8:	4413      	add	r3, r2
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d116      	bne.n	80065f2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80065c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006644 <chk_lock+0xb4>)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	011b      	lsls	r3, r3, #4
 80065ca:	4413      	add	r3, r2
 80065cc:	3304      	adds	r3, #4
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d10c      	bne.n	80065f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80065d8:	4a1a      	ldr	r2, [pc, #104]	@ (8006644 <chk_lock+0xb4>)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	011b      	lsls	r3, r3, #4
 80065de:	4413      	add	r3, r2
 80065e0:	3308      	adds	r3, #8
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d102      	bne.n	80065f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80065ec:	e007      	b.n	80065fe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80065ee:	2301      	movs	r3, #1
 80065f0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3301      	adds	r3, #1
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d9d2      	bls.n	80065a4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2b02      	cmp	r3, #2
 8006602:	d109      	bne.n	8006618 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d102      	bne.n	8006610 <chk_lock+0x80>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b02      	cmp	r3, #2
 800660e:	d101      	bne.n	8006614 <chk_lock+0x84>
 8006610:	2300      	movs	r3, #0
 8006612:	e010      	b.n	8006636 <chk_lock+0xa6>
 8006614:	2312      	movs	r3, #18
 8006616:	e00e      	b.n	8006636 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d108      	bne.n	8006630 <chk_lock+0xa0>
 800661e:	4a09      	ldr	r2, [pc, #36]	@ (8006644 <chk_lock+0xb4>)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	011b      	lsls	r3, r3, #4
 8006624:	4413      	add	r3, r2
 8006626:	330c      	adds	r3, #12
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800662e:	d101      	bne.n	8006634 <chk_lock+0xa4>
 8006630:	2310      	movs	r3, #16
 8006632:	e000      	b.n	8006636 <chk_lock+0xa6>
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	20004a7c 	.word	0x20004a7c

08006648 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800664e:	2300      	movs	r3, #0
 8006650:	607b      	str	r3, [r7, #4]
 8006652:	e002      	b.n	800665a <enq_lock+0x12>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3301      	adds	r3, #1
 8006658:	607b      	str	r3, [r7, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d806      	bhi.n	800666e <enq_lock+0x26>
 8006660:	4a09      	ldr	r2, [pc, #36]	@ (8006688 <enq_lock+0x40>)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	4413      	add	r3, r2
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1f2      	bne.n	8006654 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b02      	cmp	r3, #2
 8006672:	bf14      	ite	ne
 8006674:	2301      	movne	r3, #1
 8006676:	2300      	moveq	r3, #0
 8006678:	b2db      	uxtb	r3, r3
}
 800667a:	4618      	mov	r0, r3
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	20004a7c 	.word	0x20004a7c

0800668c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006696:	2300      	movs	r3, #0
 8006698:	60fb      	str	r3, [r7, #12]
 800669a:	e01f      	b.n	80066dc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800669c:	4a41      	ldr	r2, [pc, #260]	@ (80067a4 <inc_lock+0x118>)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	011b      	lsls	r3, r3, #4
 80066a2:	4413      	add	r3, r2
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d113      	bne.n	80066d6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80066ae:	4a3d      	ldr	r2, [pc, #244]	@ (80067a4 <inc_lock+0x118>)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	4413      	add	r3, r2
 80066b6:	3304      	adds	r3, #4
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80066be:	429a      	cmp	r2, r3
 80066c0:	d109      	bne.n	80066d6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80066c2:	4a38      	ldr	r2, [pc, #224]	@ (80067a4 <inc_lock+0x118>)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	4413      	add	r3, r2
 80066ca:	3308      	adds	r3, #8
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d006      	beq.n	80066e4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	3301      	adds	r3, #1
 80066da:	60fb      	str	r3, [r7, #12]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d9dc      	bls.n	800669c <inc_lock+0x10>
 80066e2:	e000      	b.n	80066e6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80066e4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d132      	bne.n	8006752 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80066ec:	2300      	movs	r3, #0
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	e002      	b.n	80066f8 <inc_lock+0x6c>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	3301      	adds	r3, #1
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d806      	bhi.n	800670c <inc_lock+0x80>
 80066fe:	4a29      	ldr	r2, [pc, #164]	@ (80067a4 <inc_lock+0x118>)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	011b      	lsls	r3, r3, #4
 8006704:	4413      	add	r3, r2
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1f2      	bne.n	80066f2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2b02      	cmp	r3, #2
 8006710:	d101      	bne.n	8006716 <inc_lock+0x8a>
 8006712:	2300      	movs	r3, #0
 8006714:	e040      	b.n	8006798 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	4922      	ldr	r1, [pc, #136]	@ (80067a4 <inc_lock+0x118>)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	011b      	lsls	r3, r3, #4
 8006720:	440b      	add	r3, r1
 8006722:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	689a      	ldr	r2, [r3, #8]
 8006728:	491e      	ldr	r1, [pc, #120]	@ (80067a4 <inc_lock+0x118>)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	011b      	lsls	r3, r3, #4
 800672e:	440b      	add	r3, r1
 8006730:	3304      	adds	r3, #4
 8006732:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	695a      	ldr	r2, [r3, #20]
 8006738:	491a      	ldr	r1, [pc, #104]	@ (80067a4 <inc_lock+0x118>)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	011b      	lsls	r3, r3, #4
 800673e:	440b      	add	r3, r1
 8006740:	3308      	adds	r3, #8
 8006742:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006744:	4a17      	ldr	r2, [pc, #92]	@ (80067a4 <inc_lock+0x118>)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	011b      	lsls	r3, r3, #4
 800674a:	4413      	add	r3, r2
 800674c:	330c      	adds	r3, #12
 800674e:	2200      	movs	r2, #0
 8006750:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d009      	beq.n	800676c <inc_lock+0xe0>
 8006758:	4a12      	ldr	r2, [pc, #72]	@ (80067a4 <inc_lock+0x118>)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	011b      	lsls	r3, r3, #4
 800675e:	4413      	add	r3, r2
 8006760:	330c      	adds	r3, #12
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <inc_lock+0xe0>
 8006768:	2300      	movs	r3, #0
 800676a:	e015      	b.n	8006798 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d108      	bne.n	8006784 <inc_lock+0xf8>
 8006772:	4a0c      	ldr	r2, [pc, #48]	@ (80067a4 <inc_lock+0x118>)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	011b      	lsls	r3, r3, #4
 8006778:	4413      	add	r3, r2
 800677a:	330c      	adds	r3, #12
 800677c:	881b      	ldrh	r3, [r3, #0]
 800677e:	3301      	adds	r3, #1
 8006780:	b29a      	uxth	r2, r3
 8006782:	e001      	b.n	8006788 <inc_lock+0xfc>
 8006784:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006788:	4906      	ldr	r1, [pc, #24]	@ (80067a4 <inc_lock+0x118>)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	011b      	lsls	r3, r3, #4
 800678e:	440b      	add	r3, r1
 8006790:	330c      	adds	r3, #12
 8006792:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	3301      	adds	r3, #1
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	20004a7c 	.word	0x20004a7c

080067a8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	607b      	str	r3, [r7, #4]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d825      	bhi.n	8006808 <dec_lock+0x60>
		n = Files[i].ctr;
 80067bc:	4a17      	ldr	r2, [pc, #92]	@ (800681c <dec_lock+0x74>)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	011b      	lsls	r3, r3, #4
 80067c2:	4413      	add	r3, r2
 80067c4:	330c      	adds	r3, #12
 80067c6:	881b      	ldrh	r3, [r3, #0]
 80067c8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80067ca:	89fb      	ldrh	r3, [r7, #14]
 80067cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067d0:	d101      	bne.n	80067d6 <dec_lock+0x2e>
 80067d2:	2300      	movs	r3, #0
 80067d4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80067d6:	89fb      	ldrh	r3, [r7, #14]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <dec_lock+0x3a>
 80067dc:	89fb      	ldrh	r3, [r7, #14]
 80067de:	3b01      	subs	r3, #1
 80067e0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80067e2:	4a0e      	ldr	r2, [pc, #56]	@ (800681c <dec_lock+0x74>)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	011b      	lsls	r3, r3, #4
 80067e8:	4413      	add	r3, r2
 80067ea:	330c      	adds	r3, #12
 80067ec:	89fa      	ldrh	r2, [r7, #14]
 80067ee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80067f0:	89fb      	ldrh	r3, [r7, #14]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d105      	bne.n	8006802 <dec_lock+0x5a>
 80067f6:	4a09      	ldr	r2, [pc, #36]	@ (800681c <dec_lock+0x74>)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	011b      	lsls	r3, r3, #4
 80067fc:	4413      	add	r3, r2
 80067fe:	2200      	movs	r2, #0
 8006800:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	737b      	strb	r3, [r7, #13]
 8006806:	e001      	b.n	800680c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006808:	2302      	movs	r3, #2
 800680a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800680c:	7b7b      	ldrb	r3, [r7, #13]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	20004a7c 	.word	0x20004a7c

08006820 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006828:	2300      	movs	r3, #0
 800682a:	60fb      	str	r3, [r7, #12]
 800682c:	e010      	b.n	8006850 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800682e:	4a0d      	ldr	r2, [pc, #52]	@ (8006864 <clear_lock+0x44>)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	011b      	lsls	r3, r3, #4
 8006834:	4413      	add	r3, r2
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	429a      	cmp	r2, r3
 800683c:	d105      	bne.n	800684a <clear_lock+0x2a>
 800683e:	4a09      	ldr	r2, [pc, #36]	@ (8006864 <clear_lock+0x44>)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	4413      	add	r3, r2
 8006846:	2200      	movs	r2, #0
 8006848:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3301      	adds	r3, #1
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d9eb      	bls.n	800682e <clear_lock+0xe>
	}
}
 8006856:	bf00      	nop
 8006858:	bf00      	nop
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	20004a7c 	.word	0x20004a7c

08006868 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006870:	2300      	movs	r3, #0
 8006872:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	78db      	ldrb	r3, [r3, #3]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d034      	beq.n	80068e6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006880:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	7858      	ldrb	r0, [r3, #1]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800688c:	2301      	movs	r3, #1
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	f7ff fd40 	bl	8006314 <disk_write>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d002      	beq.n	80068a0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800689a:	2301      	movs	r3, #1
 800689c:	73fb      	strb	r3, [r7, #15]
 800689e:	e022      	b.n	80068e6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	1ad2      	subs	r2, r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d217      	bcs.n	80068e6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	789b      	ldrb	r3, [r3, #2]
 80068ba:	613b      	str	r3, [r7, #16]
 80068bc:	e010      	b.n	80068e0 <sync_window+0x78>
					wsect += fs->fsize;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	4413      	add	r3, r2
 80068c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	7858      	ldrb	r0, [r3, #1]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80068d2:	2301      	movs	r3, #1
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	f7ff fd1d 	bl	8006314 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	3b01      	subs	r3, #1
 80068de:	613b      	str	r3, [r7, #16]
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d8eb      	bhi.n	80068be <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	429a      	cmp	r2, r3
 8006906:	d01b      	beq.n	8006940 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f7ff ffad 	bl	8006868 <sync_window>
 800690e:	4603      	mov	r3, r0
 8006910:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006912:	7bfb      	ldrb	r3, [r7, #15]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d113      	bne.n	8006940 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	7858      	ldrb	r0, [r3, #1]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006922:	2301      	movs	r3, #1
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	f7ff fcd5 	bl	80062d4 <disk_read>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d004      	beq.n	800693a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006930:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006934:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006936:	2301      	movs	r3, #1
 8006938:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8006940:	7bfb      	ldrb	r3, [r7, #15]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
	...

0800694c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7ff ff87 	bl	8006868 <sync_window>
 800695a:	4603      	mov	r3, r0
 800695c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800695e:	7bfb      	ldrb	r3, [r7, #15]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d159      	bne.n	8006a18 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	2b03      	cmp	r3, #3
 800696a:	d149      	bne.n	8006a00 <sync_fs+0xb4>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	791b      	ldrb	r3, [r3, #4]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d145      	bne.n	8006a00 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	899b      	ldrh	r3, [r3, #12]
 800697e:	461a      	mov	r2, r3
 8006980:	2100      	movs	r1, #0
 8006982:	f7ff fda8 	bl	80064d6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	3338      	adds	r3, #56	@ 0x38
 800698a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800698e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006992:	4618      	mov	r0, r3
 8006994:	f7ff fd37 	bl	8006406 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	3338      	adds	r3, #56	@ 0x38
 800699c:	4921      	ldr	r1, [pc, #132]	@ (8006a24 <sync_fs+0xd8>)
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff fd4c 	bl	800643c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	3338      	adds	r3, #56	@ 0x38
 80069a8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80069ac:	491e      	ldr	r1, [pc, #120]	@ (8006a28 <sync_fs+0xdc>)
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7ff fd44 	bl	800643c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	3338      	adds	r3, #56	@ 0x38
 80069b8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	4619      	mov	r1, r3
 80069c2:	4610      	mov	r0, r2
 80069c4:	f7ff fd3a 	bl	800643c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	3338      	adds	r3, #56	@ 0x38
 80069cc:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	4619      	mov	r1, r3
 80069d6:	4610      	mov	r0, r2
 80069d8:	f7ff fd30 	bl	800643c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e0:	1c5a      	adds	r2, r3, #1
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	7858      	ldrb	r0, [r3, #1]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069f4:	2301      	movs	r3, #1
 80069f6:	f7ff fc8d 	bl	8006314 <disk_write>
			fs->fsi_flag = 0;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	785b      	ldrb	r3, [r3, #1]
 8006a04:	2200      	movs	r2, #0
 8006a06:	2100      	movs	r1, #0
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7ff fca3 	bl	8006354 <disk_ioctl>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <sync_fs+0xcc>
 8006a14:	2301      	movs	r3, #1
 8006a16:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	41615252 	.word	0x41615252
 8006a28:	61417272 	.word	0x61417272

08006a2c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	3b02      	subs	r3, #2
 8006a3a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	69db      	ldr	r3, [r3, #28]
 8006a40:	3b02      	subs	r3, #2
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d301      	bcc.n	8006a4c <clust2sect+0x20>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	e008      	b.n	8006a5e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	895b      	ldrh	r3, [r3, #10]
 8006a50:	461a      	mov	r2, r3
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	fb03 f202 	mul.w	r2, r3, r2
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a5c:	4413      	add	r3, r2
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b086      	sub	sp, #24
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d904      	bls.n	8006a8a <get_fat+0x20>
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d302      	bcc.n	8006a90 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	617b      	str	r3, [r7, #20]
 8006a8e:	e0ba      	b.n	8006c06 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006a90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006a94:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	f000 8082 	beq.w	8006ba4 <get_fat+0x13a>
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	f300 80a6 	bgt.w	8006bf2 <get_fat+0x188>
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d002      	beq.n	8006ab0 <get_fat+0x46>
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d055      	beq.n	8006b5a <get_fat+0xf0>
 8006aae:	e0a0      	b.n	8006bf2 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	60fb      	str	r3, [r7, #12]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	085b      	lsrs	r3, r3, #1
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	4413      	add	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	899b      	ldrh	r3, [r3, #12]
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ace:	4413      	add	r3, r2
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	6938      	ldr	r0, [r7, #16]
 8006ad4:	f7ff ff0c 	bl	80068f0 <move_window>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f040 808c 	bne.w	8006bf8 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	60fa      	str	r2, [r7, #12]
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	8992      	ldrh	r2, [r2, #12]
 8006aea:	fbb3 f1f2 	udiv	r1, r3, r2
 8006aee:	fb01 f202 	mul.w	r2, r1, r2
 8006af2:	1a9b      	subs	r3, r3, r2
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	4413      	add	r3, r2
 8006af8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006afc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	899b      	ldrh	r3, [r3, #12]
 8006b06:	4619      	mov	r1, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b0e:	4413      	add	r3, r2
 8006b10:	4619      	mov	r1, r3
 8006b12:	6938      	ldr	r0, [r7, #16]
 8006b14:	f7ff feec 	bl	80068f0 <move_window>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d16e      	bne.n	8006bfc <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	899b      	ldrh	r3, [r3, #12]
 8006b22:	461a      	mov	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b2a:	fb01 f202 	mul.w	r2, r1, r2
 8006b2e:	1a9b      	subs	r3, r3, r2
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	4413      	add	r3, r2
 8006b34:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006b38:	021b      	lsls	r3, r3, #8
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d002      	beq.n	8006b50 <get_fat+0xe6>
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	091b      	lsrs	r3, r3, #4
 8006b4e:	e002      	b.n	8006b56 <get_fat+0xec>
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b56:	617b      	str	r3, [r7, #20]
			break;
 8006b58:	e055      	b.n	8006c06 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	899b      	ldrh	r3, [r3, #12]
 8006b62:	085b      	lsrs	r3, r3, #1
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	4619      	mov	r1, r3
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b6e:	4413      	add	r3, r2
 8006b70:	4619      	mov	r1, r3
 8006b72:	6938      	ldr	r0, [r7, #16]
 8006b74:	f7ff febc 	bl	80068f0 <move_window>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d140      	bne.n	8006c00 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	005b      	lsls	r3, r3, #1
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	8992      	ldrh	r2, [r2, #12]
 8006b8c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b90:	fb00 f202 	mul.w	r2, r0, r2
 8006b94:	1a9b      	subs	r3, r3, r2
 8006b96:	440b      	add	r3, r1
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7ff fbf9 	bl	8006390 <ld_word>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	617b      	str	r3, [r7, #20]
			break;
 8006ba2:	e030      	b.n	8006c06 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	899b      	ldrh	r3, [r3, #12]
 8006bac:	089b      	lsrs	r3, r3, #2
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bb8:	4413      	add	r3, r2
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6938      	ldr	r0, [r7, #16]
 8006bbe:	f7ff fe97 	bl	80068f0 <move_window>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d11d      	bne.n	8006c04 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	8992      	ldrh	r2, [r2, #12]
 8006bd6:	fbb3 f0f2 	udiv	r0, r3, r2
 8006bda:	fb00 f202 	mul.w	r2, r0, r2
 8006bde:	1a9b      	subs	r3, r3, r2
 8006be0:	440b      	add	r3, r1
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff fbec 	bl	80063c0 <ld_dword>
 8006be8:	4603      	mov	r3, r0
 8006bea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006bee:	617b      	str	r3, [r7, #20]
			break;
 8006bf0:	e009      	b.n	8006c06 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	617b      	str	r3, [r7, #20]
 8006bf6:	e006      	b.n	8006c06 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bf8:	bf00      	nop
 8006bfa:	e004      	b.n	8006c06 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bfc:	bf00      	nop
 8006bfe:	e002      	b.n	8006c06 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006c00:	bf00      	nop
 8006c02:	e000      	b.n	8006c06 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c04:	bf00      	nop
		}
	}

	return val;
 8006c06:	697b      	ldr	r3, [r7, #20]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006c10:	b590      	push	{r4, r7, lr}
 8006c12:	b089      	sub	sp, #36	@ 0x24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	f240 8109 	bls.w	8006e3a <put_fat+0x22a>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	69db      	ldr	r3, [r3, #28]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	f080 8103 	bcs.w	8006e3a <put_fat+0x22a>
		switch (fs->fs_type) {
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	2b03      	cmp	r3, #3
 8006c3a:	f000 80b6 	beq.w	8006daa <put_fat+0x19a>
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	f300 80fb 	bgt.w	8006e3a <put_fat+0x22a>
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d003      	beq.n	8006c50 <put_fat+0x40>
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	f000 8083 	beq.w	8006d54 <put_fat+0x144>
 8006c4e:	e0f4      	b.n	8006e3a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	61bb      	str	r3, [r7, #24]
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	085b      	lsrs	r3, r3, #1
 8006c58:	69ba      	ldr	r2, [r7, #24]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	899b      	ldrh	r3, [r3, #12]
 8006c66:	4619      	mov	r1, r3
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c6e:	4413      	add	r3, r2
 8006c70:	4619      	mov	r1, r3
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f7ff fe3c 	bl	80068f0 <move_window>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c7c:	7ffb      	ldrb	r3, [r7, #31]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f040 80d4 	bne.w	8006e2c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	61ba      	str	r2, [r7, #24]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	8992      	ldrh	r2, [r2, #12]
 8006c94:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c98:	fb00 f202 	mul.w	r2, r0, r2
 8006c9c:	1a9b      	subs	r3, r3, r2
 8006c9e:	440b      	add	r3, r1
 8006ca0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	f003 0301 	and.w	r3, r3, #1
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00d      	beq.n	8006cc8 <put_fat+0xb8>
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	b25b      	sxtb	r3, r3
 8006cb2:	f003 030f 	and.w	r3, r3, #15
 8006cb6:	b25a      	sxtb	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	011b      	lsls	r3, r3, #4
 8006cbe:	b25b      	sxtb	r3, r3
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	b25b      	sxtb	r3, r3
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	e001      	b.n	8006ccc <put_fat+0xbc>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	899b      	ldrh	r3, [r3, #12]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ce6:	4413      	add	r3, r2
 8006ce8:	4619      	mov	r1, r3
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f7ff fe00 	bl	80068f0 <move_window>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006cf4:	7ffb      	ldrb	r3, [r7, #31]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f040 809a 	bne.w	8006e30 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	899b      	ldrh	r3, [r3, #12]
 8006d06:	461a      	mov	r2, r3
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d0e:	fb00 f202 	mul.w	r2, r0, r2
 8006d12:	1a9b      	subs	r3, r3, r2
 8006d14:	440b      	add	r3, r1
 8006d16:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <put_fat+0x11a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	091b      	lsrs	r3, r3, #4
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	e00e      	b.n	8006d48 <put_fat+0x138>
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	b25b      	sxtb	r3, r3
 8006d30:	f023 030f 	bic.w	r3, r3, #15
 8006d34:	b25a      	sxtb	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	0a1b      	lsrs	r3, r3, #8
 8006d3a:	b25b      	sxtb	r3, r3
 8006d3c:	f003 030f 	and.w	r3, r3, #15
 8006d40:	b25b      	sxtb	r3, r3
 8006d42:	4313      	orrs	r3, r2
 8006d44:	b25b      	sxtb	r3, r3
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	70da      	strb	r2, [r3, #3]
			break;
 8006d52:	e072      	b.n	8006e3a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	899b      	ldrh	r3, [r3, #12]
 8006d5c:	085b      	lsrs	r3, r3, #1
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	4619      	mov	r1, r3
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d68:	4413      	add	r3, r2
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f7ff fdbf 	bl	80068f0 <move_window>
 8006d72:	4603      	mov	r3, r0
 8006d74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d76:	7ffb      	ldrb	r3, [r7, #31]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d15b      	bne.n	8006e34 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	8992      	ldrh	r2, [r2, #12]
 8006d8a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d8e:	fb00 f202 	mul.w	r2, r0, r2
 8006d92:	1a9b      	subs	r3, r3, r2
 8006d94:	440b      	add	r3, r1
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	b292      	uxth	r2, r2
 8006d9a:	4611      	mov	r1, r2
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7ff fb32 	bl	8006406 <st_word>
			fs->wflag = 1;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2201      	movs	r2, #1
 8006da6:	70da      	strb	r2, [r3, #3]
			break;
 8006da8:	e047      	b.n	8006e3a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	899b      	ldrh	r3, [r3, #12]
 8006db2:	089b      	lsrs	r3, r3, #2
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	4619      	mov	r1, r3
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8006dbe:	4413      	add	r3, r2
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f7ff fd94 	bl	80068f0 <move_window>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006dcc:	7ffb      	ldrb	r3, [r7, #31]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d132      	bne.n	8006e38 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	8992      	ldrh	r2, [r2, #12]
 8006de6:	fbb3 f0f2 	udiv	r0, r3, r2
 8006dea:	fb00 f202 	mul.w	r2, r0, r2
 8006dee:	1a9b      	subs	r3, r3, r2
 8006df0:	440b      	add	r3, r1
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7ff fae4 	bl	80063c0 <ld_dword>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006dfe:	4323      	orrs	r3, r4
 8006e00:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	8992      	ldrh	r2, [r2, #12]
 8006e10:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e14:	fb00 f202 	mul.w	r2, r0, r2
 8006e18:	1a9b      	subs	r3, r3, r2
 8006e1a:	440b      	add	r3, r1
 8006e1c:	6879      	ldr	r1, [r7, #4]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7ff fb0c 	bl	800643c <st_dword>
			fs->wflag = 1;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2201      	movs	r2, #1
 8006e28:	70da      	strb	r2, [r3, #3]
			break;
 8006e2a:	e006      	b.n	8006e3a <put_fat+0x22a>
			if (res != FR_OK) break;
 8006e2c:	bf00      	nop
 8006e2e:	e004      	b.n	8006e3a <put_fat+0x22a>
			if (res != FR_OK) break;
 8006e30:	bf00      	nop
 8006e32:	e002      	b.n	8006e3a <put_fat+0x22a>
			if (res != FR_OK) break;
 8006e34:	bf00      	nop
 8006e36:	e000      	b.n	8006e3a <put_fat+0x22a>
			if (res != FR_OK) break;
 8006e38:	bf00      	nop
		}
	}
	return res;
 8006e3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3724      	adds	r7, #36	@ 0x24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd90      	pop	{r4, r7, pc}

08006e44 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b088      	sub	sp, #32
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d904      	bls.n	8006e6a <remove_chain+0x26>
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d301      	bcc.n	8006e6e <remove_chain+0x2a>
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	e04b      	b.n	8006f06 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00c      	beq.n	8006e8e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006e74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e78:	6879      	ldr	r1, [r7, #4]
 8006e7a:	69b8      	ldr	r0, [r7, #24]
 8006e7c:	f7ff fec8 	bl	8006c10 <put_fat>
 8006e80:	4603      	mov	r3, r0
 8006e82:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006e84:	7ffb      	ldrb	r3, [r7, #31]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d001      	beq.n	8006e8e <remove_chain+0x4a>
 8006e8a:	7ffb      	ldrb	r3, [r7, #31]
 8006e8c:	e03b      	b.n	8006f06 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006e8e:	68b9      	ldr	r1, [r7, #8]
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f7ff fdea 	bl	8006a6a <get_fat>
 8006e96:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d031      	beq.n	8006f02 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d101      	bne.n	8006ea8 <remove_chain+0x64>
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e02e      	b.n	8006f06 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006eae:	d101      	bne.n	8006eb4 <remove_chain+0x70>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e028      	b.n	8006f06 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	68b9      	ldr	r1, [r7, #8]
 8006eb8:	69b8      	ldr	r0, [r7, #24]
 8006eba:	f7ff fea9 	bl	8006c10 <put_fat>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006ec2:	7ffb      	ldrb	r3, [r7, #31]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <remove_chain+0x88>
 8006ec8:	7ffb      	ldrb	r3, [r7, #31]
 8006eca:	e01c      	b.n	8006f06 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	699a      	ldr	r2, [r3, #24]
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	3b02      	subs	r3, #2
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d20b      	bcs.n	8006ef2 <remove_chain+0xae>
			fs->free_clst++;
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	791b      	ldrb	r3, [r3, #4]
 8006ee8:	f043 0301 	orr.w	r3, r3, #1
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	69db      	ldr	r3, [r3, #28]
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d3c6      	bcc.n	8006e8e <remove_chain+0x4a>
 8006f00:	e000      	b.n	8006f04 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006f02:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3720      	adds	r7, #32
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b088      	sub	sp, #32
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10d      	bne.n	8006f40 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d004      	beq.n	8006f3a <create_chain+0x2c>
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d31b      	bcc.n	8006f72 <create_chain+0x64>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	61bb      	str	r3, [r7, #24]
 8006f3e:	e018      	b.n	8006f72 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7ff fd91 	bl	8006a6a <get_fat>
 8006f48:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d801      	bhi.n	8006f54 <create_chain+0x46>
 8006f50:	2301      	movs	r3, #1
 8006f52:	e070      	b.n	8007036 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f5a:	d101      	bne.n	8006f60 <create_chain+0x52>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	e06a      	b.n	8007036 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	69db      	ldr	r3, [r3, #28]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d201      	bcs.n	8006f6e <create_chain+0x60>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	e063      	b.n	8007036 <create_chain+0x128>
		scl = clst;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	69fa      	ldr	r2, [r7, #28]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d307      	bcc.n	8006f96 <create_chain+0x88>
				ncl = 2;
 8006f86:	2302      	movs	r3, #2
 8006f88:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006f8a:	69fa      	ldr	r2, [r7, #28]
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d901      	bls.n	8006f96 <create_chain+0x88>
 8006f92:	2300      	movs	r3, #0
 8006f94:	e04f      	b.n	8007036 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006f96:	69f9      	ldr	r1, [r7, #28]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f7ff fd66 	bl	8006a6a <get_fat>
 8006f9e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00e      	beq.n	8006fc4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d003      	beq.n	8006fb4 <create_chain+0xa6>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fb2:	d101      	bne.n	8006fb8 <create_chain+0xaa>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	e03e      	b.n	8007036 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006fb8:	69fa      	ldr	r2, [r7, #28]
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d1da      	bne.n	8006f76 <create_chain+0x68>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	e038      	b.n	8007036 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006fc4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006fc6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006fca:	69f9      	ldr	r1, [r7, #28]
 8006fcc:	6938      	ldr	r0, [r7, #16]
 8006fce:	f7ff fe1f 	bl	8006c10 <put_fat>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006fd6:	7dfb      	ldrb	r3, [r7, #23]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d109      	bne.n	8006ff0 <create_chain+0xe2>
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d006      	beq.n	8006ff0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006fe2:	69fa      	ldr	r2, [r7, #28]
 8006fe4:	6839      	ldr	r1, [r7, #0]
 8006fe6:	6938      	ldr	r0, [r7, #16]
 8006fe8:	f7ff fe12 	bl	8006c10 <put_fat>
 8006fec:	4603      	mov	r3, r0
 8006fee:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006ff0:	7dfb      	ldrb	r3, [r7, #23]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d116      	bne.n	8007024 <create_chain+0x116>
		fs->last_clst = ncl;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	69fa      	ldr	r2, [r7, #28]
 8006ffa:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	699a      	ldr	r2, [r3, #24]
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	3b02      	subs	r3, #2
 8007006:	429a      	cmp	r2, r3
 8007008:	d804      	bhi.n	8007014 <create_chain+0x106>
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	1e5a      	subs	r2, r3, #1
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	791b      	ldrb	r3, [r3, #4]
 8007018:	f043 0301 	orr.w	r3, r3, #1
 800701c:	b2da      	uxtb	r2, r3
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	711a      	strb	r2, [r3, #4]
 8007022:	e007      	b.n	8007034 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007024:	7dfb      	ldrb	r3, [r7, #23]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d102      	bne.n	8007030 <create_chain+0x122>
 800702a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800702e:	e000      	b.n	8007032 <create_chain+0x124>
 8007030:	2301      	movs	r3, #1
 8007032:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007034:	69fb      	ldr	r3, [r7, #28]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3720      	adds	r7, #32
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800703e:	b480      	push	{r7}
 8007040:	b087      	sub	sp, #28
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007052:	3304      	adds	r3, #4
 8007054:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	899b      	ldrh	r3, [r3, #12]
 800705a:	461a      	mov	r2, r3
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	8952      	ldrh	r2, [r2, #10]
 8007066:	fbb3 f3f2 	udiv	r3, r3, r2
 800706a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	1d1a      	adds	r2, r3, #4
 8007070:	613a      	str	r2, [r7, #16]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <clmt_clust+0x42>
 800707c:	2300      	movs	r3, #0
 800707e:	e010      	b.n	80070a2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	429a      	cmp	r2, r3
 8007086:	d307      	bcc.n	8007098 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	617b      	str	r3, [r7, #20]
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	3304      	adds	r3, #4
 8007094:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007096:	e7e9      	b.n	800706c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007098:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	4413      	add	r3, r2
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	371c      	adds	r7, #28
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b086      	sub	sp, #24
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
 80070b6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070c4:	d204      	bcs.n	80070d0 <dir_sdi+0x22>
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	f003 031f 	and.w	r3, r3, #31
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80070d0:	2302      	movs	r3, #2
 80070d2:	e071      	b.n	80071b8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d106      	bne.n	80070f4 <dir_sdi+0x46>
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d902      	bls.n	80070f4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10c      	bne.n	8007114 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	095b      	lsrs	r3, r3, #5
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	8912      	ldrh	r2, [r2, #8]
 8007102:	4293      	cmp	r3, r2
 8007104:	d301      	bcc.n	800710a <dir_sdi+0x5c>
 8007106:	2302      	movs	r3, #2
 8007108:	e056      	b.n	80071b8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	61da      	str	r2, [r3, #28]
 8007112:	e02d      	b.n	8007170 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	895b      	ldrh	r3, [r3, #10]
 8007118:	461a      	mov	r2, r3
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	899b      	ldrh	r3, [r3, #12]
 800711e:	fb02 f303 	mul.w	r3, r2, r3
 8007122:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007124:	e019      	b.n	800715a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6979      	ldr	r1, [r7, #20]
 800712a:	4618      	mov	r0, r3
 800712c:	f7ff fc9d 	bl	8006a6a <get_fat>
 8007130:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007138:	d101      	bne.n	800713e <dir_sdi+0x90>
 800713a:	2301      	movs	r3, #1
 800713c:	e03c      	b.n	80071b8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d904      	bls.n	800714e <dir_sdi+0xa0>
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	69db      	ldr	r3, [r3, #28]
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	429a      	cmp	r2, r3
 800714c:	d301      	bcc.n	8007152 <dir_sdi+0xa4>
 800714e:	2302      	movs	r3, #2
 8007150:	e032      	b.n	80071b8 <dir_sdi+0x10a>
			ofs -= csz;
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	429a      	cmp	r2, r3
 8007160:	d2e1      	bcs.n	8007126 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007162:	6979      	ldr	r1, [r7, #20]
 8007164:	6938      	ldr	r0, [r7, #16]
 8007166:	f7ff fc61 	bl	8006a2c <clust2sect>
 800716a:	4602      	mov	r2, r0
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	69db      	ldr	r3, [r3, #28]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <dir_sdi+0xd4>
 800717e:	2302      	movs	r3, #2
 8007180:	e01a      	b.n	80071b8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	69da      	ldr	r2, [r3, #28]
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	899b      	ldrh	r3, [r3, #12]
 800718a:	4619      	mov	r1, r3
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007192:	441a      	add	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	899b      	ldrh	r3, [r3, #12]
 80071a2:	461a      	mov	r2, r3
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80071aa:	fb00 f202 	mul.w	r2, r0, r2
 80071ae:	1a9b      	subs	r3, r3, r2
 80071b0:	18ca      	adds	r2, r1, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3718      	adds	r7, #24
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	3320      	adds	r3, #32
 80071d6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d003      	beq.n	80071e8 <dir_next+0x28>
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071e6:	d301      	bcc.n	80071ec <dir_next+0x2c>
 80071e8:	2304      	movs	r3, #4
 80071ea:	e0bb      	b.n	8007364 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	899b      	ldrh	r3, [r3, #12]
 80071f0:	461a      	mov	r2, r3
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80071f8:	fb01 f202 	mul.w	r2, r1, r2
 80071fc:	1a9b      	subs	r3, r3, r2
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f040 809d 	bne.w	800733e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	69db      	ldr	r3, [r3, #28]
 8007208:	1c5a      	adds	r2, r3, #1
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10b      	bne.n	800722e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	095b      	lsrs	r3, r3, #5
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	8912      	ldrh	r2, [r2, #8]
 800721e:	4293      	cmp	r3, r2
 8007220:	f0c0 808d 	bcc.w	800733e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	61da      	str	r2, [r3, #28]
 800722a:	2304      	movs	r3, #4
 800722c:	e09a      	b.n	8007364 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	899b      	ldrh	r3, [r3, #12]
 8007232:	461a      	mov	r2, r3
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	fbb3 f3f2 	udiv	r3, r3, r2
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	8952      	ldrh	r2, [r2, #10]
 800723e:	3a01      	subs	r2, #1
 8007240:	4013      	ands	r3, r2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d17b      	bne.n	800733e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	4619      	mov	r1, r3
 800724e:	4610      	mov	r0, r2
 8007250:	f7ff fc0b 	bl	8006a6a <get_fat>
 8007254:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d801      	bhi.n	8007260 <dir_next+0xa0>
 800725c:	2302      	movs	r3, #2
 800725e:	e081      	b.n	8007364 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007266:	d101      	bne.n	800726c <dir_next+0xac>
 8007268:	2301      	movs	r3, #1
 800726a:	e07b      	b.n	8007364 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	429a      	cmp	r2, r3
 8007274:	d359      	bcc.n	800732a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d104      	bne.n	8007286 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	61da      	str	r2, [r3, #28]
 8007282:	2304      	movs	r3, #4
 8007284:	e06e      	b.n	8007364 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	4619      	mov	r1, r3
 800728e:	4610      	mov	r0, r2
 8007290:	f7ff fe3d 	bl	8006f0e <create_chain>
 8007294:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d101      	bne.n	80072a0 <dir_next+0xe0>
 800729c:	2307      	movs	r3, #7
 800729e:	e061      	b.n	8007364 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d101      	bne.n	80072aa <dir_next+0xea>
 80072a6:	2302      	movs	r3, #2
 80072a8:	e05c      	b.n	8007364 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072b0:	d101      	bne.n	80072b6 <dir_next+0xf6>
 80072b2:	2301      	movs	r3, #1
 80072b4:	e056      	b.n	8007364 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f7ff fad6 	bl	8006868 <sync_window>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <dir_next+0x106>
 80072c2:	2301      	movs	r3, #1
 80072c4:	e04e      	b.n	8007364 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	899b      	ldrh	r3, [r3, #12]
 80072d0:	461a      	mov	r2, r3
 80072d2:	2100      	movs	r1, #0
 80072d4:	f7ff f8ff 	bl	80064d6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80072d8:	2300      	movs	r3, #0
 80072da:	613b      	str	r3, [r7, #16]
 80072dc:	6979      	ldr	r1, [r7, #20]
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f7ff fba4 	bl	8006a2c <clust2sect>
 80072e4:	4602      	mov	r2, r0
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80072ea:	e012      	b.n	8007312 <dir_next+0x152>
						fs->wflag = 1;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2201      	movs	r2, #1
 80072f0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f7ff fab8 	bl	8006868 <sync_window>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <dir_next+0x142>
 80072fe:	2301      	movs	r3, #1
 8007300:	e030      	b.n	8007364 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	3301      	adds	r3, #1
 8007306:	613b      	str	r3, [r7, #16]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800730c:	1c5a      	adds	r2, r3, #1
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	635a      	str	r2, [r3, #52]	@ 0x34
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	895b      	ldrh	r3, [r3, #10]
 8007316:	461a      	mov	r2, r3
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	4293      	cmp	r3, r2
 800731c:	d3e6      	bcc.n	80072ec <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	1ad2      	subs	r2, r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007330:	6979      	ldr	r1, [r7, #20]
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f7ff fb7a 	bl	8006a2c <clust2sect>
 8007338:	4602      	mov	r2, r0
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	899b      	ldrh	r3, [r3, #12]
 800734e:	461a      	mov	r2, r3
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	fbb3 f0f2 	udiv	r0, r3, r2
 8007356:	fb00 f202 	mul.w	r2, r0, r2
 800735a:	1a9b      	subs	r3, r3, r2
 800735c:	18ca      	adds	r2, r1, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3718      	adds	r7, #24
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800737c:	2100      	movs	r1, #0
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7ff fe95 	bl	80070ae <dir_sdi>
 8007384:	4603      	mov	r3, r0
 8007386:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007388:	7dfb      	ldrb	r3, [r7, #23]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d12b      	bne.n	80073e6 <dir_alloc+0x7a>
		n = 0;
 800738e:	2300      	movs	r3, #0
 8007390:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	4619      	mov	r1, r3
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f7ff faa9 	bl	80068f0 <move_window>
 800739e:	4603      	mov	r3, r0
 80073a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d11d      	bne.n	80073e4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	2be5      	cmp	r3, #229	@ 0xe5
 80073b0:	d004      	beq.n	80073bc <dir_alloc+0x50>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d107      	bne.n	80073cc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	3301      	adds	r3, #1
 80073c0:	613b      	str	r3, [r7, #16]
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d102      	bne.n	80073d0 <dir_alloc+0x64>
 80073ca:	e00c      	b.n	80073e6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80073cc:	2300      	movs	r3, #0
 80073ce:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80073d0:	2101      	movs	r1, #1
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7ff fef4 	bl	80071c0 <dir_next>
 80073d8:	4603      	mov	r3, r0
 80073da:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d0d7      	beq.n	8007392 <dir_alloc+0x26>
 80073e2:	e000      	b.n	80073e6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80073e4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80073e6:	7dfb      	ldrb	r3, [r7, #23]
 80073e8:	2b04      	cmp	r3, #4
 80073ea:	d101      	bne.n	80073f0 <dir_alloc+0x84>
 80073ec:	2307      	movs	r3, #7
 80073ee:	75fb      	strb	r3, [r7, #23]
	return res;
 80073f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3718      	adds	r7, #24
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b084      	sub	sp, #16
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	331a      	adds	r3, #26
 8007408:	4618      	mov	r0, r3
 800740a:	f7fe ffc1 	bl	8006390 <ld_word>
 800740e:	4603      	mov	r3, r0
 8007410:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	2b03      	cmp	r3, #3
 8007418:	d109      	bne.n	800742e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	3314      	adds	r3, #20
 800741e:	4618      	mov	r0, r3
 8007420:	f7fe ffb6 	bl	8006390 <ld_word>
 8007424:	4603      	mov	r3, r0
 8007426:	041b      	lsls	r3, r3, #16
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	4313      	orrs	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800742e:	68fb      	ldr	r3, [r7, #12]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	331a      	adds	r3, #26
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	b292      	uxth	r2, r2
 800744c:	4611      	mov	r1, r2
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe ffd9 	bl	8006406 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	2b03      	cmp	r3, #3
 800745a:	d109      	bne.n	8007470 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f103 0214 	add.w	r2, r3, #20
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	0c1b      	lsrs	r3, r3, #16
 8007466:	b29b      	uxth	r3, r3
 8007468:	4619      	mov	r1, r3
 800746a:	4610      	mov	r0, r2
 800746c:	f7fe ffcb 	bl	8006406 <st_word>
	}
}
 8007470:	bf00      	nop
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007478:	b590      	push	{r4, r7, lr}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	331a      	adds	r3, #26
 8007486:	4618      	mov	r0, r3
 8007488:	f7fe ff82 	bl	8006390 <ld_word>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <cmp_lfn+0x1e>
 8007492:	2300      	movs	r3, #0
 8007494:	e059      	b.n	800754a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800749e:	1e5a      	subs	r2, r3, #1
 80074a0:	4613      	mov	r3, r2
 80074a2:	005b      	lsls	r3, r3, #1
 80074a4:	4413      	add	r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80074ac:	2301      	movs	r3, #1
 80074ae:	81fb      	strh	r3, [r7, #14]
 80074b0:	2300      	movs	r3, #0
 80074b2:	613b      	str	r3, [r7, #16]
 80074b4:	e033      	b.n	800751e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80074b6:	4a27      	ldr	r2, [pc, #156]	@ (8007554 <cmp_lfn+0xdc>)
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	4413      	add	r3, r2
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	4413      	add	r3, r2
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7fe ff63 	bl	8006390 <ld_word>
 80074ca:	4603      	mov	r3, r0
 80074cc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80074ce:	89fb      	ldrh	r3, [r7, #14]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d01a      	beq.n	800750a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	2bfe      	cmp	r3, #254	@ 0xfe
 80074d8:	d812      	bhi.n	8007500 <cmp_lfn+0x88>
 80074da:	89bb      	ldrh	r3, [r7, #12]
 80074dc:	4618      	mov	r0, r3
 80074de:	f001 fe27 	bl	8009130 <ff_wtoupper>
 80074e2:	4603      	mov	r3, r0
 80074e4:	461c      	mov	r4, r3
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	1c5a      	adds	r2, r3, #1
 80074ea:	617a      	str	r2, [r7, #20]
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	4413      	add	r3, r2
 80074f2:	881b      	ldrh	r3, [r3, #0]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f001 fe1b 	bl	8009130 <ff_wtoupper>
 80074fa:	4603      	mov	r3, r0
 80074fc:	429c      	cmp	r4, r3
 80074fe:	d001      	beq.n	8007504 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007500:	2300      	movs	r3, #0
 8007502:	e022      	b.n	800754a <cmp_lfn+0xd2>
			}
			wc = uc;
 8007504:	89bb      	ldrh	r3, [r7, #12]
 8007506:	81fb      	strh	r3, [r7, #14]
 8007508:	e006      	b.n	8007518 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800750a:	89bb      	ldrh	r3, [r7, #12]
 800750c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007510:	4293      	cmp	r3, r2
 8007512:	d001      	beq.n	8007518 <cmp_lfn+0xa0>
 8007514:	2300      	movs	r3, #0
 8007516:	e018      	b.n	800754a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	3301      	adds	r3, #1
 800751c:	613b      	str	r3, [r7, #16]
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	2b0c      	cmp	r3, #12
 8007522:	d9c8      	bls.n	80074b6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00b      	beq.n	8007548 <cmp_lfn+0xd0>
 8007530:	89fb      	ldrh	r3, [r7, #14]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d008      	beq.n	8007548 <cmp_lfn+0xd0>
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	005b      	lsls	r3, r3, #1
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	4413      	add	r3, r2
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <cmp_lfn+0xd0>
 8007544:	2300      	movs	r3, #0
 8007546:	e000      	b.n	800754a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007548:	2301      	movs	r3, #1
}
 800754a:	4618      	mov	r0, r3
 800754c:	371c      	adds	r7, #28
 800754e:	46bd      	mov	sp, r7
 8007550:	bd90      	pop	{r4, r7, pc}
 8007552:	bf00      	nop
 8007554:	0800a454 	.word	0x0800a454

08007558 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b088      	sub	sp, #32
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	4611      	mov	r1, r2
 8007564:	461a      	mov	r2, r3
 8007566:	460b      	mov	r3, r1
 8007568:	71fb      	strb	r3, [r7, #7]
 800756a:	4613      	mov	r3, r2
 800756c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	330d      	adds	r3, #13
 8007572:	79ba      	ldrb	r2, [r7, #6]
 8007574:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	330b      	adds	r3, #11
 800757a:	220f      	movs	r2, #15
 800757c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	330c      	adds	r3, #12
 8007582:	2200      	movs	r2, #0
 8007584:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	331a      	adds	r3, #26
 800758a:	2100      	movs	r1, #0
 800758c:	4618      	mov	r0, r3
 800758e:	f7fe ff3a 	bl	8006406 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007592:	79fb      	ldrb	r3, [r7, #7]
 8007594:	1e5a      	subs	r2, r3, #1
 8007596:	4613      	mov	r3, r2
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	4413      	add	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80075a2:	2300      	movs	r3, #0
 80075a4:	82fb      	strh	r3, [r7, #22]
 80075a6:	2300      	movs	r3, #0
 80075a8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80075aa:	8afb      	ldrh	r3, [r7, #22]
 80075ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d007      	beq.n	80075c4 <put_lfn+0x6c>
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	61fa      	str	r2, [r7, #28]
 80075ba:	005b      	lsls	r3, r3, #1
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	4413      	add	r3, r2
 80075c0:	881b      	ldrh	r3, [r3, #0]
 80075c2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80075c4:	4a17      	ldr	r2, [pc, #92]	@ (8007624 <put_lfn+0xcc>)
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	4413      	add	r3, r2
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	461a      	mov	r2, r3
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	4413      	add	r3, r2
 80075d2:	8afa      	ldrh	r2, [r7, #22]
 80075d4:	4611      	mov	r1, r2
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fe ff15 	bl	8006406 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80075dc:	8afb      	ldrh	r3, [r7, #22]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d102      	bne.n	80075e8 <put_lfn+0x90>
 80075e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80075e6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	3301      	adds	r3, #1
 80075ec:	61bb      	str	r3, [r7, #24]
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	2b0c      	cmp	r3, #12
 80075f2:	d9da      	bls.n	80075aa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80075f4:	8afb      	ldrh	r3, [r7, #22]
 80075f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d006      	beq.n	800760c <put_lfn+0xb4>
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	4413      	add	r3, r2
 8007606:	881b      	ldrh	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d103      	bne.n	8007614 <put_lfn+0xbc>
 800760c:	79fb      	ldrb	r3, [r7, #7]
 800760e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007612:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	79fa      	ldrb	r2, [r7, #7]
 8007618:	701a      	strb	r2, [r3, #0]
}
 800761a:	bf00      	nop
 800761c:	3720      	adds	r7, #32
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	0800a454 	.word	0x0800a454

08007628 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08c      	sub	sp, #48	@ 0x30
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
 8007634:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007636:	220b      	movs	r2, #11
 8007638:	68b9      	ldr	r1, [r7, #8]
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f7fe ff2a 	bl	8006494 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	2b05      	cmp	r3, #5
 8007644:	d92b      	bls.n	800769e <gen_numname+0x76>
		sr = seq;
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800764a:	e022      	b.n	8007692 <gen_numname+0x6a>
			wc = *lfn++;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	1c9a      	adds	r2, r3, #2
 8007650:	607a      	str	r2, [r7, #4]
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8007656:	2300      	movs	r3, #0
 8007658:	62bb      	str	r3, [r7, #40]	@ 0x28
 800765a:	e017      	b.n	800768c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	005a      	lsls	r2, r3, #1
 8007660:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	4413      	add	r3, r2
 8007668:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800766a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800766c:	085b      	lsrs	r3, r3, #1
 800766e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d005      	beq.n	8007686 <gen_numname+0x5e>
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8007680:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8007684:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007688:	3301      	adds	r3, #1
 800768a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800768c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800768e:	2b0f      	cmp	r3, #15
 8007690:	d9e4      	bls.n	800765c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	881b      	ldrh	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1d8      	bne.n	800764c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800769e:	2307      	movs	r3, #7
 80076a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	f003 030f 	and.w	r3, r3, #15
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	3330      	adds	r3, #48	@ 0x30
 80076ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80076b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80076b6:	2b39      	cmp	r3, #57	@ 0x39
 80076b8:	d904      	bls.n	80076c4 <gen_numname+0x9c>
 80076ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80076be:	3307      	adds	r3, #7
 80076c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80076c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c6:	1e5a      	subs	r2, r3, #1
 80076c8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80076ca:	3330      	adds	r3, #48	@ 0x30
 80076cc:	443b      	add	r3, r7
 80076ce:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80076d2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	091b      	lsrs	r3, r3, #4
 80076da:	603b      	str	r3, [r7, #0]
	} while (seq);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1df      	bne.n	80076a2 <gen_numname+0x7a>
	ns[i] = '~';
 80076e2:	f107 0214 	add.w	r2, r7, #20
 80076e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e8:	4413      	add	r3, r2
 80076ea:	227e      	movs	r2, #126	@ 0x7e
 80076ec:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80076ee:	2300      	movs	r3, #0
 80076f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80076f2:	e002      	b.n	80076fa <gen_numname+0xd2>
 80076f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f6:	3301      	adds	r3, #1
 80076f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80076fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076fe:	429a      	cmp	r2, r3
 8007700:	d205      	bcs.n	800770e <gen_numname+0xe6>
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007706:	4413      	add	r3, r2
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	2b20      	cmp	r3, #32
 800770c:	d1f2      	bne.n	80076f4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800770e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007710:	2b07      	cmp	r3, #7
 8007712:	d807      	bhi.n	8007724 <gen_numname+0xfc>
 8007714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	62ba      	str	r2, [r7, #40]	@ 0x28
 800771a:	3330      	adds	r3, #48	@ 0x30
 800771c:	443b      	add	r3, r7
 800771e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007722:	e000      	b.n	8007726 <gen_numname+0xfe>
 8007724:	2120      	movs	r1, #32
 8007726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007728:	1c5a      	adds	r2, r3, #1
 800772a:	627a      	str	r2, [r7, #36]	@ 0x24
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	4413      	add	r3, r2
 8007730:	460a      	mov	r2, r1
 8007732:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007736:	2b07      	cmp	r3, #7
 8007738:	d9e9      	bls.n	800770e <gen_numname+0xe6>
}
 800773a:	bf00      	nop
 800773c:	bf00      	nop
 800773e:	3730      	adds	r7, #48	@ 0x30
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800774c:	2300      	movs	r3, #0
 800774e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007750:	230b      	movs	r3, #11
 8007752:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007754:	7bfb      	ldrb	r3, [r7, #15]
 8007756:	b2da      	uxtb	r2, r3
 8007758:	0852      	lsrs	r2, r2, #1
 800775a:	01db      	lsls	r3, r3, #7
 800775c:	4313      	orrs	r3, r2
 800775e:	b2da      	uxtb	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	1c59      	adds	r1, r3, #1
 8007764:	6079      	str	r1, [r7, #4]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	4413      	add	r3, r2
 800776a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	3b01      	subs	r3, #1
 8007770:	60bb      	str	r3, [r7, #8]
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1ed      	bne.n	8007754 <sum_sfn+0x10>
	return sum;
 8007778:	7bfb      	ldrb	r3, [r7, #15]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b086      	sub	sp, #24
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007794:	2100      	movs	r1, #0
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7ff fc89 	bl	80070ae <dir_sdi>
 800779c:	4603      	mov	r3, r0
 800779e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80077a0:	7dfb      	ldrb	r3, [r7, #23]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <dir_find+0x24>
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
 80077a8:	e0a9      	b.n	80078fe <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80077aa:	23ff      	movs	r3, #255	@ 0xff
 80077ac:	753b      	strb	r3, [r7, #20]
 80077ae:	7d3b      	ldrb	r3, [r7, #20]
 80077b0:	757b      	strb	r3, [r7, #21]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077b8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	4619      	mov	r1, r3
 80077c0:	6938      	ldr	r0, [r7, #16]
 80077c2:	f7ff f895 	bl	80068f0 <move_window>
 80077c6:	4603      	mov	r3, r0
 80077c8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80077ca:	7dfb      	ldrb	r3, [r7, #23]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f040 8090 	bne.w	80078f2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80077da:	7dbb      	ldrb	r3, [r7, #22]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d102      	bne.n	80077e6 <dir_find+0x60>
 80077e0:	2304      	movs	r3, #4
 80077e2:	75fb      	strb	r3, [r7, #23]
 80077e4:	e08a      	b.n	80078fc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a1b      	ldr	r3, [r3, #32]
 80077ea:	330b      	adds	r3, #11
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077f2:	73fb      	strb	r3, [r7, #15]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	7bfa      	ldrb	r2, [r7, #15]
 80077f8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80077fa:	7dbb      	ldrb	r3, [r7, #22]
 80077fc:	2be5      	cmp	r3, #229	@ 0xe5
 80077fe:	d007      	beq.n	8007810 <dir_find+0x8a>
 8007800:	7bfb      	ldrb	r3, [r7, #15]
 8007802:	f003 0308 	and.w	r3, r3, #8
 8007806:	2b00      	cmp	r3, #0
 8007808:	d009      	beq.n	800781e <dir_find+0x98>
 800780a:	7bfb      	ldrb	r3, [r7, #15]
 800780c:	2b0f      	cmp	r3, #15
 800780e:	d006      	beq.n	800781e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007810:	23ff      	movs	r3, #255	@ 0xff
 8007812:	757b      	strb	r3, [r7, #21]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800781a:	631a      	str	r2, [r3, #48]	@ 0x30
 800781c:	e05e      	b.n	80078dc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800781e:	7bfb      	ldrb	r3, [r7, #15]
 8007820:	2b0f      	cmp	r3, #15
 8007822:	d136      	bne.n	8007892 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800782a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800782e:	2b00      	cmp	r3, #0
 8007830:	d154      	bne.n	80078dc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007832:	7dbb      	ldrb	r3, [r7, #22]
 8007834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00d      	beq.n	8007858 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	7b5b      	ldrb	r3, [r3, #13]
 8007842:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007844:	7dbb      	ldrb	r3, [r7, #22]
 8007846:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800784a:	75bb      	strb	r3, [r7, #22]
 800784c:	7dbb      	ldrb	r3, [r7, #22]
 800784e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	695a      	ldr	r2, [r3, #20]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007858:	7dba      	ldrb	r2, [r7, #22]
 800785a:	7d7b      	ldrb	r3, [r7, #21]
 800785c:	429a      	cmp	r2, r3
 800785e:	d115      	bne.n	800788c <dir_find+0x106>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a1b      	ldr	r3, [r3, #32]
 8007864:	330d      	adds	r3, #13
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	7d3a      	ldrb	r2, [r7, #20]
 800786a:	429a      	cmp	r2, r3
 800786c:	d10e      	bne.n	800788c <dir_find+0x106>
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	691a      	ldr	r2, [r3, #16]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	4619      	mov	r1, r3
 8007878:	4610      	mov	r0, r2
 800787a:	f7ff fdfd 	bl	8007478 <cmp_lfn>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d003      	beq.n	800788c <dir_find+0x106>
 8007884:	7d7b      	ldrb	r3, [r7, #21]
 8007886:	3b01      	subs	r3, #1
 8007888:	b2db      	uxtb	r3, r3
 800788a:	e000      	b.n	800788e <dir_find+0x108>
 800788c:	23ff      	movs	r3, #255	@ 0xff
 800788e:	757b      	strb	r3, [r7, #21]
 8007890:	e024      	b.n	80078dc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007892:	7d7b      	ldrb	r3, [r7, #21]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d109      	bne.n	80078ac <dir_find+0x126>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a1b      	ldr	r3, [r3, #32]
 800789c:	4618      	mov	r0, r3
 800789e:	f7ff ff51 	bl	8007744 <sum_sfn>
 80078a2:	4603      	mov	r3, r0
 80078a4:	461a      	mov	r2, r3
 80078a6:	7d3b      	ldrb	r3, [r7, #20]
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d024      	beq.n	80078f6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10a      	bne.n	80078d0 <dir_find+0x14a>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a18      	ldr	r0, [r3, #32]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	3324      	adds	r3, #36	@ 0x24
 80078c2:	220b      	movs	r2, #11
 80078c4:	4619      	mov	r1, r3
 80078c6:	f7fe fe21 	bl	800650c <mem_cmp>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d014      	beq.n	80078fa <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80078d0:	23ff      	movs	r3, #255	@ 0xff
 80078d2:	757b      	strb	r3, [r7, #21]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80078da:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80078dc:	2100      	movs	r1, #0
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7ff fc6e 	bl	80071c0 <dir_next>
 80078e4:	4603      	mov	r3, r0
 80078e6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80078e8:	7dfb      	ldrb	r3, [r7, #23]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f43f af65 	beq.w	80077ba <dir_find+0x34>
 80078f0:	e004      	b.n	80078fc <dir_find+0x176>
		if (res != FR_OK) break;
 80078f2:	bf00      	nop
 80078f4:	e002      	b.n	80078fc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80078f6:	bf00      	nop
 80078f8:	e000      	b.n	80078fc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80078fa:	bf00      	nop

	return res;
 80078fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3718      	adds	r7, #24
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
	...

08007908 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08c      	sub	sp, #48	@ 0x30
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800791c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d001      	beq.n	8007928 <dir_register+0x20>
 8007924:	2306      	movs	r3, #6
 8007926:	e0e0      	b.n	8007aea <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007928:	2300      	movs	r3, #0
 800792a:	627b      	str	r3, [r7, #36]	@ 0x24
 800792c:	e002      	b.n	8007934 <dir_register+0x2c>
 800792e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007930:	3301      	adds	r3, #1
 8007932:	627b      	str	r3, [r7, #36]	@ 0x24
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	691a      	ldr	r2, [r3, #16]
 8007938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793a:	005b      	lsls	r3, r3, #1
 800793c:	4413      	add	r3, r2
 800793e:	881b      	ldrh	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1f4      	bne.n	800792e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800794a:	f107 030c 	add.w	r3, r7, #12
 800794e:	220c      	movs	r2, #12
 8007950:	4618      	mov	r0, r3
 8007952:	f7fe fd9f 	bl	8006494 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007956:	7dfb      	ldrb	r3, [r7, #23]
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	2b00      	cmp	r3, #0
 800795e:	d032      	beq.n	80079c6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2240      	movs	r2, #64	@ 0x40
 8007964:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8007968:	2301      	movs	r3, #1
 800796a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800796c:	e016      	b.n	800799c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	691a      	ldr	r2, [r3, #16]
 8007978:	f107 010c 	add.w	r1, r7, #12
 800797c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797e:	f7ff fe53 	bl	8007628 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7ff feff 	bl	8007786 <dir_find>
 8007988:	4603      	mov	r3, r0
 800798a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800798e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007992:	2b00      	cmp	r3, #0
 8007994:	d106      	bne.n	80079a4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007998:	3301      	adds	r3, #1
 800799a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800799c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799e:	2b63      	cmp	r3, #99	@ 0x63
 80079a0:	d9e5      	bls.n	800796e <dir_register+0x66>
 80079a2:	e000      	b.n	80079a6 <dir_register+0x9e>
			if (res != FR_OK) break;
 80079a4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80079a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a8:	2b64      	cmp	r3, #100	@ 0x64
 80079aa:	d101      	bne.n	80079b0 <dir_register+0xa8>
 80079ac:	2307      	movs	r3, #7
 80079ae:	e09c      	b.n	8007aea <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80079b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80079b4:	2b04      	cmp	r3, #4
 80079b6:	d002      	beq.n	80079be <dir_register+0xb6>
 80079b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80079bc:	e095      	b.n	8007aea <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80079be:	7dfa      	ldrb	r2, [r7, #23]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	f003 0302 	and.w	r3, r3, #2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d007      	beq.n	80079e0 <dir_register+0xd8>
 80079d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d2:	330c      	adds	r3, #12
 80079d4:	4a47      	ldr	r2, [pc, #284]	@ (8007af4 <dir_register+0x1ec>)
 80079d6:	fba2 2303 	umull	r2, r3, r2, r3
 80079da:	089b      	lsrs	r3, r3, #2
 80079dc:	3301      	adds	r3, #1
 80079de:	e000      	b.n	80079e2 <dir_register+0xda>
 80079e0:	2301      	movs	r3, #1
 80079e2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80079e4:	6a39      	ldr	r1, [r7, #32]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7ff fcc0 	bl	800736c <dir_alloc>
 80079ec:	4603      	mov	r3, r0
 80079ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80079f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d148      	bne.n	8007a8c <dir_register+0x184>
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	3b01      	subs	r3, #1
 80079fe:	623b      	str	r3, [r7, #32]
 8007a00:	6a3b      	ldr	r3, [r7, #32]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d042      	beq.n	8007a8c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	695a      	ldr	r2, [r3, #20]
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	015b      	lsls	r3, r3, #5
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	4619      	mov	r1, r3
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7ff fb4b 	bl	80070ae <dir_sdi>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007a1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d132      	bne.n	8007a8c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	3324      	adds	r3, #36	@ 0x24
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7ff fe8a 	bl	8007744 <sum_sfn>
 8007a30:	4603      	mov	r3, r0
 8007a32:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	69db      	ldr	r3, [r3, #28]
 8007a38:	4619      	mov	r1, r3
 8007a3a:	69f8      	ldr	r0, [r7, #28]
 8007a3c:	f7fe ff58 	bl	80068f0 <move_window>
 8007a40:	4603      	mov	r3, r0
 8007a42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8007a46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d11d      	bne.n	8007a8a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	6918      	ldr	r0, [r3, #16]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a19      	ldr	r1, [r3, #32]
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	b2da      	uxtb	r2, r3
 8007a5a:	7efb      	ldrb	r3, [r7, #27]
 8007a5c:	f7ff fd7c 	bl	8007558 <put_lfn>
				fs->wflag = 1;
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	2201      	movs	r2, #1
 8007a64:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007a66:	2100      	movs	r1, #0
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7ff fba9 	bl	80071c0 <dir_next>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8007a74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d107      	bne.n	8007a8c <dir_register+0x184>
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	623b      	str	r3, [r7, #32]
 8007a82:	6a3b      	ldr	r3, [r7, #32]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1d5      	bne.n	8007a34 <dir_register+0x12c>
 8007a88:	e000      	b.n	8007a8c <dir_register+0x184>
				if (res != FR_OK) break;
 8007a8a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007a8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d128      	bne.n	8007ae6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	69db      	ldr	r3, [r3, #28]
 8007a98:	4619      	mov	r1, r3
 8007a9a:	69f8      	ldr	r0, [r7, #28]
 8007a9c:	f7fe ff28 	bl	80068f0 <move_window>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d11b      	bne.n	8007ae6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a1b      	ldr	r3, [r3, #32]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fe fd0d 	bl	80064d6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a18      	ldr	r0, [r3, #32]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3324      	adds	r3, #36	@ 0x24
 8007ac4:	220b      	movs	r2, #11
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	f7fe fce4 	bl	8006494 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	330c      	adds	r3, #12
 8007ad8:	f002 0218 	and.w	r2, r2, #24
 8007adc:	b2d2      	uxtb	r2, r2
 8007ade:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3730      	adds	r7, #48	@ 0x30
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	4ec4ec4f 	.word	0x4ec4ec4f

08007af8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08a      	sub	sp, #40	@ 0x28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	613b      	str	r3, [r7, #16]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	60fb      	str	r3, [r7, #12]
 8007b10:	2300      	movs	r3, #0
 8007b12:	617b      	str	r3, [r7, #20]
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	1c5a      	adds	r2, r3, #1
 8007b1c:	61ba      	str	r2, [r7, #24]
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	4413      	add	r3, r2
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007b26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b28:	2b1f      	cmp	r3, #31
 8007b2a:	d940      	bls.n	8007bae <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007b2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b2e:	2b2f      	cmp	r3, #47	@ 0x2f
 8007b30:	d006      	beq.n	8007b40 <create_name+0x48>
 8007b32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b34:	2b5c      	cmp	r3, #92	@ 0x5c
 8007b36:	d110      	bne.n	8007b5a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007b38:	e002      	b.n	8007b40 <create_name+0x48>
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	61bb      	str	r3, [r7, #24]
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	4413      	add	r3, r2
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	2b2f      	cmp	r3, #47	@ 0x2f
 8007b4a:	d0f6      	beq.n	8007b3a <create_name+0x42>
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	4413      	add	r3, r2
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	2b5c      	cmp	r3, #92	@ 0x5c
 8007b56:	d0f0      	beq.n	8007b3a <create_name+0x42>
			break;
 8007b58:	e02a      	b.n	8007bb0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2bfe      	cmp	r3, #254	@ 0xfe
 8007b5e:	d901      	bls.n	8007b64 <create_name+0x6c>
 8007b60:	2306      	movs	r3, #6
 8007b62:	e17d      	b.n	8007e60 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007b64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007b6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b6c:	2101      	movs	r1, #1
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f001 faa2 	bl	80090b8 <ff_convert>
 8007b74:	4603      	mov	r3, r0
 8007b76:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007b78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <create_name+0x8a>
 8007b7e:	2306      	movs	r3, #6
 8007b80:	e16e      	b.n	8007e60 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007b82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b84:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b86:	d809      	bhi.n	8007b9c <create_name+0xa4>
 8007b88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	488d      	ldr	r0, [pc, #564]	@ (8007dc4 <create_name+0x2cc>)
 8007b8e:	f7fe fce4 	bl	800655a <chk_chr>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d001      	beq.n	8007b9c <create_name+0xa4>
 8007b98:	2306      	movs	r3, #6
 8007b9a:	e161      	b.n	8007e60 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	1c5a      	adds	r2, r3, #1
 8007ba0:	617a      	str	r2, [r7, #20]
 8007ba2:	005b      	lsls	r3, r3, #1
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007baa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007bac:	e7b4      	b.n	8007b18 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007bae:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	441a      	add	r2, r3
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007bba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007bbc:	2b1f      	cmp	r3, #31
 8007bbe:	d801      	bhi.n	8007bc4 <create_name+0xcc>
 8007bc0:	2304      	movs	r3, #4
 8007bc2:	e000      	b.n	8007bc6 <create_name+0xce>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007bca:	e011      	b.n	8007bf0 <create_name+0xf8>
		w = lfn[di - 1];
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	005b      	lsls	r3, r3, #1
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	4413      	add	r3, r2
 8007bda:	881b      	ldrh	r3, [r3, #0]
 8007bdc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8007bde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007be0:	2b20      	cmp	r3, #32
 8007be2:	d002      	beq.n	8007bea <create_name+0xf2>
 8007be4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007be6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007be8:	d106      	bne.n	8007bf8 <create_name+0x100>
		di--;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	3b01      	subs	r3, #1
 8007bee:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1ea      	bne.n	8007bcc <create_name+0xd4>
 8007bf6:	e000      	b.n	8007bfa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007bf8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	005b      	lsls	r3, r3, #1
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	4413      	add	r3, r2
 8007c02:	2200      	movs	r2, #0
 8007c04:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <create_name+0x118>
 8007c0c:	2306      	movs	r3, #6
 8007c0e:	e127      	b.n	8007e60 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	3324      	adds	r3, #36	@ 0x24
 8007c14:	220b      	movs	r2, #11
 8007c16:	2120      	movs	r1, #32
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fe fc5c 	bl	80064d6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007c1e:	2300      	movs	r3, #0
 8007c20:	61bb      	str	r3, [r7, #24]
 8007c22:	e002      	b.n	8007c2a <create_name+0x132>
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	3301      	adds	r3, #1
 8007c28:	61bb      	str	r3, [r7, #24]
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	005b      	lsls	r3, r3, #1
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	4413      	add	r3, r2
 8007c32:	881b      	ldrh	r3, [r3, #0]
 8007c34:	2b20      	cmp	r3, #32
 8007c36:	d0f5      	beq.n	8007c24 <create_name+0x12c>
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	005b      	lsls	r3, r3, #1
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	4413      	add	r3, r2
 8007c40:	881b      	ldrh	r3, [r3, #0]
 8007c42:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c44:	d0ee      	beq.n	8007c24 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d009      	beq.n	8007c60 <create_name+0x168>
 8007c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c50:	f043 0303 	orr.w	r3, r3, #3
 8007c54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007c58:	e002      	b.n	8007c60 <create_name+0x168>
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	617b      	str	r3, [r7, #20]
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d009      	beq.n	8007c7a <create_name+0x182>
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	005b      	lsls	r3, r3, #1
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	4413      	add	r3, r2
 8007c74:	881b      	ldrh	r3, [r3, #0]
 8007c76:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c78:	d1ef      	bne.n	8007c5a <create_name+0x162>

	i = b = 0; ni = 8;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007c80:	2300      	movs	r3, #0
 8007c82:	623b      	str	r3, [r7, #32]
 8007c84:	2308      	movs	r3, #8
 8007c86:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	61ba      	str	r2, [r7, #24]
 8007c8e:	005b      	lsls	r3, r3, #1
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	4413      	add	r3, r2
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007c98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f000 8090 	beq.w	8007dc0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007ca0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ca2:	2b20      	cmp	r3, #32
 8007ca4:	d006      	beq.n	8007cb4 <create_name+0x1bc>
 8007ca6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ca8:	2b2e      	cmp	r3, #46	@ 0x2e
 8007caa:	d10a      	bne.n	8007cc2 <create_name+0x1ca>
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d006      	beq.n	8007cc2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cb8:	f043 0303 	orr.w	r3, r3, #3
 8007cbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007cc0:	e07d      	b.n	8007dbe <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007cc2:	6a3a      	ldr	r2, [r7, #32]
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d203      	bcs.n	8007cd2 <create_name+0x1da>
 8007cca:	69ba      	ldr	r2, [r7, #24]
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d123      	bne.n	8007d1a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	2b0b      	cmp	r3, #11
 8007cd6:	d106      	bne.n	8007ce6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cdc:	f043 0303 	orr.w	r3, r3, #3
 8007ce0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007ce4:	e075      	b.n	8007dd2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007ce6:	69ba      	ldr	r2, [r7, #24]
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d005      	beq.n	8007cfa <create_name+0x202>
 8007cee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cf2:	f043 0303 	orr.w	r3, r3, #3
 8007cf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d866      	bhi.n	8007dd0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	61bb      	str	r3, [r7, #24]
 8007d06:	2308      	movs	r3, #8
 8007d08:	623b      	str	r3, [r7, #32]
 8007d0a:	230b      	movs	r3, #11
 8007d0c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007d0e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007d18:	e051      	b.n	8007dbe <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007d1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8007d1e:	d914      	bls.n	8007d4a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007d20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d22:	2100      	movs	r1, #0
 8007d24:	4618      	mov	r0, r3
 8007d26:	f001 f9c7 	bl	80090b8 <ff_convert>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007d2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d004      	beq.n	8007d3e <create_name+0x246>
 8007d34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d36:	3b80      	subs	r3, #128	@ 0x80
 8007d38:	4a23      	ldr	r2, [pc, #140]	@ (8007dc8 <create_name+0x2d0>)
 8007d3a:	5cd3      	ldrb	r3, [r2, r3]
 8007d3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d42:	f043 0302 	orr.w	r3, r3, #2
 8007d46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007d4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d007      	beq.n	8007d60 <create_name+0x268>
 8007d50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d52:	4619      	mov	r1, r3
 8007d54:	481d      	ldr	r0, [pc, #116]	@ (8007dcc <create_name+0x2d4>)
 8007d56:	f7fe fc00 	bl	800655a <chk_chr>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d008      	beq.n	8007d72 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007d60:	235f      	movs	r3, #95	@ 0x5f
 8007d62:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007d64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d68:	f043 0303 	orr.w	r3, r3, #3
 8007d6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007d70:	e01b      	b.n	8007daa <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007d72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d74:	2b40      	cmp	r3, #64	@ 0x40
 8007d76:	d909      	bls.n	8007d8c <create_name+0x294>
 8007d78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d7a:	2b5a      	cmp	r3, #90	@ 0x5a
 8007d7c:	d806      	bhi.n	8007d8c <create_name+0x294>
					b |= 2;
 8007d7e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d82:	f043 0302 	orr.w	r3, r3, #2
 8007d86:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007d8a:	e00e      	b.n	8007daa <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007d8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d8e:	2b60      	cmp	r3, #96	@ 0x60
 8007d90:	d90b      	bls.n	8007daa <create_name+0x2b2>
 8007d92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d94:	2b7a      	cmp	r3, #122	@ 0x7a
 8007d96:	d808      	bhi.n	8007daa <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007d98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d9c:	f043 0301 	orr.w	r3, r3, #1
 8007da0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007da4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007da6:	3b20      	subs	r3, #32
 8007da8:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007daa:	6a3b      	ldr	r3, [r7, #32]
 8007dac:	1c5a      	adds	r2, r3, #1
 8007dae:	623a      	str	r2, [r7, #32]
 8007db0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007db2:	b2d1      	uxtb	r1, r2
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	4413      	add	r3, r2
 8007db8:	460a      	mov	r2, r1
 8007dba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007dbe:	e763      	b.n	8007c88 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007dc0:	bf00      	nop
 8007dc2:	e006      	b.n	8007dd2 <create_name+0x2da>
 8007dc4:	0800a344 	.word	0x0800a344
 8007dc8:	0800a3d4 	.word	0x0800a3d4
 8007dcc:	0800a350 	.word	0x0800a350
			if (si > di) break;			/* No extension */
 8007dd0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007dd8:	2be5      	cmp	r3, #229	@ 0xe5
 8007dda:	d103      	bne.n	8007de4 <create_name+0x2ec>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2205      	movs	r2, #5
 8007de0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	2b08      	cmp	r3, #8
 8007de8:	d104      	bne.n	8007df4 <create_name+0x2fc>
 8007dea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007df4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007df8:	f003 030c 	and.w	r3, r3, #12
 8007dfc:	2b0c      	cmp	r3, #12
 8007dfe:	d005      	beq.n	8007e0c <create_name+0x314>
 8007e00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007e04:	f003 0303 	and.w	r3, r3, #3
 8007e08:	2b03      	cmp	r3, #3
 8007e0a:	d105      	bne.n	8007e18 <create_name+0x320>
 8007e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e10:	f043 0302 	orr.w	r3, r3, #2
 8007e14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007e18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e1c:	f003 0302 	and.w	r3, r3, #2
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d117      	bne.n	8007e54 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007e24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007e28:	f003 0303 	and.w	r3, r3, #3
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d105      	bne.n	8007e3c <create_name+0x344>
 8007e30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e34:	f043 0310 	orr.w	r3, r3, #16
 8007e38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007e3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007e40:	f003 030c 	and.w	r3, r3, #12
 8007e44:	2b04      	cmp	r3, #4
 8007e46:	d105      	bne.n	8007e54 <create_name+0x35c>
 8007e48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e4c:	f043 0308 	orr.w	r3, r3, #8
 8007e50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007e5a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8007e5e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3728      	adds	r7, #40	@ 0x28
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007e7c:	e002      	b.n	8007e84 <follow_path+0x1c>
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	3301      	adds	r3, #1
 8007e82:	603b      	str	r3, [r7, #0]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	2b2f      	cmp	r3, #47	@ 0x2f
 8007e8a:	d0f8      	beq.n	8007e7e <follow_path+0x16>
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	2b5c      	cmp	r3, #92	@ 0x5c
 8007e92:	d0f4      	beq.n	8007e7e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	2200      	movs	r2, #0
 8007e98:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	2b1f      	cmp	r3, #31
 8007ea0:	d80a      	bhi.n	8007eb8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2280      	movs	r2, #128	@ 0x80
 8007ea6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007eaa:	2100      	movs	r1, #0
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7ff f8fe 	bl	80070ae <dir_sdi>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	75fb      	strb	r3, [r7, #23]
 8007eb6:	e048      	b.n	8007f4a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007eb8:	463b      	mov	r3, r7
 8007eba:	4619      	mov	r1, r3
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7ff fe1b 	bl	8007af8 <create_name>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d139      	bne.n	8007f40 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7ff fc5a 	bl	8007786 <dir_find>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007edc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007ede:	7dfb      	ldrb	r3, [r7, #23]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00a      	beq.n	8007efa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007ee4:	7dfb      	ldrb	r3, [r7, #23]
 8007ee6:	2b04      	cmp	r3, #4
 8007ee8:	d12c      	bne.n	8007f44 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007eea:	7afb      	ldrb	r3, [r7, #11]
 8007eec:	f003 0304 	and.w	r3, r3, #4
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d127      	bne.n	8007f44 <follow_path+0xdc>
 8007ef4:	2305      	movs	r3, #5
 8007ef6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007ef8:	e024      	b.n	8007f44 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007efa:	7afb      	ldrb	r3, [r7, #11]
 8007efc:	f003 0304 	and.w	r3, r3, #4
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d121      	bne.n	8007f48 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	799b      	ldrb	r3, [r3, #6]
 8007f08:	f003 0310 	and.w	r3, r3, #16
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d102      	bne.n	8007f16 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007f10:	2305      	movs	r3, #5
 8007f12:	75fb      	strb	r3, [r7, #23]
 8007f14:	e019      	b.n	8007f4a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	8992      	ldrh	r2, [r2, #12]
 8007f24:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f28:	fb00 f202 	mul.w	r2, r0, r2
 8007f2c:	1a9b      	subs	r3, r3, r2
 8007f2e:	440b      	add	r3, r1
 8007f30:	4619      	mov	r1, r3
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f7ff fa61 	bl	80073fa <ld_clust>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007f3e:	e7bb      	b.n	8007eb8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007f40:	bf00      	nop
 8007f42:	e002      	b.n	8007f4a <follow_path+0xe2>
				break;
 8007f44:	bf00      	nop
 8007f46:	e000      	b.n	8007f4a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007f48:	bf00      	nop
			}
		}
	}

	return res;
 8007f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3718      	adds	r7, #24
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b087      	sub	sp, #28
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007f5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f60:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d031      	beq.n	8007fce <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	617b      	str	r3, [r7, #20]
 8007f70:	e002      	b.n	8007f78 <get_ldnumber+0x24>
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	3301      	adds	r3, #1
 8007f76:	617b      	str	r3, [r7, #20]
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	2b1f      	cmp	r3, #31
 8007f7e:	d903      	bls.n	8007f88 <get_ldnumber+0x34>
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	2b3a      	cmp	r3, #58	@ 0x3a
 8007f86:	d1f4      	bne.n	8007f72 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	2b3a      	cmp	r3, #58	@ 0x3a
 8007f8e:	d11c      	bne.n	8007fca <get_ldnumber+0x76>
			tp = *path;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	1c5a      	adds	r2, r3, #1
 8007f9a:	60fa      	str	r2, [r7, #12]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	3b30      	subs	r3, #48	@ 0x30
 8007fa0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	2b09      	cmp	r3, #9
 8007fa6:	d80e      	bhi.n	8007fc6 <get_ldnumber+0x72>
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d10a      	bne.n	8007fc6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d107      	bne.n	8007fc6 <get_ldnumber+0x72>
					vol = (int)i;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	617b      	str	r3, [r7, #20]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	e002      	b.n	8007fd0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007fca:	2300      	movs	r3, #0
 8007fcc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007fce:	693b      	ldr	r3, [r7, #16]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	371c      	adds	r7, #28
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	70da      	strb	r2, [r3, #3]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ff2:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7fe fc7a 	bl	80068f0 <move_window>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d001      	beq.n	8008006 <check_fs+0x2a>
 8008002:	2304      	movs	r3, #4
 8008004:	e038      	b.n	8008078 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	3338      	adds	r3, #56	@ 0x38
 800800a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800800e:	4618      	mov	r0, r3
 8008010:	f7fe f9be 	bl	8006390 <ld_word>
 8008014:	4603      	mov	r3, r0
 8008016:	461a      	mov	r2, r3
 8008018:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800801c:	429a      	cmp	r2, r3
 800801e:	d001      	beq.n	8008024 <check_fs+0x48>
 8008020:	2303      	movs	r3, #3
 8008022:	e029      	b.n	8008078 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800802a:	2be9      	cmp	r3, #233	@ 0xe9
 800802c:	d009      	beq.n	8008042 <check_fs+0x66>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008034:	2beb      	cmp	r3, #235	@ 0xeb
 8008036:	d11e      	bne.n	8008076 <check_fs+0x9a>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800803e:	2b90      	cmp	r3, #144	@ 0x90
 8008040:	d119      	bne.n	8008076 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	3338      	adds	r3, #56	@ 0x38
 8008046:	3336      	adds	r3, #54	@ 0x36
 8008048:	4618      	mov	r0, r3
 800804a:	f7fe f9b9 	bl	80063c0 <ld_dword>
 800804e:	4603      	mov	r3, r0
 8008050:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008054:	4a0a      	ldr	r2, [pc, #40]	@ (8008080 <check_fs+0xa4>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d101      	bne.n	800805e <check_fs+0x82>
 800805a:	2300      	movs	r3, #0
 800805c:	e00c      	b.n	8008078 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	3338      	adds	r3, #56	@ 0x38
 8008062:	3352      	adds	r3, #82	@ 0x52
 8008064:	4618      	mov	r0, r3
 8008066:	f7fe f9ab 	bl	80063c0 <ld_dword>
 800806a:	4603      	mov	r3, r0
 800806c:	4a05      	ldr	r2, [pc, #20]	@ (8008084 <check_fs+0xa8>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d101      	bne.n	8008076 <check_fs+0x9a>
 8008072:	2300      	movs	r3, #0
 8008074:	e000      	b.n	8008078 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008076:	2302      	movs	r3, #2
}
 8008078:	4618      	mov	r0, r3
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	00544146 	.word	0x00544146
 8008084:	33544146 	.word	0x33544146

08008088 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b096      	sub	sp, #88	@ 0x58
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	4613      	mov	r3, r2
 8008094:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2200      	movs	r2, #0
 800809a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f7ff ff59 	bl	8007f54 <get_ldnumber>
 80080a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80080a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	da01      	bge.n	80080ae <find_volume+0x26>
 80080aa:	230b      	movs	r3, #11
 80080ac:	e265      	b.n	800857a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80080ae:	4a9f      	ldr	r2, [pc, #636]	@ (800832c <find_volume+0x2a4>)
 80080b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080b6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80080b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d101      	bne.n	80080c2 <find_volume+0x3a>
 80080be:	230c      	movs	r3, #12
 80080c0:	e25b      	b.n	800857a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80080c8:	79fb      	ldrb	r3, [r7, #7]
 80080ca:	f023 0301 	bic.w	r3, r3, #1
 80080ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80080d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d01a      	beq.n	800810e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80080d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080da:	785b      	ldrb	r3, [r3, #1]
 80080dc:	4618      	mov	r0, r3
 80080de:	f7fe f8b9 	bl	8006254 <disk_status>
 80080e2:	4603      	mov	r3, r0
 80080e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80080e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10c      	bne.n	800810e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80080f4:	79fb      	ldrb	r3, [r7, #7]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d007      	beq.n	800810a <find_volume+0x82>
 80080fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80080fe:	f003 0304 	and.w	r3, r3, #4
 8008102:	2b00      	cmp	r3, #0
 8008104:	d001      	beq.n	800810a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008106:	230a      	movs	r3, #10
 8008108:	e237      	b.n	800857a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800810a:	2300      	movs	r3, #0
 800810c:	e235      	b.n	800857a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800810e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008110:	2200      	movs	r2, #0
 8008112:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008116:	b2da      	uxtb	r2, r3
 8008118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800811c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811e:	785b      	ldrb	r3, [r3, #1]
 8008120:	4618      	mov	r0, r3
 8008122:	f7fe f8b1 	bl	8006288 <disk_initialize>
 8008126:	4603      	mov	r3, r0
 8008128:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800812c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008130:	f003 0301 	and.w	r3, r3, #1
 8008134:	2b00      	cmp	r3, #0
 8008136:	d001      	beq.n	800813c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008138:	2303      	movs	r3, #3
 800813a:	e21e      	b.n	800857a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800813c:	79fb      	ldrb	r3, [r7, #7]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d007      	beq.n	8008152 <find_volume+0xca>
 8008142:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008146:	f003 0304 	and.w	r3, r3, #4
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800814e:	230a      	movs	r3, #10
 8008150:	e213      	b.n	800857a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008154:	7858      	ldrb	r0, [r3, #1]
 8008156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008158:	330c      	adds	r3, #12
 800815a:	461a      	mov	r2, r3
 800815c:	2102      	movs	r1, #2
 800815e:	f7fe f8f9 	bl	8006354 <disk_ioctl>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d001      	beq.n	800816c <find_volume+0xe4>
 8008168:	2301      	movs	r3, #1
 800816a:	e206      	b.n	800857a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800816c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800816e:	899b      	ldrh	r3, [r3, #12]
 8008170:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008174:	d80d      	bhi.n	8008192 <find_volume+0x10a>
 8008176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008178:	899b      	ldrh	r3, [r3, #12]
 800817a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800817e:	d308      	bcc.n	8008192 <find_volume+0x10a>
 8008180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008182:	899b      	ldrh	r3, [r3, #12]
 8008184:	461a      	mov	r2, r3
 8008186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008188:	899b      	ldrh	r3, [r3, #12]
 800818a:	3b01      	subs	r3, #1
 800818c:	4013      	ands	r3, r2
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <find_volume+0x10e>
 8008192:	2301      	movs	r3, #1
 8008194:	e1f1      	b.n	800857a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008196:	2300      	movs	r3, #0
 8008198:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800819a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800819c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800819e:	f7ff ff1d 	bl	8007fdc <check_fs>
 80081a2:	4603      	mov	r3, r0
 80081a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80081a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d149      	bne.n	8008244 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80081b0:	2300      	movs	r3, #0
 80081b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80081b4:	e01e      	b.n	80081f4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80081b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80081bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081be:	011b      	lsls	r3, r3, #4
 80081c0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80081c4:	4413      	add	r3, r2
 80081c6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80081c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ca:	3304      	adds	r3, #4
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d006      	beq.n	80081e0 <find_volume+0x158>
 80081d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d4:	3308      	adds	r3, #8
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fe f8f2 	bl	80063c0 <ld_dword>
 80081dc:	4602      	mov	r2, r0
 80081de:	e000      	b.n	80081e2 <find_volume+0x15a>
 80081e0:	2200      	movs	r2, #0
 80081e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	3358      	adds	r3, #88	@ 0x58
 80081e8:	443b      	add	r3, r7
 80081ea:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80081ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081f0:	3301      	adds	r3, #1
 80081f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80081f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081f6:	2b03      	cmp	r3, #3
 80081f8:	d9dd      	bls.n	80081b6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80081fa:	2300      	movs	r3, #0
 80081fc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80081fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008200:	2b00      	cmp	r3, #0
 8008202:	d002      	beq.n	800820a <find_volume+0x182>
 8008204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008206:	3b01      	subs	r3, #1
 8008208:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800820a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	3358      	adds	r3, #88	@ 0x58
 8008210:	443b      	add	r3, r7
 8008212:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008216:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008218:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800821a:	2b00      	cmp	r3, #0
 800821c:	d005      	beq.n	800822a <find_volume+0x1a2>
 800821e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008220:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008222:	f7ff fedb 	bl	8007fdc <check_fs>
 8008226:	4603      	mov	r3, r0
 8008228:	e000      	b.n	800822c <find_volume+0x1a4>
 800822a:	2303      	movs	r3, #3
 800822c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008230:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008234:	2b01      	cmp	r3, #1
 8008236:	d905      	bls.n	8008244 <find_volume+0x1bc>
 8008238:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800823a:	3301      	adds	r3, #1
 800823c:	643b      	str	r3, [r7, #64]	@ 0x40
 800823e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008240:	2b03      	cmp	r3, #3
 8008242:	d9e2      	bls.n	800820a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008244:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008248:	2b04      	cmp	r3, #4
 800824a:	d101      	bne.n	8008250 <find_volume+0x1c8>
 800824c:	2301      	movs	r3, #1
 800824e:	e194      	b.n	800857a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008250:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008254:	2b01      	cmp	r3, #1
 8008256:	d901      	bls.n	800825c <find_volume+0x1d4>
 8008258:	230d      	movs	r3, #13
 800825a:	e18e      	b.n	800857a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800825c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800825e:	3338      	adds	r3, #56	@ 0x38
 8008260:	330b      	adds	r3, #11
 8008262:	4618      	mov	r0, r3
 8008264:	f7fe f894 	bl	8006390 <ld_word>
 8008268:	4603      	mov	r3, r0
 800826a:	461a      	mov	r2, r3
 800826c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800826e:	899b      	ldrh	r3, [r3, #12]
 8008270:	429a      	cmp	r2, r3
 8008272:	d001      	beq.n	8008278 <find_volume+0x1f0>
 8008274:	230d      	movs	r3, #13
 8008276:	e180      	b.n	800857a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800827a:	3338      	adds	r3, #56	@ 0x38
 800827c:	3316      	adds	r3, #22
 800827e:	4618      	mov	r0, r3
 8008280:	f7fe f886 	bl	8006390 <ld_word>
 8008284:	4603      	mov	r3, r0
 8008286:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800828a:	2b00      	cmp	r3, #0
 800828c:	d106      	bne.n	800829c <find_volume+0x214>
 800828e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008290:	3338      	adds	r3, #56	@ 0x38
 8008292:	3324      	adds	r3, #36	@ 0x24
 8008294:	4618      	mov	r0, r3
 8008296:	f7fe f893 	bl	80063c0 <ld_dword>
 800829a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800829c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800829e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80082a0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80082a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a4:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80082a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082aa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80082ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ae:	789b      	ldrb	r3, [r3, #2]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d005      	beq.n	80082c0 <find_volume+0x238>
 80082b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b6:	789b      	ldrb	r3, [r3, #2]
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d001      	beq.n	80082c0 <find_volume+0x238>
 80082bc:	230d      	movs	r3, #13
 80082be:	e15c      	b.n	800857a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80082c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c2:	789b      	ldrb	r3, [r3, #2]
 80082c4:	461a      	mov	r2, r3
 80082c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082c8:	fb02 f303 	mul.w	r3, r2, r3
 80082cc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80082ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082d4:	461a      	mov	r2, r3
 80082d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80082da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082dc:	895b      	ldrh	r3, [r3, #10]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d008      	beq.n	80082f4 <find_volume+0x26c>
 80082e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e4:	895b      	ldrh	r3, [r3, #10]
 80082e6:	461a      	mov	r2, r3
 80082e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ea:	895b      	ldrh	r3, [r3, #10]
 80082ec:	3b01      	subs	r3, #1
 80082ee:	4013      	ands	r3, r2
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <find_volume+0x270>
 80082f4:	230d      	movs	r3, #13
 80082f6:	e140      	b.n	800857a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80082f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082fa:	3338      	adds	r3, #56	@ 0x38
 80082fc:	3311      	adds	r3, #17
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fe f846 	bl	8006390 <ld_word>
 8008304:	4603      	mov	r3, r0
 8008306:	461a      	mov	r2, r3
 8008308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800830a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800830c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800830e:	891b      	ldrh	r3, [r3, #8]
 8008310:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008312:	8992      	ldrh	r2, [r2, #12]
 8008314:	0952      	lsrs	r2, r2, #5
 8008316:	b292      	uxth	r2, r2
 8008318:	fbb3 f1f2 	udiv	r1, r3, r2
 800831c:	fb01 f202 	mul.w	r2, r1, r2
 8008320:	1a9b      	subs	r3, r3, r2
 8008322:	b29b      	uxth	r3, r3
 8008324:	2b00      	cmp	r3, #0
 8008326:	d003      	beq.n	8008330 <find_volume+0x2a8>
 8008328:	230d      	movs	r3, #13
 800832a:	e126      	b.n	800857a <find_volume+0x4f2>
 800832c:	20004a74 	.word	0x20004a74

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008332:	3338      	adds	r3, #56	@ 0x38
 8008334:	3313      	adds	r3, #19
 8008336:	4618      	mov	r0, r3
 8008338:	f7fe f82a 	bl	8006390 <ld_word>
 800833c:	4603      	mov	r3, r0
 800833e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008340:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008342:	2b00      	cmp	r3, #0
 8008344:	d106      	bne.n	8008354 <find_volume+0x2cc>
 8008346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008348:	3338      	adds	r3, #56	@ 0x38
 800834a:	3320      	adds	r3, #32
 800834c:	4618      	mov	r0, r3
 800834e:	f7fe f837 	bl	80063c0 <ld_dword>
 8008352:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008356:	3338      	adds	r3, #56	@ 0x38
 8008358:	330e      	adds	r3, #14
 800835a:	4618      	mov	r0, r3
 800835c:	f7fe f818 	bl	8006390 <ld_word>
 8008360:	4603      	mov	r3, r0
 8008362:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008364:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008366:	2b00      	cmp	r3, #0
 8008368:	d101      	bne.n	800836e <find_volume+0x2e6>
 800836a:	230d      	movs	r3, #13
 800836c:	e105      	b.n	800857a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800836e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008370:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008372:	4413      	add	r3, r2
 8008374:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008376:	8911      	ldrh	r1, [r2, #8]
 8008378:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800837a:	8992      	ldrh	r2, [r2, #12]
 800837c:	0952      	lsrs	r2, r2, #5
 800837e:	b292      	uxth	r2, r2
 8008380:	fbb1 f2f2 	udiv	r2, r1, r2
 8008384:	b292      	uxth	r2, r2
 8008386:	4413      	add	r3, r2
 8008388:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800838a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800838c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838e:	429a      	cmp	r2, r3
 8008390:	d201      	bcs.n	8008396 <find_volume+0x30e>
 8008392:	230d      	movs	r3, #13
 8008394:	e0f1      	b.n	800857a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008396:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800839e:	8952      	ldrh	r2, [r2, #10]
 80083a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80083a4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80083a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d101      	bne.n	80083b0 <find_volume+0x328>
 80083ac:	230d      	movs	r3, #13
 80083ae:	e0e4      	b.n	800857a <find_volume+0x4f2>
		fmt = FS_FAT32;
 80083b0:	2303      	movs	r3, #3
 80083b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80083b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80083bc:	4293      	cmp	r3, r2
 80083be:	d802      	bhi.n	80083c6 <find_volume+0x33e>
 80083c0:	2302      	movs	r3, #2
 80083c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80083c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d802      	bhi.n	80083d6 <find_volume+0x34e>
 80083d0:	2301      	movs	r3, #1
 80083d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80083d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d8:	1c9a      	adds	r2, r3, #2
 80083da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083dc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80083de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80083e2:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80083e4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80083e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083e8:	441a      	add	r2, r3
 80083ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ec:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80083ee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80083f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f2:	441a      	add	r2, r3
 80083f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f6:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80083f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80083fc:	2b03      	cmp	r3, #3
 80083fe:	d11e      	bne.n	800843e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008402:	3338      	adds	r3, #56	@ 0x38
 8008404:	332a      	adds	r3, #42	@ 0x2a
 8008406:	4618      	mov	r0, r3
 8008408:	f7fd ffc2 	bl	8006390 <ld_word>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d001      	beq.n	8008416 <find_volume+0x38e>
 8008412:	230d      	movs	r3, #13
 8008414:	e0b1      	b.n	800857a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008418:	891b      	ldrh	r3, [r3, #8]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d001      	beq.n	8008422 <find_volume+0x39a>
 800841e:	230d      	movs	r3, #13
 8008420:	e0ab      	b.n	800857a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008424:	3338      	adds	r3, #56	@ 0x38
 8008426:	332c      	adds	r3, #44	@ 0x2c
 8008428:	4618      	mov	r0, r3
 800842a:	f7fd ffc9 	bl	80063c0 <ld_dword>
 800842e:	4602      	mov	r2, r0
 8008430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008432:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008436:	69db      	ldr	r3, [r3, #28]
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	647b      	str	r3, [r7, #68]	@ 0x44
 800843c:	e01f      	b.n	800847e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800843e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008440:	891b      	ldrh	r3, [r3, #8]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d101      	bne.n	800844a <find_volume+0x3c2>
 8008446:	230d      	movs	r3, #13
 8008448:	e097      	b.n	800857a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800844a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800844c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800844e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008450:	441a      	add	r2, r3
 8008452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008454:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008456:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800845a:	2b02      	cmp	r3, #2
 800845c:	d103      	bne.n	8008466 <find_volume+0x3de>
 800845e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008460:	69db      	ldr	r3, [r3, #28]
 8008462:	005b      	lsls	r3, r3, #1
 8008464:	e00a      	b.n	800847c <find_volume+0x3f4>
 8008466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008468:	69da      	ldr	r2, [r3, #28]
 800846a:	4613      	mov	r3, r2
 800846c:	005b      	lsls	r3, r3, #1
 800846e:	4413      	add	r3, r2
 8008470:	085a      	lsrs	r2, r3, #1
 8008472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	f003 0301 	and.w	r3, r3, #1
 800847a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800847c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800847e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008480:	6a1a      	ldr	r2, [r3, #32]
 8008482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008484:	899b      	ldrh	r3, [r3, #12]
 8008486:	4619      	mov	r1, r3
 8008488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800848a:	440b      	add	r3, r1
 800848c:	3b01      	subs	r3, #1
 800848e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008490:	8989      	ldrh	r1, [r1, #12]
 8008492:	fbb3 f3f1 	udiv	r3, r3, r1
 8008496:	429a      	cmp	r2, r3
 8008498:	d201      	bcs.n	800849e <find_volume+0x416>
 800849a:	230d      	movs	r3, #13
 800849c:	e06d      	b.n	800857a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800849e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80084a4:	619a      	str	r2, [r3, #24]
 80084a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a8:	699a      	ldr	r2, [r3, #24]
 80084aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ac:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80084ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b0:	2280      	movs	r2, #128	@ 0x80
 80084b2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80084b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80084b8:	2b03      	cmp	r3, #3
 80084ba:	d149      	bne.n	8008550 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80084bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084be:	3338      	adds	r3, #56	@ 0x38
 80084c0:	3330      	adds	r3, #48	@ 0x30
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fd ff64 	bl	8006390 <ld_word>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d140      	bne.n	8008550 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80084ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084d0:	3301      	adds	r3, #1
 80084d2:	4619      	mov	r1, r3
 80084d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80084d6:	f7fe fa0b 	bl	80068f0 <move_window>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d137      	bne.n	8008550 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80084e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e2:	2200      	movs	r2, #0
 80084e4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80084e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e8:	3338      	adds	r3, #56	@ 0x38
 80084ea:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fd ff4e 	bl	8006390 <ld_word>
 80084f4:	4603      	mov	r3, r0
 80084f6:	461a      	mov	r2, r3
 80084f8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d127      	bne.n	8008550 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008502:	3338      	adds	r3, #56	@ 0x38
 8008504:	4618      	mov	r0, r3
 8008506:	f7fd ff5b 	bl	80063c0 <ld_dword>
 800850a:	4603      	mov	r3, r0
 800850c:	4a1d      	ldr	r2, [pc, #116]	@ (8008584 <find_volume+0x4fc>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d11e      	bne.n	8008550 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008514:	3338      	adds	r3, #56	@ 0x38
 8008516:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800851a:	4618      	mov	r0, r3
 800851c:	f7fd ff50 	bl	80063c0 <ld_dword>
 8008520:	4603      	mov	r3, r0
 8008522:	4a19      	ldr	r2, [pc, #100]	@ (8008588 <find_volume+0x500>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d113      	bne.n	8008550 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800852a:	3338      	adds	r3, #56	@ 0x38
 800852c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008530:	4618      	mov	r0, r3
 8008532:	f7fd ff45 	bl	80063c0 <ld_dword>
 8008536:	4602      	mov	r2, r0
 8008538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800853a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800853c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800853e:	3338      	adds	r3, #56	@ 0x38
 8008540:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008544:	4618      	mov	r0, r3
 8008546:	f7fd ff3b 	bl	80063c0 <ld_dword>
 800854a:	4602      	mov	r2, r0
 800854c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800854e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008552:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008556:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008558:	4b0c      	ldr	r3, [pc, #48]	@ (800858c <find_volume+0x504>)
 800855a:	881b      	ldrh	r3, [r3, #0]
 800855c:	3301      	adds	r3, #1
 800855e:	b29a      	uxth	r2, r3
 8008560:	4b0a      	ldr	r3, [pc, #40]	@ (800858c <find_volume+0x504>)
 8008562:	801a      	strh	r2, [r3, #0]
 8008564:	4b09      	ldr	r3, [pc, #36]	@ (800858c <find_volume+0x504>)
 8008566:	881a      	ldrh	r2, [r3, #0]
 8008568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800856a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800856c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800856e:	4a08      	ldr	r2, [pc, #32]	@ (8008590 <find_volume+0x508>)
 8008570:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008572:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008574:	f7fe f954 	bl	8006820 <clear_lock>
#endif
	return FR_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3758      	adds	r7, #88	@ 0x58
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	41615252 	.word	0x41615252
 8008588:	61417272 	.word	0x61417272
 800858c:	20004a78 	.word	0x20004a78
 8008590:	20004a9c 	.word	0x20004a9c

08008594 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800859e:	2309      	movs	r3, #9
 80085a0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d01c      	beq.n	80085e2 <validate+0x4e>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d018      	beq.n	80085e2 <validate+0x4e>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d013      	beq.n	80085e2 <validate+0x4e>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	889a      	ldrh	r2, [r3, #4]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	88db      	ldrh	r3, [r3, #6]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d10c      	bne.n	80085e2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	785b      	ldrb	r3, [r3, #1]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fd fe40 	bl	8006254 <disk_status>
 80085d4:	4603      	mov	r3, r0
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d101      	bne.n	80085e2 <validate+0x4e>
			res = FR_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d102      	bne.n	80085ee <validate+0x5a>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	e000      	b.n	80085f0 <validate+0x5c>
 80085ee:	2300      	movs	r3, #0
 80085f0:	683a      	ldr	r2, [r7, #0]
 80085f2:	6013      	str	r3, [r2, #0]
	return res;
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b088      	sub	sp, #32
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	4613      	mov	r3, r2
 800860c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008612:	f107 0310 	add.w	r3, r7, #16
 8008616:	4618      	mov	r0, r3
 8008618:	f7ff fc9c 	bl	8007f54 <get_ldnumber>
 800861c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	2b00      	cmp	r3, #0
 8008622:	da01      	bge.n	8008628 <f_mount+0x28>
 8008624:	230b      	movs	r3, #11
 8008626:	e02b      	b.n	8008680 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008628:	4a17      	ldr	r2, [pc, #92]	@ (8008688 <f_mount+0x88>)
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008630:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d005      	beq.n	8008644 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008638:	69b8      	ldr	r0, [r7, #24]
 800863a:	f7fe f8f1 	bl	8006820 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	2200      	movs	r2, #0
 8008642:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d002      	beq.n	8008650 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	490d      	ldr	r1, [pc, #52]	@ (8008688 <f_mount+0x88>)
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d002      	beq.n	8008666 <f_mount+0x66>
 8008660:	79fb      	ldrb	r3, [r7, #7]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d001      	beq.n	800866a <f_mount+0x6a>
 8008666:	2300      	movs	r3, #0
 8008668:	e00a      	b.n	8008680 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800866a:	f107 010c 	add.w	r1, r7, #12
 800866e:	f107 0308 	add.w	r3, r7, #8
 8008672:	2200      	movs	r2, #0
 8008674:	4618      	mov	r0, r3
 8008676:	f7ff fd07 	bl	8008088 <find_volume>
 800867a:	4603      	mov	r3, r0
 800867c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800867e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3720      	adds	r7, #32
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	20004a74 	.word	0x20004a74

0800868c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b09a      	sub	sp, #104	@ 0x68
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	4613      	mov	r3, r2
 8008698:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <f_open+0x18>
 80086a0:	2309      	movs	r3, #9
 80086a2:	e1b7      	b.n	8008a14 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80086a4:	79fb      	ldrb	r3, [r7, #7]
 80086a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80086aa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80086ac:	79fa      	ldrb	r2, [r7, #7]
 80086ae:	f107 0114 	add.w	r1, r7, #20
 80086b2:	f107 0308 	add.w	r3, r7, #8
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7ff fce6 	bl	8008088 <find_volume>
 80086bc:	4603      	mov	r3, r0
 80086be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80086c2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	f040 819b 	bne.w	8008a02 <f_open+0x376>
		dj.obj.fs = fs;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	f107 0318 	add.w	r3, r7, #24
 80086d6:	4611      	mov	r1, r2
 80086d8:	4618      	mov	r0, r3
 80086da:	f7ff fbc5 	bl	8007e68 <follow_path>
 80086de:	4603      	mov	r3, r0
 80086e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80086e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d118      	bne.n	800871e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80086ec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80086f0:	b25b      	sxtb	r3, r3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	da03      	bge.n	80086fe <f_open+0x72>
				res = FR_INVALID_NAME;
 80086f6:	2306      	movs	r3, #6
 80086f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80086fc:	e00f      	b.n	800871e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80086fe:	79fb      	ldrb	r3, [r7, #7]
 8008700:	2b01      	cmp	r3, #1
 8008702:	bf8c      	ite	hi
 8008704:	2301      	movhi	r3, #1
 8008706:	2300      	movls	r3, #0
 8008708:	b2db      	uxtb	r3, r3
 800870a:	461a      	mov	r2, r3
 800870c:	f107 0318 	add.w	r3, r7, #24
 8008710:	4611      	mov	r1, r2
 8008712:	4618      	mov	r0, r3
 8008714:	f7fd ff3c 	bl	8006590 <chk_lock>
 8008718:	4603      	mov	r3, r0
 800871a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800871e:	79fb      	ldrb	r3, [r7, #7]
 8008720:	f003 031c 	and.w	r3, r3, #28
 8008724:	2b00      	cmp	r3, #0
 8008726:	d07f      	beq.n	8008828 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8008728:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800872c:	2b00      	cmp	r3, #0
 800872e:	d017      	beq.n	8008760 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008730:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008734:	2b04      	cmp	r3, #4
 8008736:	d10e      	bne.n	8008756 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008738:	f7fd ff86 	bl	8006648 <enq_lock>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d006      	beq.n	8008750 <f_open+0xc4>
 8008742:	f107 0318 	add.w	r3, r7, #24
 8008746:	4618      	mov	r0, r3
 8008748:	f7ff f8de 	bl	8007908 <dir_register>
 800874c:	4603      	mov	r3, r0
 800874e:	e000      	b.n	8008752 <f_open+0xc6>
 8008750:	2312      	movs	r3, #18
 8008752:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008756:	79fb      	ldrb	r3, [r7, #7]
 8008758:	f043 0308 	orr.w	r3, r3, #8
 800875c:	71fb      	strb	r3, [r7, #7]
 800875e:	e010      	b.n	8008782 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008760:	7fbb      	ldrb	r3, [r7, #30]
 8008762:	f003 0311 	and.w	r3, r3, #17
 8008766:	2b00      	cmp	r3, #0
 8008768:	d003      	beq.n	8008772 <f_open+0xe6>
					res = FR_DENIED;
 800876a:	2307      	movs	r3, #7
 800876c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008770:	e007      	b.n	8008782 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008772:	79fb      	ldrb	r3, [r7, #7]
 8008774:	f003 0304 	and.w	r3, r3, #4
 8008778:	2b00      	cmp	r3, #0
 800877a:	d002      	beq.n	8008782 <f_open+0xf6>
 800877c:	2308      	movs	r3, #8
 800877e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008782:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008786:	2b00      	cmp	r3, #0
 8008788:	d168      	bne.n	800885c <f_open+0x1d0>
 800878a:	79fb      	ldrb	r3, [r7, #7]
 800878c:	f003 0308 	and.w	r3, r3, #8
 8008790:	2b00      	cmp	r3, #0
 8008792:	d063      	beq.n	800885c <f_open+0x1d0>
				dw = GET_FATTIME();
 8008794:	f7fd f834 	bl	8005800 <get_fattime>
 8008798:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800879a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879c:	330e      	adds	r3, #14
 800879e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7fd fe4b 	bl	800643c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80087a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a8:	3316      	adds	r3, #22
 80087aa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7fd fe45 	bl	800643c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80087b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b4:	330b      	adds	r3, #11
 80087b6:	2220      	movs	r2, #32
 80087b8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087be:	4611      	mov	r1, r2
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7fe fe1a 	bl	80073fa <ld_clust>
 80087c6:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80087cc:	2200      	movs	r2, #0
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fe fe32 	bl	8007438 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80087d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d6:	331c      	adds	r3, #28
 80087d8:	2100      	movs	r1, #0
 80087da:	4618      	mov	r0, r3
 80087dc:	f7fd fe2e 	bl	800643c <st_dword>
					fs->wflag = 1;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	2201      	movs	r2, #1
 80087e4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80087e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d037      	beq.n	800885c <f_open+0x1d0>
						dw = fs->winsect;
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087f0:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80087f2:	f107 0318 	add.w	r3, r7, #24
 80087f6:	2200      	movs	r2, #0
 80087f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fe fb22 	bl	8006e44 <remove_chain>
 8008800:	4603      	mov	r3, r0
 8008802:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8008806:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800880a:	2b00      	cmp	r3, #0
 800880c:	d126      	bne.n	800885c <f_open+0x1d0>
							res = move_window(fs, dw);
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008812:	4618      	mov	r0, r3
 8008814:	f7fe f86c 	bl	80068f0 <move_window>
 8008818:	4603      	mov	r3, r0
 800881a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008822:	3a01      	subs	r2, #1
 8008824:	615a      	str	r2, [r3, #20]
 8008826:	e019      	b.n	800885c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008828:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800882c:	2b00      	cmp	r3, #0
 800882e:	d115      	bne.n	800885c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008830:	7fbb      	ldrb	r3, [r7, #30]
 8008832:	f003 0310 	and.w	r3, r3, #16
 8008836:	2b00      	cmp	r3, #0
 8008838:	d003      	beq.n	8008842 <f_open+0x1b6>
					res = FR_NO_FILE;
 800883a:	2304      	movs	r3, #4
 800883c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008840:	e00c      	b.n	800885c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008842:	79fb      	ldrb	r3, [r7, #7]
 8008844:	f003 0302 	and.w	r3, r3, #2
 8008848:	2b00      	cmp	r3, #0
 800884a:	d007      	beq.n	800885c <f_open+0x1d0>
 800884c:	7fbb      	ldrb	r3, [r7, #30]
 800884e:	f003 0301 	and.w	r3, r3, #1
 8008852:	2b00      	cmp	r3, #0
 8008854:	d002      	beq.n	800885c <f_open+0x1d0>
						res = FR_DENIED;
 8008856:	2307      	movs	r3, #7
 8008858:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800885c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008860:	2b00      	cmp	r3, #0
 8008862:	d126      	bne.n	80088b2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008864:	79fb      	ldrb	r3, [r7, #7]
 8008866:	f003 0308 	and.w	r3, r3, #8
 800886a:	2b00      	cmp	r3, #0
 800886c:	d003      	beq.n	8008876 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800886e:	79fb      	ldrb	r3, [r7, #7]
 8008870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008874:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800887e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008884:	79fb      	ldrb	r3, [r7, #7]
 8008886:	2b01      	cmp	r3, #1
 8008888:	bf8c      	ite	hi
 800888a:	2301      	movhi	r3, #1
 800888c:	2300      	movls	r3, #0
 800888e:	b2db      	uxtb	r3, r3
 8008890:	461a      	mov	r2, r3
 8008892:	f107 0318 	add.w	r3, r7, #24
 8008896:	4611      	mov	r1, r2
 8008898:	4618      	mov	r0, r3
 800889a:	f7fd fef7 	bl	800668c <inc_lock>
 800889e:	4602      	mov	r2, r0
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d102      	bne.n	80088b2 <f_open+0x226>
 80088ac:	2302      	movs	r3, #2
 80088ae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80088b2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f040 80a3 	bne.w	8008a02 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80088c0:	4611      	mov	r1, r2
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7fe fd99 	bl	80073fa <ld_clust>
 80088c8:	4602      	mov	r2, r0
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80088ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d0:	331c      	adds	r3, #28
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7fd fd74 	bl	80063c0 <ld_dword>
 80088d8:	4602      	mov	r2, r0
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80088e4:	697a      	ldr	r2, [r7, #20]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	88da      	ldrh	r2, [r3, #6]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	79fa      	ldrb	r2, [r7, #7]
 80088f6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	3330      	adds	r3, #48	@ 0x30
 800890e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008912:	2100      	movs	r1, #0
 8008914:	4618      	mov	r0, r3
 8008916:	f7fd fdde 	bl	80064d6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800891a:	79fb      	ldrb	r3, [r7, #7]
 800891c:	f003 0320 	and.w	r3, r3, #32
 8008920:	2b00      	cmp	r3, #0
 8008922:	d06e      	beq.n	8008a02 <f_open+0x376>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d06a      	beq.n	8008a02 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	68da      	ldr	r2, [r3, #12]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	895b      	ldrh	r3, [r3, #10]
 8008938:	461a      	mov	r2, r3
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	899b      	ldrh	r3, [r3, #12]
 800893e:	fb02 f303 	mul.w	r3, r2, r3
 8008942:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008950:	e016      	b.n	8008980 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008956:	4618      	mov	r0, r3
 8008958:	f7fe f887 	bl	8006a6a <get_fat>
 800895c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800895e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008960:	2b01      	cmp	r3, #1
 8008962:	d802      	bhi.n	800896a <f_open+0x2de>
 8008964:	2302      	movs	r3, #2
 8008966:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800896a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800896c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008970:	d102      	bne.n	8008978 <f_open+0x2ec>
 8008972:	2301      	movs	r3, #1
 8008974:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008978:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800897a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008980:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008984:	2b00      	cmp	r3, #0
 8008986:	d103      	bne.n	8008990 <f_open+0x304>
 8008988:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800898a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800898c:	429a      	cmp	r2, r3
 800898e:	d8e0      	bhi.n	8008952 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008994:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008996:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800899a:	2b00      	cmp	r3, #0
 800899c:	d131      	bne.n	8008a02 <f_open+0x376>
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	899b      	ldrh	r3, [r3, #12]
 80089a2:	461a      	mov	r2, r3
 80089a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80089aa:	fb01 f202 	mul.w	r2, r1, r2
 80089ae:	1a9b      	subs	r3, r3, r2
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d026      	beq.n	8008a02 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7fe f837 	bl	8006a2c <clust2sect>
 80089be:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80089c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d103      	bne.n	80089ce <f_open+0x342>
						res = FR_INT_ERR;
 80089c6:	2302      	movs	r3, #2
 80089c8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80089cc:	e019      	b.n	8008a02 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	899b      	ldrh	r3, [r3, #12]
 80089d2:	461a      	mov	r2, r3
 80089d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80089da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089dc:	441a      	add	r2, r3
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	7858      	ldrb	r0, [r3, #1]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6a1a      	ldr	r2, [r3, #32]
 80089f0:	2301      	movs	r3, #1
 80089f2:	f7fd fc6f 	bl	80062d4 <disk_read>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d002      	beq.n	8008a02 <f_open+0x376>
 80089fc:	2301      	movs	r3, #1
 80089fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008a02:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d002      	beq.n	8008a10 <f_open+0x384>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008a10:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3768      	adds	r7, #104	@ 0x68
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b08c      	sub	sp, #48	@ 0x30
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	607a      	str	r2, [r7, #4]
 8008a28:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	2200      	movs	r2, #0
 8008a32:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f107 0210 	add.w	r2, r7, #16
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7ff fda9 	bl	8008594 <validate>
 8008a42:	4603      	mov	r3, r0
 8008a44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008a48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d107      	bne.n	8008a60 <f_write+0x44>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	7d5b      	ldrb	r3, [r3, #21]
 8008a54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008a58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d002      	beq.n	8008a66 <f_write+0x4a>
 8008a60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a64:	e16a      	b.n	8008d3c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	7d1b      	ldrb	r3, [r3, #20]
 8008a6a:	f003 0302 	and.w	r3, r3, #2
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d101      	bne.n	8008a76 <f_write+0x5a>
 8008a72:	2307      	movs	r3, #7
 8008a74:	e162      	b.n	8008d3c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	699a      	ldr	r2, [r3, #24]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	441a      	add	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	699b      	ldr	r3, [r3, #24]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	f080 814c 	bcs.w	8008d20 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	43db      	mvns	r3, r3
 8008a8e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008a90:	e146      	b.n	8008d20 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	8992      	ldrh	r2, [r2, #12]
 8008a9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a9e:	fb01 f202 	mul.w	r2, r1, r2
 8008aa2:	1a9b      	subs	r3, r3, r2
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f040 80f1 	bne.w	8008c8c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	693a      	ldr	r2, [r7, #16]
 8008ab0:	8992      	ldrh	r2, [r2, #12]
 8008ab2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	8952      	ldrh	r2, [r2, #10]
 8008aba:	3a01      	subs	r2, #1
 8008abc:	4013      	ands	r3, r2
 8008abe:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d143      	bne.n	8008b4e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10c      	bne.n	8008ae8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d11a      	bne.n	8008b10 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2100      	movs	r1, #0
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7fe fa15 	bl	8006f0e <create_chain>
 8008ae4:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008ae6:	e013      	b.n	8008b10 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d007      	beq.n	8008b00 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	4619      	mov	r1, r3
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f7fe faa1 	bl	800703e <clmt_clust>
 8008afc:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008afe:	e007      	b.n	8008b10 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	69db      	ldr	r3, [r3, #28]
 8008b06:	4619      	mov	r1, r3
 8008b08:	4610      	mov	r0, r2
 8008b0a:	f7fe fa00 	bl	8006f0e <create_chain>
 8008b0e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f000 8109 	beq.w	8008d2a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d104      	bne.n	8008b28 <f_write+0x10c>
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2202      	movs	r2, #2
 8008b22:	755a      	strb	r2, [r3, #21]
 8008b24:	2302      	movs	r3, #2
 8008b26:	e109      	b.n	8008d3c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b2e:	d104      	bne.n	8008b3a <f_write+0x11e>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2201      	movs	r2, #1
 8008b34:	755a      	strb	r2, [r3, #21]
 8008b36:	2301      	movs	r3, #1
 8008b38:	e100      	b.n	8008d3c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b3e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d102      	bne.n	8008b4e <f_write+0x132>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b4c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	7d1b      	ldrb	r3, [r3, #20]
 8008b52:	b25b      	sxtb	r3, r3
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	da18      	bge.n	8008b8a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	7858      	ldrb	r0, [r3, #1]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6a1a      	ldr	r2, [r3, #32]
 8008b66:	2301      	movs	r3, #1
 8008b68:	f7fd fbd4 	bl	8006314 <disk_write>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d004      	beq.n	8008b7c <f_write+0x160>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2201      	movs	r2, #1
 8008b76:	755a      	strb	r2, [r3, #21]
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e0df      	b.n	8008d3c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	7d1b      	ldrb	r3, [r3, #20]
 8008b80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008b8a:	693a      	ldr	r2, [r7, #16]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	69db      	ldr	r3, [r3, #28]
 8008b90:	4619      	mov	r1, r3
 8008b92:	4610      	mov	r0, r2
 8008b94:	f7fd ff4a 	bl	8006a2c <clust2sect>
 8008b98:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d104      	bne.n	8008baa <f_write+0x18e>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2202      	movs	r2, #2
 8008ba4:	755a      	strb	r2, [r3, #21]
 8008ba6:	2302      	movs	r3, #2
 8008ba8:	e0c8      	b.n	8008d3c <f_write+0x320>
			sect += csect;
 8008baa:	697a      	ldr	r2, [r7, #20]
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	4413      	add	r3, r2
 8008bb0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	899b      	ldrh	r3, [r3, #12]
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bbe:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008bc0:	6a3b      	ldr	r3, [r7, #32]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d043      	beq.n	8008c4e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008bc6:	69ba      	ldr	r2, [r7, #24]
 8008bc8:	6a3b      	ldr	r3, [r7, #32]
 8008bca:	4413      	add	r3, r2
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	8952      	ldrh	r2, [r2, #10]
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d905      	bls.n	8008be0 <f_write+0x1c4>
					cc = fs->csize - csect;
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	895b      	ldrh	r3, [r3, #10]
 8008bd8:	461a      	mov	r2, r3
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	7858      	ldrb	r0, [r3, #1]
 8008be4:	6a3b      	ldr	r3, [r7, #32]
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	69f9      	ldr	r1, [r7, #28]
 8008bea:	f7fd fb93 	bl	8006314 <disk_write>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d004      	beq.n	8008bfe <f_write+0x1e2>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	755a      	strb	r2, [r3, #21]
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e09e      	b.n	8008d3c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6a1a      	ldr	r2, [r3, #32]
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	6a3a      	ldr	r2, [r7, #32]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d918      	bls.n	8008c3e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6a1a      	ldr	r2, [r3, #32]
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	8992      	ldrh	r2, [r2, #12]
 8008c1e:	fb02 f303 	mul.w	r3, r2, r3
 8008c22:	69fa      	ldr	r2, [r7, #28]
 8008c24:	18d1      	adds	r1, r2, r3
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	899b      	ldrh	r3, [r3, #12]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	f7fd fc32 	bl	8006494 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	7d1b      	ldrb	r3, [r3, #20]
 8008c34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	899b      	ldrh	r3, [r3, #12]
 8008c42:	461a      	mov	r2, r3
 8008c44:	6a3b      	ldr	r3, [r7, #32]
 8008c46:	fb02 f303 	mul.w	r3, r2, r3
 8008c4a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008c4c:	e04b      	b.n	8008ce6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6a1b      	ldr	r3, [r3, #32]
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d016      	beq.n	8008c86 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	699a      	ldr	r2, [r3, #24]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d210      	bcs.n	8008c86 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	7858      	ldrb	r0, [r3, #1]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008c6e:	2301      	movs	r3, #1
 8008c70:	697a      	ldr	r2, [r7, #20]
 8008c72:	f7fd fb2f 	bl	80062d4 <disk_read>
 8008c76:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d004      	beq.n	8008c86 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	755a      	strb	r2, [r3, #21]
 8008c82:	2301      	movs	r3, #1
 8008c84:	e05a      	b.n	8008d3c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	697a      	ldr	r2, [r7, #20]
 8008c8a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	899b      	ldrh	r3, [r3, #12]
 8008c90:	4618      	mov	r0, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	8992      	ldrh	r2, [r2, #12]
 8008c9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c9e:	fb01 f202 	mul.w	r2, r1, r2
 8008ca2:	1a9b      	subs	r3, r3, r2
 8008ca4:	1ac3      	subs	r3, r0, r3
 8008ca6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008ca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d901      	bls.n	8008cb4 <f_write+0x298>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	693a      	ldr	r2, [r7, #16]
 8008cc0:	8992      	ldrh	r2, [r2, #12]
 8008cc2:	fbb3 f0f2 	udiv	r0, r3, r2
 8008cc6:	fb00 f202 	mul.w	r2, r0, r2
 8008cca:	1a9b      	subs	r3, r3, r2
 8008ccc:	440b      	add	r3, r1
 8008cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cd0:	69f9      	ldr	r1, [r7, #28]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fd fbde 	bl	8006494 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	7d1b      	ldrb	r3, [r3, #20]
 8008cdc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008ce6:	69fa      	ldr	r2, [r7, #28]
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cea:	4413      	add	r3, r2
 8008cec:	61fb      	str	r3, [r7, #28]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	699a      	ldr	r2, [r3, #24]
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf4:	441a      	add	r2, r3
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	619a      	str	r2, [r3, #24]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	68da      	ldr	r2, [r3, #12]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	bf38      	it	cc
 8008d06:	461a      	movcc	r2, r3
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	60da      	str	r2, [r3, #12]
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d12:	441a      	add	r2, r3
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f47f aeb5 	bne.w	8008a92 <f_write+0x76>
 8008d28:	e000      	b.n	8008d2c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008d2a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	7d1b      	ldrb	r3, [r3, #20]
 8008d30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d34:	b2da      	uxtb	r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3730      	adds	r7, #48	@ 0x30
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b086      	sub	sp, #24
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f107 0208 	add.w	r2, r7, #8
 8008d52:	4611      	mov	r1, r2
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7ff fc1d 	bl	8008594 <validate>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008d5e:	7dfb      	ldrb	r3, [r7, #23]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d168      	bne.n	8008e36 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	7d1b      	ldrb	r3, [r3, #20]
 8008d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d062      	beq.n	8008e36 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	7d1b      	ldrb	r3, [r3, #20]
 8008d74:	b25b      	sxtb	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	da15      	bge.n	8008da6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	7858      	ldrb	r0, [r3, #1]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a1a      	ldr	r2, [r3, #32]
 8008d88:	2301      	movs	r3, #1
 8008d8a:	f7fd fac3 	bl	8006314 <disk_write>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <f_sync+0x54>
 8008d94:	2301      	movs	r3, #1
 8008d96:	e04f      	b.n	8008e38 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	7d1b      	ldrb	r3, [r3, #20]
 8008d9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008da0:	b2da      	uxtb	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008da6:	f7fc fd2b 	bl	8005800 <get_fattime>
 8008daa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008db2:	4619      	mov	r1, r3
 8008db4:	4610      	mov	r0, r2
 8008db6:	f7fd fd9b 	bl	80068f0 <move_window>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d138      	bne.n	8008e36 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dc8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	330b      	adds	r3, #11
 8008dce:	781a      	ldrb	r2, [r3, #0]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	330b      	adds	r3, #11
 8008dd4:	f042 0220 	orr.w	r2, r2, #32
 8008dd8:	b2d2      	uxtb	r2, r2
 8008dda:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6818      	ldr	r0, [r3, #0]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	461a      	mov	r2, r3
 8008de6:	68f9      	ldr	r1, [r7, #12]
 8008de8:	f7fe fb26 	bl	8007438 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f103 021c 	add.w	r2, r3, #28
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	4619      	mov	r1, r3
 8008df8:	4610      	mov	r0, r2
 8008dfa:	f7fd fb1f 	bl	800643c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	3316      	adds	r3, #22
 8008e02:	6939      	ldr	r1, [r7, #16]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7fd fb19 	bl	800643c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	3312      	adds	r3, #18
 8008e0e:	2100      	movs	r1, #0
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fd faf8 	bl	8006406 <st_word>
					fs->wflag = 1;
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7fd fd94 	bl	800694c <sync_fs>
 8008e24:	4603      	mov	r3, r0
 8008e26:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	7d1b      	ldrb	r3, [r3, #20]
 8008e2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e30:	b2da      	uxtb	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3718      	adds	r7, #24
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f7ff ff7b 	bl	8008d44 <f_sync>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008e52:	7bfb      	ldrb	r3, [r7, #15]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d118      	bne.n	8008e8a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f107 0208 	add.w	r2, r7, #8
 8008e5e:	4611      	mov	r1, r2
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7ff fb97 	bl	8008594 <validate>
 8008e66:	4603      	mov	r3, r0
 8008e68:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d10c      	bne.n	8008e8a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7fd fc97 	bl	80067a8 <dec_lock>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008e7e:	7bfb      	ldrb	r3, [r7, #15]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d102      	bne.n	8008e8a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b092      	sub	sp, #72	@ 0x48
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008ea0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8008ea4:	f107 030c 	add.w	r3, r7, #12
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7ff f8ec 	bl	8008088 <find_volume>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8008eb6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f040 8099 	bne.w	8008ff2 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008ec0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec8:	699a      	ldr	r2, [r3, #24]
 8008eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ecc:	69db      	ldr	r3, [r3, #28]
 8008ece:	3b02      	subs	r3, #2
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d804      	bhi.n	8008ede <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed6:	699a      	ldr	r2, [r3, #24]
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	601a      	str	r2, [r3, #0]
 8008edc:	e089      	b.n	8008ff2 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d128      	bne.n	8008f3c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008eea:	2302      	movs	r3, #2
 8008eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef0:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008ef2:	f107 0314 	add.w	r3, r7, #20
 8008ef6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7fd fdb6 	bl	8006a6a <get_fat>
 8008efe:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f06:	d103      	bne.n	8008f10 <f_getfree+0x7c>
 8008f08:	2301      	movs	r3, #1
 8008f0a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008f0e:	e063      	b.n	8008fd8 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d103      	bne.n	8008f1e <f_getfree+0x8a>
 8008f16:	2302      	movs	r3, #2
 8008f18:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008f1c:	e05c      	b.n	8008fd8 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d102      	bne.n	8008f2a <f_getfree+0x96>
 8008f24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f26:	3301      	adds	r3, #1
 8008f28:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8008f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f32:	69db      	ldr	r3, [r3, #28]
 8008f34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d3db      	bcc.n	8008ef2 <f_getfree+0x5e>
 8008f3a:	e04d      	b.n	8008fd8 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f3e:	69db      	ldr	r3, [r3, #28]
 8008f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f46:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8008f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d113      	bne.n	8008f7e <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008f56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f5a:	1c5a      	adds	r2, r3, #1
 8008f5c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008f5e:	4619      	mov	r1, r3
 8008f60:	f7fd fcc6 	bl	80068f0 <move_window>
 8008f64:	4603      	mov	r3, r0
 8008f66:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8008f6a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d131      	bne.n	8008fd6 <f_getfree+0x142>
							p = fs->win;
 8008f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f74:	3338      	adds	r3, #56	@ 0x38
 8008f76:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8008f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f7a:	899b      	ldrh	r3, [r3, #12]
 8008f7c:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d10f      	bne.n	8008fa6 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8008f86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f88:	f7fd fa02 	bl	8006390 <ld_word>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d102      	bne.n	8008f98 <f_getfree+0x104>
 8008f92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f94:	3301      	adds	r3, #1
 8008f96:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8008f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9a:	3302      	adds	r3, #2
 8008f9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fa0:	3b02      	subs	r3, #2
 8008fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fa4:	e010      	b.n	8008fc8 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008fa6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fa8:	f7fd fa0a 	bl	80063c0 <ld_dword>
 8008fac:	4603      	mov	r3, r0
 8008fae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d102      	bne.n	8008fbc <f_getfree+0x128>
 8008fb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fb8:	3301      	adds	r3, #1
 8008fba:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8008fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbe:	3304      	adds	r3, #4
 8008fc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fc4:	3b04      	subs	r3, #4
 8008fc6:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8008fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1bd      	bne.n	8008f50 <f_getfree+0xbc>
 8008fd4:	e000      	b.n	8008fd8 <f_getfree+0x144>
							if (res != FR_OK) break;
 8008fd6:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008fdc:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008fe2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe6:	791a      	ldrb	r2, [r3, #4]
 8008fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fea:	f042 0201 	orr.w	r2, r2, #1
 8008fee:	b2d2      	uxtb	r2, r2
 8008ff0:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008ff2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3748      	adds	r7, #72	@ 0x48
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
	...

08009000 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009000:	b480      	push	{r7}
 8009002:	b087      	sub	sp, #28
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	4613      	mov	r3, r2
 800900c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800900e:	2301      	movs	r3, #1
 8009010:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009012:	2300      	movs	r3, #0
 8009014:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009016:	4b1f      	ldr	r3, [pc, #124]	@ (8009094 <FATFS_LinkDriverEx+0x94>)
 8009018:	7a5b      	ldrb	r3, [r3, #9]
 800901a:	b2db      	uxtb	r3, r3
 800901c:	2b00      	cmp	r3, #0
 800901e:	d131      	bne.n	8009084 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009020:	4b1c      	ldr	r3, [pc, #112]	@ (8009094 <FATFS_LinkDriverEx+0x94>)
 8009022:	7a5b      	ldrb	r3, [r3, #9]
 8009024:	b2db      	uxtb	r3, r3
 8009026:	461a      	mov	r2, r3
 8009028:	4b1a      	ldr	r3, [pc, #104]	@ (8009094 <FATFS_LinkDriverEx+0x94>)
 800902a:	2100      	movs	r1, #0
 800902c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800902e:	4b19      	ldr	r3, [pc, #100]	@ (8009094 <FATFS_LinkDriverEx+0x94>)
 8009030:	7a5b      	ldrb	r3, [r3, #9]
 8009032:	b2db      	uxtb	r3, r3
 8009034:	4a17      	ldr	r2, [pc, #92]	@ (8009094 <FATFS_LinkDriverEx+0x94>)
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4413      	add	r3, r2
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800903e:	4b15      	ldr	r3, [pc, #84]	@ (8009094 <FATFS_LinkDriverEx+0x94>)
 8009040:	7a5b      	ldrb	r3, [r3, #9]
 8009042:	b2db      	uxtb	r3, r3
 8009044:	461a      	mov	r2, r3
 8009046:	4b13      	ldr	r3, [pc, #76]	@ (8009094 <FATFS_LinkDriverEx+0x94>)
 8009048:	4413      	add	r3, r2
 800904a:	79fa      	ldrb	r2, [r7, #7]
 800904c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800904e:	4b11      	ldr	r3, [pc, #68]	@ (8009094 <FATFS_LinkDriverEx+0x94>)
 8009050:	7a5b      	ldrb	r3, [r3, #9]
 8009052:	b2db      	uxtb	r3, r3
 8009054:	1c5a      	adds	r2, r3, #1
 8009056:	b2d1      	uxtb	r1, r2
 8009058:	4a0e      	ldr	r2, [pc, #56]	@ (8009094 <FATFS_LinkDriverEx+0x94>)
 800905a:	7251      	strb	r1, [r2, #9]
 800905c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800905e:	7dbb      	ldrb	r3, [r7, #22]
 8009060:	3330      	adds	r3, #48	@ 0x30
 8009062:	b2da      	uxtb	r2, r3
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	3301      	adds	r3, #1
 800906c:	223a      	movs	r2, #58	@ 0x3a
 800906e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	3302      	adds	r3, #2
 8009074:	222f      	movs	r2, #47	@ 0x2f
 8009076:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	3303      	adds	r3, #3
 800907c:	2200      	movs	r2, #0
 800907e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009080:	2300      	movs	r3, #0
 8009082:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009084:	7dfb      	ldrb	r3, [r7, #23]
}
 8009086:	4618      	mov	r0, r3
 8009088:	371c      	adds	r7, #28
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	20004c9c 	.word	0x20004c9c

08009098 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80090a2:	2200      	movs	r2, #0
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7ff ffaa 	bl	8009000 <FATFS_LinkDriverEx>
 80090ac:	4603      	mov	r3, r0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3708      	adds	r7, #8
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
	...

080090b8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	4603      	mov	r3, r0
 80090c0:	6039      	str	r1, [r7, #0]
 80090c2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80090c4:	88fb      	ldrh	r3, [r7, #6]
 80090c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80090c8:	d802      	bhi.n	80090d0 <ff_convert+0x18>
		c = chr;
 80090ca:	88fb      	ldrh	r3, [r7, #6]
 80090cc:	81fb      	strh	r3, [r7, #14]
 80090ce:	e025      	b.n	800911c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00b      	beq.n	80090ee <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80090d6:	88fb      	ldrh	r3, [r7, #6]
 80090d8:	2bff      	cmp	r3, #255	@ 0xff
 80090da:	d805      	bhi.n	80090e8 <ff_convert+0x30>
 80090dc:	88fb      	ldrh	r3, [r7, #6]
 80090de:	3b80      	subs	r3, #128	@ 0x80
 80090e0:	4a12      	ldr	r2, [pc, #72]	@ (800912c <ff_convert+0x74>)
 80090e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090e6:	e000      	b.n	80090ea <ff_convert+0x32>
 80090e8:	2300      	movs	r3, #0
 80090ea:	81fb      	strh	r3, [r7, #14]
 80090ec:	e016      	b.n	800911c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80090ee:	2300      	movs	r3, #0
 80090f0:	81fb      	strh	r3, [r7, #14]
 80090f2:	e009      	b.n	8009108 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80090f4:	89fb      	ldrh	r3, [r7, #14]
 80090f6:	4a0d      	ldr	r2, [pc, #52]	@ (800912c <ff_convert+0x74>)
 80090f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090fc:	88fa      	ldrh	r2, [r7, #6]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d006      	beq.n	8009110 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009102:	89fb      	ldrh	r3, [r7, #14]
 8009104:	3301      	adds	r3, #1
 8009106:	81fb      	strh	r3, [r7, #14]
 8009108:	89fb      	ldrh	r3, [r7, #14]
 800910a:	2b7f      	cmp	r3, #127	@ 0x7f
 800910c:	d9f2      	bls.n	80090f4 <ff_convert+0x3c>
 800910e:	e000      	b.n	8009112 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009110:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009112:	89fb      	ldrh	r3, [r7, #14]
 8009114:	3380      	adds	r3, #128	@ 0x80
 8009116:	b29b      	uxth	r3, r3
 8009118:	b2db      	uxtb	r3, r3
 800911a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800911c:	89fb      	ldrh	r3, [r7, #14]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3714      	adds	r7, #20
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	0800a464 	.word	0x0800a464

08009130 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009130:	b480      	push	{r7}
 8009132:	b087      	sub	sp, #28
 8009134:	af00      	add	r7, sp, #0
 8009136:	4603      	mov	r3, r0
 8009138:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800913a:	88fb      	ldrh	r3, [r7, #6]
 800913c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009140:	d201      	bcs.n	8009146 <ff_wtoupper+0x16>
 8009142:	4b3e      	ldr	r3, [pc, #248]	@ (800923c <ff_wtoupper+0x10c>)
 8009144:	e000      	b.n	8009148 <ff_wtoupper+0x18>
 8009146:	4b3e      	ldr	r3, [pc, #248]	@ (8009240 <ff_wtoupper+0x110>)
 8009148:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	1c9a      	adds	r2, r3, #2
 800914e:	617a      	str	r2, [r7, #20]
 8009150:	881b      	ldrh	r3, [r3, #0]
 8009152:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009154:	8a7b      	ldrh	r3, [r7, #18]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d068      	beq.n	800922c <ff_wtoupper+0xfc>
 800915a:	88fa      	ldrh	r2, [r7, #6]
 800915c:	8a7b      	ldrh	r3, [r7, #18]
 800915e:	429a      	cmp	r2, r3
 8009160:	d364      	bcc.n	800922c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	1c9a      	adds	r2, r3, #2
 8009166:	617a      	str	r2, [r7, #20]
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	823b      	strh	r3, [r7, #16]
 800916c:	8a3b      	ldrh	r3, [r7, #16]
 800916e:	0a1b      	lsrs	r3, r3, #8
 8009170:	81fb      	strh	r3, [r7, #14]
 8009172:	8a3b      	ldrh	r3, [r7, #16]
 8009174:	b2db      	uxtb	r3, r3
 8009176:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009178:	88fa      	ldrh	r2, [r7, #6]
 800917a:	8a79      	ldrh	r1, [r7, #18]
 800917c:	8a3b      	ldrh	r3, [r7, #16]
 800917e:	440b      	add	r3, r1
 8009180:	429a      	cmp	r2, r3
 8009182:	da49      	bge.n	8009218 <ff_wtoupper+0xe8>
			switch (cmd) {
 8009184:	89fb      	ldrh	r3, [r7, #14]
 8009186:	2b08      	cmp	r3, #8
 8009188:	d84f      	bhi.n	800922a <ff_wtoupper+0xfa>
 800918a:	a201      	add	r2, pc, #4	@ (adr r2, 8009190 <ff_wtoupper+0x60>)
 800918c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009190:	080091b5 	.word	0x080091b5
 8009194:	080091c7 	.word	0x080091c7
 8009198:	080091dd 	.word	0x080091dd
 800919c:	080091e5 	.word	0x080091e5
 80091a0:	080091ed 	.word	0x080091ed
 80091a4:	080091f5 	.word	0x080091f5
 80091a8:	080091fd 	.word	0x080091fd
 80091ac:	08009205 	.word	0x08009205
 80091b0:	0800920d 	.word	0x0800920d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80091b4:	88fa      	ldrh	r2, [r7, #6]
 80091b6:	8a7b      	ldrh	r3, [r7, #18]
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	005b      	lsls	r3, r3, #1
 80091bc:	697a      	ldr	r2, [r7, #20]
 80091be:	4413      	add	r3, r2
 80091c0:	881b      	ldrh	r3, [r3, #0]
 80091c2:	80fb      	strh	r3, [r7, #6]
 80091c4:	e027      	b.n	8009216 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80091c6:	88fa      	ldrh	r2, [r7, #6]
 80091c8:	8a7b      	ldrh	r3, [r7, #18]
 80091ca:	1ad3      	subs	r3, r2, r3
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	f003 0301 	and.w	r3, r3, #1
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	88fa      	ldrh	r2, [r7, #6]
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	80fb      	strh	r3, [r7, #6]
 80091da:	e01c      	b.n	8009216 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80091dc:	88fb      	ldrh	r3, [r7, #6]
 80091de:	3b10      	subs	r3, #16
 80091e0:	80fb      	strh	r3, [r7, #6]
 80091e2:	e018      	b.n	8009216 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80091e4:	88fb      	ldrh	r3, [r7, #6]
 80091e6:	3b20      	subs	r3, #32
 80091e8:	80fb      	strh	r3, [r7, #6]
 80091ea:	e014      	b.n	8009216 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80091ec:	88fb      	ldrh	r3, [r7, #6]
 80091ee:	3b30      	subs	r3, #48	@ 0x30
 80091f0:	80fb      	strh	r3, [r7, #6]
 80091f2:	e010      	b.n	8009216 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80091f4:	88fb      	ldrh	r3, [r7, #6]
 80091f6:	3b1a      	subs	r3, #26
 80091f8:	80fb      	strh	r3, [r7, #6]
 80091fa:	e00c      	b.n	8009216 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80091fc:	88fb      	ldrh	r3, [r7, #6]
 80091fe:	3308      	adds	r3, #8
 8009200:	80fb      	strh	r3, [r7, #6]
 8009202:	e008      	b.n	8009216 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009204:	88fb      	ldrh	r3, [r7, #6]
 8009206:	3b50      	subs	r3, #80	@ 0x50
 8009208:	80fb      	strh	r3, [r7, #6]
 800920a:	e004      	b.n	8009216 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800920c:	88fb      	ldrh	r3, [r7, #6]
 800920e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8009212:	80fb      	strh	r3, [r7, #6]
 8009214:	bf00      	nop
			}
			break;
 8009216:	e008      	b.n	800922a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009218:	89fb      	ldrh	r3, [r7, #14]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d195      	bne.n	800914a <ff_wtoupper+0x1a>
 800921e:	8a3b      	ldrh	r3, [r7, #16]
 8009220:	005b      	lsls	r3, r3, #1
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	4413      	add	r3, r2
 8009226:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009228:	e78f      	b.n	800914a <ff_wtoupper+0x1a>
			break;
 800922a:	bf00      	nop
	}

	return chr;
 800922c:	88fb      	ldrh	r3, [r7, #6]
}
 800922e:	4618      	mov	r0, r3
 8009230:	371c      	adds	r7, #28
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	0800a564 	.word	0x0800a564
 8009240:	0800a758 	.word	0x0800a758

08009244 <std>:
 8009244:	2300      	movs	r3, #0
 8009246:	b510      	push	{r4, lr}
 8009248:	4604      	mov	r4, r0
 800924a:	e9c0 3300 	strd	r3, r3, [r0]
 800924e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009252:	6083      	str	r3, [r0, #8]
 8009254:	8181      	strh	r1, [r0, #12]
 8009256:	6643      	str	r3, [r0, #100]	@ 0x64
 8009258:	81c2      	strh	r2, [r0, #14]
 800925a:	6183      	str	r3, [r0, #24]
 800925c:	4619      	mov	r1, r3
 800925e:	2208      	movs	r2, #8
 8009260:	305c      	adds	r0, #92	@ 0x5c
 8009262:	f000 f921 	bl	80094a8 <memset>
 8009266:	4b0d      	ldr	r3, [pc, #52]	@ (800929c <std+0x58>)
 8009268:	6263      	str	r3, [r4, #36]	@ 0x24
 800926a:	4b0d      	ldr	r3, [pc, #52]	@ (80092a0 <std+0x5c>)
 800926c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800926e:	4b0d      	ldr	r3, [pc, #52]	@ (80092a4 <std+0x60>)
 8009270:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009272:	4b0d      	ldr	r3, [pc, #52]	@ (80092a8 <std+0x64>)
 8009274:	6323      	str	r3, [r4, #48]	@ 0x30
 8009276:	4b0d      	ldr	r3, [pc, #52]	@ (80092ac <std+0x68>)
 8009278:	6224      	str	r4, [r4, #32]
 800927a:	429c      	cmp	r4, r3
 800927c:	d006      	beq.n	800928c <std+0x48>
 800927e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009282:	4294      	cmp	r4, r2
 8009284:	d002      	beq.n	800928c <std+0x48>
 8009286:	33d0      	adds	r3, #208	@ 0xd0
 8009288:	429c      	cmp	r4, r3
 800928a:	d105      	bne.n	8009298 <std+0x54>
 800928c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009294:	f000 b93a 	b.w	800950c <__retarget_lock_init_recursive>
 8009298:	bd10      	pop	{r4, pc}
 800929a:	bf00      	nop
 800929c:	08009d65 	.word	0x08009d65
 80092a0:	08009d87 	.word	0x08009d87
 80092a4:	08009dbf 	.word	0x08009dbf
 80092a8:	08009de3 	.word	0x08009de3
 80092ac:	20004ca8 	.word	0x20004ca8

080092b0 <stdio_exit_handler>:
 80092b0:	4a02      	ldr	r2, [pc, #8]	@ (80092bc <stdio_exit_handler+0xc>)
 80092b2:	4903      	ldr	r1, [pc, #12]	@ (80092c0 <stdio_exit_handler+0x10>)
 80092b4:	4803      	ldr	r0, [pc, #12]	@ (80092c4 <stdio_exit_handler+0x14>)
 80092b6:	f000 b869 	b.w	800938c <_fwalk_sglue>
 80092ba:	bf00      	nop
 80092bc:	20000054 	.word	0x20000054
 80092c0:	08009cfd 	.word	0x08009cfd
 80092c4:	20000064 	.word	0x20000064

080092c8 <cleanup_stdio>:
 80092c8:	6841      	ldr	r1, [r0, #4]
 80092ca:	4b0c      	ldr	r3, [pc, #48]	@ (80092fc <cleanup_stdio+0x34>)
 80092cc:	4299      	cmp	r1, r3
 80092ce:	b510      	push	{r4, lr}
 80092d0:	4604      	mov	r4, r0
 80092d2:	d001      	beq.n	80092d8 <cleanup_stdio+0x10>
 80092d4:	f000 fd12 	bl	8009cfc <_fflush_r>
 80092d8:	68a1      	ldr	r1, [r4, #8]
 80092da:	4b09      	ldr	r3, [pc, #36]	@ (8009300 <cleanup_stdio+0x38>)
 80092dc:	4299      	cmp	r1, r3
 80092de:	d002      	beq.n	80092e6 <cleanup_stdio+0x1e>
 80092e0:	4620      	mov	r0, r4
 80092e2:	f000 fd0b 	bl	8009cfc <_fflush_r>
 80092e6:	68e1      	ldr	r1, [r4, #12]
 80092e8:	4b06      	ldr	r3, [pc, #24]	@ (8009304 <cleanup_stdio+0x3c>)
 80092ea:	4299      	cmp	r1, r3
 80092ec:	d004      	beq.n	80092f8 <cleanup_stdio+0x30>
 80092ee:	4620      	mov	r0, r4
 80092f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092f4:	f000 bd02 	b.w	8009cfc <_fflush_r>
 80092f8:	bd10      	pop	{r4, pc}
 80092fa:	bf00      	nop
 80092fc:	20004ca8 	.word	0x20004ca8
 8009300:	20004d10 	.word	0x20004d10
 8009304:	20004d78 	.word	0x20004d78

08009308 <global_stdio_init.part.0>:
 8009308:	b510      	push	{r4, lr}
 800930a:	4b0b      	ldr	r3, [pc, #44]	@ (8009338 <global_stdio_init.part.0+0x30>)
 800930c:	4c0b      	ldr	r4, [pc, #44]	@ (800933c <global_stdio_init.part.0+0x34>)
 800930e:	4a0c      	ldr	r2, [pc, #48]	@ (8009340 <global_stdio_init.part.0+0x38>)
 8009310:	601a      	str	r2, [r3, #0]
 8009312:	4620      	mov	r0, r4
 8009314:	2200      	movs	r2, #0
 8009316:	2104      	movs	r1, #4
 8009318:	f7ff ff94 	bl	8009244 <std>
 800931c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009320:	2201      	movs	r2, #1
 8009322:	2109      	movs	r1, #9
 8009324:	f7ff ff8e 	bl	8009244 <std>
 8009328:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800932c:	2202      	movs	r2, #2
 800932e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009332:	2112      	movs	r1, #18
 8009334:	f7ff bf86 	b.w	8009244 <std>
 8009338:	20004de0 	.word	0x20004de0
 800933c:	20004ca8 	.word	0x20004ca8
 8009340:	080092b1 	.word	0x080092b1

08009344 <__sfp_lock_acquire>:
 8009344:	4801      	ldr	r0, [pc, #4]	@ (800934c <__sfp_lock_acquire+0x8>)
 8009346:	f000 b8e2 	b.w	800950e <__retarget_lock_acquire_recursive>
 800934a:	bf00      	nop
 800934c:	20004de5 	.word	0x20004de5

08009350 <__sfp_lock_release>:
 8009350:	4801      	ldr	r0, [pc, #4]	@ (8009358 <__sfp_lock_release+0x8>)
 8009352:	f000 b8dd 	b.w	8009510 <__retarget_lock_release_recursive>
 8009356:	bf00      	nop
 8009358:	20004de5 	.word	0x20004de5

0800935c <__sinit>:
 800935c:	b510      	push	{r4, lr}
 800935e:	4604      	mov	r4, r0
 8009360:	f7ff fff0 	bl	8009344 <__sfp_lock_acquire>
 8009364:	6a23      	ldr	r3, [r4, #32]
 8009366:	b11b      	cbz	r3, 8009370 <__sinit+0x14>
 8009368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800936c:	f7ff bff0 	b.w	8009350 <__sfp_lock_release>
 8009370:	4b04      	ldr	r3, [pc, #16]	@ (8009384 <__sinit+0x28>)
 8009372:	6223      	str	r3, [r4, #32]
 8009374:	4b04      	ldr	r3, [pc, #16]	@ (8009388 <__sinit+0x2c>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1f5      	bne.n	8009368 <__sinit+0xc>
 800937c:	f7ff ffc4 	bl	8009308 <global_stdio_init.part.0>
 8009380:	e7f2      	b.n	8009368 <__sinit+0xc>
 8009382:	bf00      	nop
 8009384:	080092c9 	.word	0x080092c9
 8009388:	20004de0 	.word	0x20004de0

0800938c <_fwalk_sglue>:
 800938c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009390:	4607      	mov	r7, r0
 8009392:	4688      	mov	r8, r1
 8009394:	4614      	mov	r4, r2
 8009396:	2600      	movs	r6, #0
 8009398:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800939c:	f1b9 0901 	subs.w	r9, r9, #1
 80093a0:	d505      	bpl.n	80093ae <_fwalk_sglue+0x22>
 80093a2:	6824      	ldr	r4, [r4, #0]
 80093a4:	2c00      	cmp	r4, #0
 80093a6:	d1f7      	bne.n	8009398 <_fwalk_sglue+0xc>
 80093a8:	4630      	mov	r0, r6
 80093aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ae:	89ab      	ldrh	r3, [r5, #12]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d907      	bls.n	80093c4 <_fwalk_sglue+0x38>
 80093b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093b8:	3301      	adds	r3, #1
 80093ba:	d003      	beq.n	80093c4 <_fwalk_sglue+0x38>
 80093bc:	4629      	mov	r1, r5
 80093be:	4638      	mov	r0, r7
 80093c0:	47c0      	blx	r8
 80093c2:	4306      	orrs	r6, r0
 80093c4:	3568      	adds	r5, #104	@ 0x68
 80093c6:	e7e9      	b.n	800939c <_fwalk_sglue+0x10>

080093c8 <iprintf>:
 80093c8:	b40f      	push	{r0, r1, r2, r3}
 80093ca:	b507      	push	{r0, r1, r2, lr}
 80093cc:	4906      	ldr	r1, [pc, #24]	@ (80093e8 <iprintf+0x20>)
 80093ce:	ab04      	add	r3, sp, #16
 80093d0:	6808      	ldr	r0, [r1, #0]
 80093d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80093d6:	6881      	ldr	r1, [r0, #8]
 80093d8:	9301      	str	r3, [sp, #4]
 80093da:	f000 f8c3 	bl	8009564 <_vfiprintf_r>
 80093de:	b003      	add	sp, #12
 80093e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80093e4:	b004      	add	sp, #16
 80093e6:	4770      	bx	lr
 80093e8:	20000060 	.word	0x20000060

080093ec <_puts_r>:
 80093ec:	6a03      	ldr	r3, [r0, #32]
 80093ee:	b570      	push	{r4, r5, r6, lr}
 80093f0:	6884      	ldr	r4, [r0, #8]
 80093f2:	4605      	mov	r5, r0
 80093f4:	460e      	mov	r6, r1
 80093f6:	b90b      	cbnz	r3, 80093fc <_puts_r+0x10>
 80093f8:	f7ff ffb0 	bl	800935c <__sinit>
 80093fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093fe:	07db      	lsls	r3, r3, #31
 8009400:	d405      	bmi.n	800940e <_puts_r+0x22>
 8009402:	89a3      	ldrh	r3, [r4, #12]
 8009404:	0598      	lsls	r0, r3, #22
 8009406:	d402      	bmi.n	800940e <_puts_r+0x22>
 8009408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800940a:	f000 f880 	bl	800950e <__retarget_lock_acquire_recursive>
 800940e:	89a3      	ldrh	r3, [r4, #12]
 8009410:	0719      	lsls	r1, r3, #28
 8009412:	d502      	bpl.n	800941a <_puts_r+0x2e>
 8009414:	6923      	ldr	r3, [r4, #16]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d135      	bne.n	8009486 <_puts_r+0x9a>
 800941a:	4621      	mov	r1, r4
 800941c:	4628      	mov	r0, r5
 800941e:	f000 fd23 	bl	8009e68 <__swsetup_r>
 8009422:	b380      	cbz	r0, 8009486 <_puts_r+0x9a>
 8009424:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009428:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800942a:	07da      	lsls	r2, r3, #31
 800942c:	d405      	bmi.n	800943a <_puts_r+0x4e>
 800942e:	89a3      	ldrh	r3, [r4, #12]
 8009430:	059b      	lsls	r3, r3, #22
 8009432:	d402      	bmi.n	800943a <_puts_r+0x4e>
 8009434:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009436:	f000 f86b 	bl	8009510 <__retarget_lock_release_recursive>
 800943a:	4628      	mov	r0, r5
 800943c:	bd70      	pop	{r4, r5, r6, pc}
 800943e:	2b00      	cmp	r3, #0
 8009440:	da04      	bge.n	800944c <_puts_r+0x60>
 8009442:	69a2      	ldr	r2, [r4, #24]
 8009444:	429a      	cmp	r2, r3
 8009446:	dc17      	bgt.n	8009478 <_puts_r+0x8c>
 8009448:	290a      	cmp	r1, #10
 800944a:	d015      	beq.n	8009478 <_puts_r+0x8c>
 800944c:	6823      	ldr	r3, [r4, #0]
 800944e:	1c5a      	adds	r2, r3, #1
 8009450:	6022      	str	r2, [r4, #0]
 8009452:	7019      	strb	r1, [r3, #0]
 8009454:	68a3      	ldr	r3, [r4, #8]
 8009456:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800945a:	3b01      	subs	r3, #1
 800945c:	60a3      	str	r3, [r4, #8]
 800945e:	2900      	cmp	r1, #0
 8009460:	d1ed      	bne.n	800943e <_puts_r+0x52>
 8009462:	2b00      	cmp	r3, #0
 8009464:	da11      	bge.n	800948a <_puts_r+0x9e>
 8009466:	4622      	mov	r2, r4
 8009468:	210a      	movs	r1, #10
 800946a:	4628      	mov	r0, r5
 800946c:	f000 fcbd 	bl	8009dea <__swbuf_r>
 8009470:	3001      	adds	r0, #1
 8009472:	d0d7      	beq.n	8009424 <_puts_r+0x38>
 8009474:	250a      	movs	r5, #10
 8009476:	e7d7      	b.n	8009428 <_puts_r+0x3c>
 8009478:	4622      	mov	r2, r4
 800947a:	4628      	mov	r0, r5
 800947c:	f000 fcb5 	bl	8009dea <__swbuf_r>
 8009480:	3001      	adds	r0, #1
 8009482:	d1e7      	bne.n	8009454 <_puts_r+0x68>
 8009484:	e7ce      	b.n	8009424 <_puts_r+0x38>
 8009486:	3e01      	subs	r6, #1
 8009488:	e7e4      	b.n	8009454 <_puts_r+0x68>
 800948a:	6823      	ldr	r3, [r4, #0]
 800948c:	1c5a      	adds	r2, r3, #1
 800948e:	6022      	str	r2, [r4, #0]
 8009490:	220a      	movs	r2, #10
 8009492:	701a      	strb	r2, [r3, #0]
 8009494:	e7ee      	b.n	8009474 <_puts_r+0x88>
	...

08009498 <puts>:
 8009498:	4b02      	ldr	r3, [pc, #8]	@ (80094a4 <puts+0xc>)
 800949a:	4601      	mov	r1, r0
 800949c:	6818      	ldr	r0, [r3, #0]
 800949e:	f7ff bfa5 	b.w	80093ec <_puts_r>
 80094a2:	bf00      	nop
 80094a4:	20000060 	.word	0x20000060

080094a8 <memset>:
 80094a8:	4402      	add	r2, r0
 80094aa:	4603      	mov	r3, r0
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d100      	bne.n	80094b2 <memset+0xa>
 80094b0:	4770      	bx	lr
 80094b2:	f803 1b01 	strb.w	r1, [r3], #1
 80094b6:	e7f9      	b.n	80094ac <memset+0x4>

080094b8 <__errno>:
 80094b8:	4b01      	ldr	r3, [pc, #4]	@ (80094c0 <__errno+0x8>)
 80094ba:	6818      	ldr	r0, [r3, #0]
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	20000060 	.word	0x20000060

080094c4 <__libc_init_array>:
 80094c4:	b570      	push	{r4, r5, r6, lr}
 80094c6:	4d0d      	ldr	r5, [pc, #52]	@ (80094fc <__libc_init_array+0x38>)
 80094c8:	4c0d      	ldr	r4, [pc, #52]	@ (8009500 <__libc_init_array+0x3c>)
 80094ca:	1b64      	subs	r4, r4, r5
 80094cc:	10a4      	asrs	r4, r4, #2
 80094ce:	2600      	movs	r6, #0
 80094d0:	42a6      	cmp	r6, r4
 80094d2:	d109      	bne.n	80094e8 <__libc_init_array+0x24>
 80094d4:	4d0b      	ldr	r5, [pc, #44]	@ (8009504 <__libc_init_array+0x40>)
 80094d6:	4c0c      	ldr	r4, [pc, #48]	@ (8009508 <__libc_init_array+0x44>)
 80094d8:	f000 fe40 	bl	800a15c <_init>
 80094dc:	1b64      	subs	r4, r4, r5
 80094de:	10a4      	asrs	r4, r4, #2
 80094e0:	2600      	movs	r6, #0
 80094e2:	42a6      	cmp	r6, r4
 80094e4:	d105      	bne.n	80094f2 <__libc_init_array+0x2e>
 80094e6:	bd70      	pop	{r4, r5, r6, pc}
 80094e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ec:	4798      	blx	r3
 80094ee:	3601      	adds	r6, #1
 80094f0:	e7ee      	b.n	80094d0 <__libc_init_array+0xc>
 80094f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094f6:	4798      	blx	r3
 80094f8:	3601      	adds	r6, #1
 80094fa:	e7f2      	b.n	80094e2 <__libc_init_array+0x1e>
 80094fc:	0800a850 	.word	0x0800a850
 8009500:	0800a850 	.word	0x0800a850
 8009504:	0800a850 	.word	0x0800a850
 8009508:	0800a854 	.word	0x0800a854

0800950c <__retarget_lock_init_recursive>:
 800950c:	4770      	bx	lr

0800950e <__retarget_lock_acquire_recursive>:
 800950e:	4770      	bx	lr

08009510 <__retarget_lock_release_recursive>:
 8009510:	4770      	bx	lr

08009512 <__sfputc_r>:
 8009512:	6893      	ldr	r3, [r2, #8]
 8009514:	3b01      	subs	r3, #1
 8009516:	2b00      	cmp	r3, #0
 8009518:	b410      	push	{r4}
 800951a:	6093      	str	r3, [r2, #8]
 800951c:	da08      	bge.n	8009530 <__sfputc_r+0x1e>
 800951e:	6994      	ldr	r4, [r2, #24]
 8009520:	42a3      	cmp	r3, r4
 8009522:	db01      	blt.n	8009528 <__sfputc_r+0x16>
 8009524:	290a      	cmp	r1, #10
 8009526:	d103      	bne.n	8009530 <__sfputc_r+0x1e>
 8009528:	f85d 4b04 	ldr.w	r4, [sp], #4
 800952c:	f000 bc5d 	b.w	8009dea <__swbuf_r>
 8009530:	6813      	ldr	r3, [r2, #0]
 8009532:	1c58      	adds	r0, r3, #1
 8009534:	6010      	str	r0, [r2, #0]
 8009536:	7019      	strb	r1, [r3, #0]
 8009538:	4608      	mov	r0, r1
 800953a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800953e:	4770      	bx	lr

08009540 <__sfputs_r>:
 8009540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009542:	4606      	mov	r6, r0
 8009544:	460f      	mov	r7, r1
 8009546:	4614      	mov	r4, r2
 8009548:	18d5      	adds	r5, r2, r3
 800954a:	42ac      	cmp	r4, r5
 800954c:	d101      	bne.n	8009552 <__sfputs_r+0x12>
 800954e:	2000      	movs	r0, #0
 8009550:	e007      	b.n	8009562 <__sfputs_r+0x22>
 8009552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009556:	463a      	mov	r2, r7
 8009558:	4630      	mov	r0, r6
 800955a:	f7ff ffda 	bl	8009512 <__sfputc_r>
 800955e:	1c43      	adds	r3, r0, #1
 8009560:	d1f3      	bne.n	800954a <__sfputs_r+0xa>
 8009562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009564 <_vfiprintf_r>:
 8009564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009568:	460d      	mov	r5, r1
 800956a:	b09d      	sub	sp, #116	@ 0x74
 800956c:	4614      	mov	r4, r2
 800956e:	4698      	mov	r8, r3
 8009570:	4606      	mov	r6, r0
 8009572:	b118      	cbz	r0, 800957c <_vfiprintf_r+0x18>
 8009574:	6a03      	ldr	r3, [r0, #32]
 8009576:	b90b      	cbnz	r3, 800957c <_vfiprintf_r+0x18>
 8009578:	f7ff fef0 	bl	800935c <__sinit>
 800957c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800957e:	07d9      	lsls	r1, r3, #31
 8009580:	d405      	bmi.n	800958e <_vfiprintf_r+0x2a>
 8009582:	89ab      	ldrh	r3, [r5, #12]
 8009584:	059a      	lsls	r2, r3, #22
 8009586:	d402      	bmi.n	800958e <_vfiprintf_r+0x2a>
 8009588:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800958a:	f7ff ffc0 	bl	800950e <__retarget_lock_acquire_recursive>
 800958e:	89ab      	ldrh	r3, [r5, #12]
 8009590:	071b      	lsls	r3, r3, #28
 8009592:	d501      	bpl.n	8009598 <_vfiprintf_r+0x34>
 8009594:	692b      	ldr	r3, [r5, #16]
 8009596:	b99b      	cbnz	r3, 80095c0 <_vfiprintf_r+0x5c>
 8009598:	4629      	mov	r1, r5
 800959a:	4630      	mov	r0, r6
 800959c:	f000 fc64 	bl	8009e68 <__swsetup_r>
 80095a0:	b170      	cbz	r0, 80095c0 <_vfiprintf_r+0x5c>
 80095a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095a4:	07dc      	lsls	r4, r3, #31
 80095a6:	d504      	bpl.n	80095b2 <_vfiprintf_r+0x4e>
 80095a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80095ac:	b01d      	add	sp, #116	@ 0x74
 80095ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b2:	89ab      	ldrh	r3, [r5, #12]
 80095b4:	0598      	lsls	r0, r3, #22
 80095b6:	d4f7      	bmi.n	80095a8 <_vfiprintf_r+0x44>
 80095b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095ba:	f7ff ffa9 	bl	8009510 <__retarget_lock_release_recursive>
 80095be:	e7f3      	b.n	80095a8 <_vfiprintf_r+0x44>
 80095c0:	2300      	movs	r3, #0
 80095c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80095c4:	2320      	movs	r3, #32
 80095c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80095ce:	2330      	movs	r3, #48	@ 0x30
 80095d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009780 <_vfiprintf_r+0x21c>
 80095d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095d8:	f04f 0901 	mov.w	r9, #1
 80095dc:	4623      	mov	r3, r4
 80095de:	469a      	mov	sl, r3
 80095e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095e4:	b10a      	cbz	r2, 80095ea <_vfiprintf_r+0x86>
 80095e6:	2a25      	cmp	r2, #37	@ 0x25
 80095e8:	d1f9      	bne.n	80095de <_vfiprintf_r+0x7a>
 80095ea:	ebba 0b04 	subs.w	fp, sl, r4
 80095ee:	d00b      	beq.n	8009608 <_vfiprintf_r+0xa4>
 80095f0:	465b      	mov	r3, fp
 80095f2:	4622      	mov	r2, r4
 80095f4:	4629      	mov	r1, r5
 80095f6:	4630      	mov	r0, r6
 80095f8:	f7ff ffa2 	bl	8009540 <__sfputs_r>
 80095fc:	3001      	adds	r0, #1
 80095fe:	f000 80a7 	beq.w	8009750 <_vfiprintf_r+0x1ec>
 8009602:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009604:	445a      	add	r2, fp
 8009606:	9209      	str	r2, [sp, #36]	@ 0x24
 8009608:	f89a 3000 	ldrb.w	r3, [sl]
 800960c:	2b00      	cmp	r3, #0
 800960e:	f000 809f 	beq.w	8009750 <_vfiprintf_r+0x1ec>
 8009612:	2300      	movs	r3, #0
 8009614:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009618:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800961c:	f10a 0a01 	add.w	sl, sl, #1
 8009620:	9304      	str	r3, [sp, #16]
 8009622:	9307      	str	r3, [sp, #28]
 8009624:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009628:	931a      	str	r3, [sp, #104]	@ 0x68
 800962a:	4654      	mov	r4, sl
 800962c:	2205      	movs	r2, #5
 800962e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009632:	4853      	ldr	r0, [pc, #332]	@ (8009780 <_vfiprintf_r+0x21c>)
 8009634:	f7f6 fdcc 	bl	80001d0 <memchr>
 8009638:	9a04      	ldr	r2, [sp, #16]
 800963a:	b9d8      	cbnz	r0, 8009674 <_vfiprintf_r+0x110>
 800963c:	06d1      	lsls	r1, r2, #27
 800963e:	bf44      	itt	mi
 8009640:	2320      	movmi	r3, #32
 8009642:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009646:	0713      	lsls	r3, r2, #28
 8009648:	bf44      	itt	mi
 800964a:	232b      	movmi	r3, #43	@ 0x2b
 800964c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009650:	f89a 3000 	ldrb.w	r3, [sl]
 8009654:	2b2a      	cmp	r3, #42	@ 0x2a
 8009656:	d015      	beq.n	8009684 <_vfiprintf_r+0x120>
 8009658:	9a07      	ldr	r2, [sp, #28]
 800965a:	4654      	mov	r4, sl
 800965c:	2000      	movs	r0, #0
 800965e:	f04f 0c0a 	mov.w	ip, #10
 8009662:	4621      	mov	r1, r4
 8009664:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009668:	3b30      	subs	r3, #48	@ 0x30
 800966a:	2b09      	cmp	r3, #9
 800966c:	d94b      	bls.n	8009706 <_vfiprintf_r+0x1a2>
 800966e:	b1b0      	cbz	r0, 800969e <_vfiprintf_r+0x13a>
 8009670:	9207      	str	r2, [sp, #28]
 8009672:	e014      	b.n	800969e <_vfiprintf_r+0x13a>
 8009674:	eba0 0308 	sub.w	r3, r0, r8
 8009678:	fa09 f303 	lsl.w	r3, r9, r3
 800967c:	4313      	orrs	r3, r2
 800967e:	9304      	str	r3, [sp, #16]
 8009680:	46a2      	mov	sl, r4
 8009682:	e7d2      	b.n	800962a <_vfiprintf_r+0xc6>
 8009684:	9b03      	ldr	r3, [sp, #12]
 8009686:	1d19      	adds	r1, r3, #4
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	9103      	str	r1, [sp, #12]
 800968c:	2b00      	cmp	r3, #0
 800968e:	bfbb      	ittet	lt
 8009690:	425b      	neglt	r3, r3
 8009692:	f042 0202 	orrlt.w	r2, r2, #2
 8009696:	9307      	strge	r3, [sp, #28]
 8009698:	9307      	strlt	r3, [sp, #28]
 800969a:	bfb8      	it	lt
 800969c:	9204      	strlt	r2, [sp, #16]
 800969e:	7823      	ldrb	r3, [r4, #0]
 80096a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80096a2:	d10a      	bne.n	80096ba <_vfiprintf_r+0x156>
 80096a4:	7863      	ldrb	r3, [r4, #1]
 80096a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80096a8:	d132      	bne.n	8009710 <_vfiprintf_r+0x1ac>
 80096aa:	9b03      	ldr	r3, [sp, #12]
 80096ac:	1d1a      	adds	r2, r3, #4
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	9203      	str	r2, [sp, #12]
 80096b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096b6:	3402      	adds	r4, #2
 80096b8:	9305      	str	r3, [sp, #20]
 80096ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009790 <_vfiprintf_r+0x22c>
 80096be:	7821      	ldrb	r1, [r4, #0]
 80096c0:	2203      	movs	r2, #3
 80096c2:	4650      	mov	r0, sl
 80096c4:	f7f6 fd84 	bl	80001d0 <memchr>
 80096c8:	b138      	cbz	r0, 80096da <_vfiprintf_r+0x176>
 80096ca:	9b04      	ldr	r3, [sp, #16]
 80096cc:	eba0 000a 	sub.w	r0, r0, sl
 80096d0:	2240      	movs	r2, #64	@ 0x40
 80096d2:	4082      	lsls	r2, r0
 80096d4:	4313      	orrs	r3, r2
 80096d6:	3401      	adds	r4, #1
 80096d8:	9304      	str	r3, [sp, #16]
 80096da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096de:	4829      	ldr	r0, [pc, #164]	@ (8009784 <_vfiprintf_r+0x220>)
 80096e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096e4:	2206      	movs	r2, #6
 80096e6:	f7f6 fd73 	bl	80001d0 <memchr>
 80096ea:	2800      	cmp	r0, #0
 80096ec:	d03f      	beq.n	800976e <_vfiprintf_r+0x20a>
 80096ee:	4b26      	ldr	r3, [pc, #152]	@ (8009788 <_vfiprintf_r+0x224>)
 80096f0:	bb1b      	cbnz	r3, 800973a <_vfiprintf_r+0x1d6>
 80096f2:	9b03      	ldr	r3, [sp, #12]
 80096f4:	3307      	adds	r3, #7
 80096f6:	f023 0307 	bic.w	r3, r3, #7
 80096fa:	3308      	adds	r3, #8
 80096fc:	9303      	str	r3, [sp, #12]
 80096fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009700:	443b      	add	r3, r7
 8009702:	9309      	str	r3, [sp, #36]	@ 0x24
 8009704:	e76a      	b.n	80095dc <_vfiprintf_r+0x78>
 8009706:	fb0c 3202 	mla	r2, ip, r2, r3
 800970a:	460c      	mov	r4, r1
 800970c:	2001      	movs	r0, #1
 800970e:	e7a8      	b.n	8009662 <_vfiprintf_r+0xfe>
 8009710:	2300      	movs	r3, #0
 8009712:	3401      	adds	r4, #1
 8009714:	9305      	str	r3, [sp, #20]
 8009716:	4619      	mov	r1, r3
 8009718:	f04f 0c0a 	mov.w	ip, #10
 800971c:	4620      	mov	r0, r4
 800971e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009722:	3a30      	subs	r2, #48	@ 0x30
 8009724:	2a09      	cmp	r2, #9
 8009726:	d903      	bls.n	8009730 <_vfiprintf_r+0x1cc>
 8009728:	2b00      	cmp	r3, #0
 800972a:	d0c6      	beq.n	80096ba <_vfiprintf_r+0x156>
 800972c:	9105      	str	r1, [sp, #20]
 800972e:	e7c4      	b.n	80096ba <_vfiprintf_r+0x156>
 8009730:	fb0c 2101 	mla	r1, ip, r1, r2
 8009734:	4604      	mov	r4, r0
 8009736:	2301      	movs	r3, #1
 8009738:	e7f0      	b.n	800971c <_vfiprintf_r+0x1b8>
 800973a:	ab03      	add	r3, sp, #12
 800973c:	9300      	str	r3, [sp, #0]
 800973e:	462a      	mov	r2, r5
 8009740:	4b12      	ldr	r3, [pc, #72]	@ (800978c <_vfiprintf_r+0x228>)
 8009742:	a904      	add	r1, sp, #16
 8009744:	4630      	mov	r0, r6
 8009746:	f3af 8000 	nop.w
 800974a:	4607      	mov	r7, r0
 800974c:	1c78      	adds	r0, r7, #1
 800974e:	d1d6      	bne.n	80096fe <_vfiprintf_r+0x19a>
 8009750:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009752:	07d9      	lsls	r1, r3, #31
 8009754:	d405      	bmi.n	8009762 <_vfiprintf_r+0x1fe>
 8009756:	89ab      	ldrh	r3, [r5, #12]
 8009758:	059a      	lsls	r2, r3, #22
 800975a:	d402      	bmi.n	8009762 <_vfiprintf_r+0x1fe>
 800975c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800975e:	f7ff fed7 	bl	8009510 <__retarget_lock_release_recursive>
 8009762:	89ab      	ldrh	r3, [r5, #12]
 8009764:	065b      	lsls	r3, r3, #25
 8009766:	f53f af1f 	bmi.w	80095a8 <_vfiprintf_r+0x44>
 800976a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800976c:	e71e      	b.n	80095ac <_vfiprintf_r+0x48>
 800976e:	ab03      	add	r3, sp, #12
 8009770:	9300      	str	r3, [sp, #0]
 8009772:	462a      	mov	r2, r5
 8009774:	4b05      	ldr	r3, [pc, #20]	@ (800978c <_vfiprintf_r+0x228>)
 8009776:	a904      	add	r1, sp, #16
 8009778:	4630      	mov	r0, r6
 800977a:	f000 f91b 	bl	80099b4 <_printf_i>
 800977e:	e7e4      	b.n	800974a <_vfiprintf_r+0x1e6>
 8009780:	0800a814 	.word	0x0800a814
 8009784:	0800a81e 	.word	0x0800a81e
 8009788:	00000000 	.word	0x00000000
 800978c:	08009541 	.word	0x08009541
 8009790:	0800a81a 	.word	0x0800a81a

08009794 <sbrk_aligned>:
 8009794:	b570      	push	{r4, r5, r6, lr}
 8009796:	4e0f      	ldr	r6, [pc, #60]	@ (80097d4 <sbrk_aligned+0x40>)
 8009798:	460c      	mov	r4, r1
 800979a:	6831      	ldr	r1, [r6, #0]
 800979c:	4605      	mov	r5, r0
 800979e:	b911      	cbnz	r1, 80097a6 <sbrk_aligned+0x12>
 80097a0:	f000 fc70 	bl	800a084 <_sbrk_r>
 80097a4:	6030      	str	r0, [r6, #0]
 80097a6:	4621      	mov	r1, r4
 80097a8:	4628      	mov	r0, r5
 80097aa:	f000 fc6b 	bl	800a084 <_sbrk_r>
 80097ae:	1c43      	adds	r3, r0, #1
 80097b0:	d103      	bne.n	80097ba <sbrk_aligned+0x26>
 80097b2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80097b6:	4620      	mov	r0, r4
 80097b8:	bd70      	pop	{r4, r5, r6, pc}
 80097ba:	1cc4      	adds	r4, r0, #3
 80097bc:	f024 0403 	bic.w	r4, r4, #3
 80097c0:	42a0      	cmp	r0, r4
 80097c2:	d0f8      	beq.n	80097b6 <sbrk_aligned+0x22>
 80097c4:	1a21      	subs	r1, r4, r0
 80097c6:	4628      	mov	r0, r5
 80097c8:	f000 fc5c 	bl	800a084 <_sbrk_r>
 80097cc:	3001      	adds	r0, #1
 80097ce:	d1f2      	bne.n	80097b6 <sbrk_aligned+0x22>
 80097d0:	e7ef      	b.n	80097b2 <sbrk_aligned+0x1e>
 80097d2:	bf00      	nop
 80097d4:	20004de8 	.word	0x20004de8

080097d8 <_malloc_r>:
 80097d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097dc:	1ccd      	adds	r5, r1, #3
 80097de:	f025 0503 	bic.w	r5, r5, #3
 80097e2:	3508      	adds	r5, #8
 80097e4:	2d0c      	cmp	r5, #12
 80097e6:	bf38      	it	cc
 80097e8:	250c      	movcc	r5, #12
 80097ea:	2d00      	cmp	r5, #0
 80097ec:	4606      	mov	r6, r0
 80097ee:	db01      	blt.n	80097f4 <_malloc_r+0x1c>
 80097f0:	42a9      	cmp	r1, r5
 80097f2:	d904      	bls.n	80097fe <_malloc_r+0x26>
 80097f4:	230c      	movs	r3, #12
 80097f6:	6033      	str	r3, [r6, #0]
 80097f8:	2000      	movs	r0, #0
 80097fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80098d4 <_malloc_r+0xfc>
 8009802:	f000 faa3 	bl	8009d4c <__malloc_lock>
 8009806:	f8d8 3000 	ldr.w	r3, [r8]
 800980a:	461c      	mov	r4, r3
 800980c:	bb44      	cbnz	r4, 8009860 <_malloc_r+0x88>
 800980e:	4629      	mov	r1, r5
 8009810:	4630      	mov	r0, r6
 8009812:	f7ff ffbf 	bl	8009794 <sbrk_aligned>
 8009816:	1c43      	adds	r3, r0, #1
 8009818:	4604      	mov	r4, r0
 800981a:	d158      	bne.n	80098ce <_malloc_r+0xf6>
 800981c:	f8d8 4000 	ldr.w	r4, [r8]
 8009820:	4627      	mov	r7, r4
 8009822:	2f00      	cmp	r7, #0
 8009824:	d143      	bne.n	80098ae <_malloc_r+0xd6>
 8009826:	2c00      	cmp	r4, #0
 8009828:	d04b      	beq.n	80098c2 <_malloc_r+0xea>
 800982a:	6823      	ldr	r3, [r4, #0]
 800982c:	4639      	mov	r1, r7
 800982e:	4630      	mov	r0, r6
 8009830:	eb04 0903 	add.w	r9, r4, r3
 8009834:	f000 fc26 	bl	800a084 <_sbrk_r>
 8009838:	4581      	cmp	r9, r0
 800983a:	d142      	bne.n	80098c2 <_malloc_r+0xea>
 800983c:	6821      	ldr	r1, [r4, #0]
 800983e:	1a6d      	subs	r5, r5, r1
 8009840:	4629      	mov	r1, r5
 8009842:	4630      	mov	r0, r6
 8009844:	f7ff ffa6 	bl	8009794 <sbrk_aligned>
 8009848:	3001      	adds	r0, #1
 800984a:	d03a      	beq.n	80098c2 <_malloc_r+0xea>
 800984c:	6823      	ldr	r3, [r4, #0]
 800984e:	442b      	add	r3, r5
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	f8d8 3000 	ldr.w	r3, [r8]
 8009856:	685a      	ldr	r2, [r3, #4]
 8009858:	bb62      	cbnz	r2, 80098b4 <_malloc_r+0xdc>
 800985a:	f8c8 7000 	str.w	r7, [r8]
 800985e:	e00f      	b.n	8009880 <_malloc_r+0xa8>
 8009860:	6822      	ldr	r2, [r4, #0]
 8009862:	1b52      	subs	r2, r2, r5
 8009864:	d420      	bmi.n	80098a8 <_malloc_r+0xd0>
 8009866:	2a0b      	cmp	r2, #11
 8009868:	d917      	bls.n	800989a <_malloc_r+0xc2>
 800986a:	1961      	adds	r1, r4, r5
 800986c:	42a3      	cmp	r3, r4
 800986e:	6025      	str	r5, [r4, #0]
 8009870:	bf18      	it	ne
 8009872:	6059      	strne	r1, [r3, #4]
 8009874:	6863      	ldr	r3, [r4, #4]
 8009876:	bf08      	it	eq
 8009878:	f8c8 1000 	streq.w	r1, [r8]
 800987c:	5162      	str	r2, [r4, r5]
 800987e:	604b      	str	r3, [r1, #4]
 8009880:	4630      	mov	r0, r6
 8009882:	f000 fa69 	bl	8009d58 <__malloc_unlock>
 8009886:	f104 000b 	add.w	r0, r4, #11
 800988a:	1d23      	adds	r3, r4, #4
 800988c:	f020 0007 	bic.w	r0, r0, #7
 8009890:	1ac2      	subs	r2, r0, r3
 8009892:	bf1c      	itt	ne
 8009894:	1a1b      	subne	r3, r3, r0
 8009896:	50a3      	strne	r3, [r4, r2]
 8009898:	e7af      	b.n	80097fa <_malloc_r+0x22>
 800989a:	6862      	ldr	r2, [r4, #4]
 800989c:	42a3      	cmp	r3, r4
 800989e:	bf0c      	ite	eq
 80098a0:	f8c8 2000 	streq.w	r2, [r8]
 80098a4:	605a      	strne	r2, [r3, #4]
 80098a6:	e7eb      	b.n	8009880 <_malloc_r+0xa8>
 80098a8:	4623      	mov	r3, r4
 80098aa:	6864      	ldr	r4, [r4, #4]
 80098ac:	e7ae      	b.n	800980c <_malloc_r+0x34>
 80098ae:	463c      	mov	r4, r7
 80098b0:	687f      	ldr	r7, [r7, #4]
 80098b2:	e7b6      	b.n	8009822 <_malloc_r+0x4a>
 80098b4:	461a      	mov	r2, r3
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	42a3      	cmp	r3, r4
 80098ba:	d1fb      	bne.n	80098b4 <_malloc_r+0xdc>
 80098bc:	2300      	movs	r3, #0
 80098be:	6053      	str	r3, [r2, #4]
 80098c0:	e7de      	b.n	8009880 <_malloc_r+0xa8>
 80098c2:	230c      	movs	r3, #12
 80098c4:	6033      	str	r3, [r6, #0]
 80098c6:	4630      	mov	r0, r6
 80098c8:	f000 fa46 	bl	8009d58 <__malloc_unlock>
 80098cc:	e794      	b.n	80097f8 <_malloc_r+0x20>
 80098ce:	6005      	str	r5, [r0, #0]
 80098d0:	e7d6      	b.n	8009880 <_malloc_r+0xa8>
 80098d2:	bf00      	nop
 80098d4:	20004dec 	.word	0x20004dec

080098d8 <_printf_common>:
 80098d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098dc:	4616      	mov	r6, r2
 80098de:	4698      	mov	r8, r3
 80098e0:	688a      	ldr	r2, [r1, #8]
 80098e2:	690b      	ldr	r3, [r1, #16]
 80098e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80098e8:	4293      	cmp	r3, r2
 80098ea:	bfb8      	it	lt
 80098ec:	4613      	movlt	r3, r2
 80098ee:	6033      	str	r3, [r6, #0]
 80098f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80098f4:	4607      	mov	r7, r0
 80098f6:	460c      	mov	r4, r1
 80098f8:	b10a      	cbz	r2, 80098fe <_printf_common+0x26>
 80098fa:	3301      	adds	r3, #1
 80098fc:	6033      	str	r3, [r6, #0]
 80098fe:	6823      	ldr	r3, [r4, #0]
 8009900:	0699      	lsls	r1, r3, #26
 8009902:	bf42      	ittt	mi
 8009904:	6833      	ldrmi	r3, [r6, #0]
 8009906:	3302      	addmi	r3, #2
 8009908:	6033      	strmi	r3, [r6, #0]
 800990a:	6825      	ldr	r5, [r4, #0]
 800990c:	f015 0506 	ands.w	r5, r5, #6
 8009910:	d106      	bne.n	8009920 <_printf_common+0x48>
 8009912:	f104 0a19 	add.w	sl, r4, #25
 8009916:	68e3      	ldr	r3, [r4, #12]
 8009918:	6832      	ldr	r2, [r6, #0]
 800991a:	1a9b      	subs	r3, r3, r2
 800991c:	42ab      	cmp	r3, r5
 800991e:	dc26      	bgt.n	800996e <_printf_common+0x96>
 8009920:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009924:	6822      	ldr	r2, [r4, #0]
 8009926:	3b00      	subs	r3, #0
 8009928:	bf18      	it	ne
 800992a:	2301      	movne	r3, #1
 800992c:	0692      	lsls	r2, r2, #26
 800992e:	d42b      	bmi.n	8009988 <_printf_common+0xb0>
 8009930:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009934:	4641      	mov	r1, r8
 8009936:	4638      	mov	r0, r7
 8009938:	47c8      	blx	r9
 800993a:	3001      	adds	r0, #1
 800993c:	d01e      	beq.n	800997c <_printf_common+0xa4>
 800993e:	6823      	ldr	r3, [r4, #0]
 8009940:	6922      	ldr	r2, [r4, #16]
 8009942:	f003 0306 	and.w	r3, r3, #6
 8009946:	2b04      	cmp	r3, #4
 8009948:	bf02      	ittt	eq
 800994a:	68e5      	ldreq	r5, [r4, #12]
 800994c:	6833      	ldreq	r3, [r6, #0]
 800994e:	1aed      	subeq	r5, r5, r3
 8009950:	68a3      	ldr	r3, [r4, #8]
 8009952:	bf0c      	ite	eq
 8009954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009958:	2500      	movne	r5, #0
 800995a:	4293      	cmp	r3, r2
 800995c:	bfc4      	itt	gt
 800995e:	1a9b      	subgt	r3, r3, r2
 8009960:	18ed      	addgt	r5, r5, r3
 8009962:	2600      	movs	r6, #0
 8009964:	341a      	adds	r4, #26
 8009966:	42b5      	cmp	r5, r6
 8009968:	d11a      	bne.n	80099a0 <_printf_common+0xc8>
 800996a:	2000      	movs	r0, #0
 800996c:	e008      	b.n	8009980 <_printf_common+0xa8>
 800996e:	2301      	movs	r3, #1
 8009970:	4652      	mov	r2, sl
 8009972:	4641      	mov	r1, r8
 8009974:	4638      	mov	r0, r7
 8009976:	47c8      	blx	r9
 8009978:	3001      	adds	r0, #1
 800997a:	d103      	bne.n	8009984 <_printf_common+0xac>
 800997c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009984:	3501      	adds	r5, #1
 8009986:	e7c6      	b.n	8009916 <_printf_common+0x3e>
 8009988:	18e1      	adds	r1, r4, r3
 800998a:	1c5a      	adds	r2, r3, #1
 800998c:	2030      	movs	r0, #48	@ 0x30
 800998e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009992:	4422      	add	r2, r4
 8009994:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009998:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800999c:	3302      	adds	r3, #2
 800999e:	e7c7      	b.n	8009930 <_printf_common+0x58>
 80099a0:	2301      	movs	r3, #1
 80099a2:	4622      	mov	r2, r4
 80099a4:	4641      	mov	r1, r8
 80099a6:	4638      	mov	r0, r7
 80099a8:	47c8      	blx	r9
 80099aa:	3001      	adds	r0, #1
 80099ac:	d0e6      	beq.n	800997c <_printf_common+0xa4>
 80099ae:	3601      	adds	r6, #1
 80099b0:	e7d9      	b.n	8009966 <_printf_common+0x8e>
	...

080099b4 <_printf_i>:
 80099b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099b8:	7e0f      	ldrb	r7, [r1, #24]
 80099ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80099bc:	2f78      	cmp	r7, #120	@ 0x78
 80099be:	4691      	mov	r9, r2
 80099c0:	4680      	mov	r8, r0
 80099c2:	460c      	mov	r4, r1
 80099c4:	469a      	mov	sl, r3
 80099c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80099ca:	d807      	bhi.n	80099dc <_printf_i+0x28>
 80099cc:	2f62      	cmp	r7, #98	@ 0x62
 80099ce:	d80a      	bhi.n	80099e6 <_printf_i+0x32>
 80099d0:	2f00      	cmp	r7, #0
 80099d2:	f000 80d2 	beq.w	8009b7a <_printf_i+0x1c6>
 80099d6:	2f58      	cmp	r7, #88	@ 0x58
 80099d8:	f000 80b9 	beq.w	8009b4e <_printf_i+0x19a>
 80099dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80099e4:	e03a      	b.n	8009a5c <_printf_i+0xa8>
 80099e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80099ea:	2b15      	cmp	r3, #21
 80099ec:	d8f6      	bhi.n	80099dc <_printf_i+0x28>
 80099ee:	a101      	add	r1, pc, #4	@ (adr r1, 80099f4 <_printf_i+0x40>)
 80099f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099f4:	08009a4d 	.word	0x08009a4d
 80099f8:	08009a61 	.word	0x08009a61
 80099fc:	080099dd 	.word	0x080099dd
 8009a00:	080099dd 	.word	0x080099dd
 8009a04:	080099dd 	.word	0x080099dd
 8009a08:	080099dd 	.word	0x080099dd
 8009a0c:	08009a61 	.word	0x08009a61
 8009a10:	080099dd 	.word	0x080099dd
 8009a14:	080099dd 	.word	0x080099dd
 8009a18:	080099dd 	.word	0x080099dd
 8009a1c:	080099dd 	.word	0x080099dd
 8009a20:	08009b61 	.word	0x08009b61
 8009a24:	08009a8b 	.word	0x08009a8b
 8009a28:	08009b1b 	.word	0x08009b1b
 8009a2c:	080099dd 	.word	0x080099dd
 8009a30:	080099dd 	.word	0x080099dd
 8009a34:	08009b83 	.word	0x08009b83
 8009a38:	080099dd 	.word	0x080099dd
 8009a3c:	08009a8b 	.word	0x08009a8b
 8009a40:	080099dd 	.word	0x080099dd
 8009a44:	080099dd 	.word	0x080099dd
 8009a48:	08009b23 	.word	0x08009b23
 8009a4c:	6833      	ldr	r3, [r6, #0]
 8009a4e:	1d1a      	adds	r2, r3, #4
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	6032      	str	r2, [r6, #0]
 8009a54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e09d      	b.n	8009b9c <_printf_i+0x1e8>
 8009a60:	6833      	ldr	r3, [r6, #0]
 8009a62:	6820      	ldr	r0, [r4, #0]
 8009a64:	1d19      	adds	r1, r3, #4
 8009a66:	6031      	str	r1, [r6, #0]
 8009a68:	0606      	lsls	r6, r0, #24
 8009a6a:	d501      	bpl.n	8009a70 <_printf_i+0xbc>
 8009a6c:	681d      	ldr	r5, [r3, #0]
 8009a6e:	e003      	b.n	8009a78 <_printf_i+0xc4>
 8009a70:	0645      	lsls	r5, r0, #25
 8009a72:	d5fb      	bpl.n	8009a6c <_printf_i+0xb8>
 8009a74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a78:	2d00      	cmp	r5, #0
 8009a7a:	da03      	bge.n	8009a84 <_printf_i+0xd0>
 8009a7c:	232d      	movs	r3, #45	@ 0x2d
 8009a7e:	426d      	negs	r5, r5
 8009a80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a84:	4859      	ldr	r0, [pc, #356]	@ (8009bec <_printf_i+0x238>)
 8009a86:	230a      	movs	r3, #10
 8009a88:	e011      	b.n	8009aae <_printf_i+0xfa>
 8009a8a:	6821      	ldr	r1, [r4, #0]
 8009a8c:	6833      	ldr	r3, [r6, #0]
 8009a8e:	0608      	lsls	r0, r1, #24
 8009a90:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a94:	d402      	bmi.n	8009a9c <_printf_i+0xe8>
 8009a96:	0649      	lsls	r1, r1, #25
 8009a98:	bf48      	it	mi
 8009a9a:	b2ad      	uxthmi	r5, r5
 8009a9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a9e:	4853      	ldr	r0, [pc, #332]	@ (8009bec <_printf_i+0x238>)
 8009aa0:	6033      	str	r3, [r6, #0]
 8009aa2:	bf14      	ite	ne
 8009aa4:	230a      	movne	r3, #10
 8009aa6:	2308      	moveq	r3, #8
 8009aa8:	2100      	movs	r1, #0
 8009aaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009aae:	6866      	ldr	r6, [r4, #4]
 8009ab0:	60a6      	str	r6, [r4, #8]
 8009ab2:	2e00      	cmp	r6, #0
 8009ab4:	bfa2      	ittt	ge
 8009ab6:	6821      	ldrge	r1, [r4, #0]
 8009ab8:	f021 0104 	bicge.w	r1, r1, #4
 8009abc:	6021      	strge	r1, [r4, #0]
 8009abe:	b90d      	cbnz	r5, 8009ac4 <_printf_i+0x110>
 8009ac0:	2e00      	cmp	r6, #0
 8009ac2:	d04b      	beq.n	8009b5c <_printf_i+0x1a8>
 8009ac4:	4616      	mov	r6, r2
 8009ac6:	fbb5 f1f3 	udiv	r1, r5, r3
 8009aca:	fb03 5711 	mls	r7, r3, r1, r5
 8009ace:	5dc7      	ldrb	r7, [r0, r7]
 8009ad0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ad4:	462f      	mov	r7, r5
 8009ad6:	42bb      	cmp	r3, r7
 8009ad8:	460d      	mov	r5, r1
 8009ada:	d9f4      	bls.n	8009ac6 <_printf_i+0x112>
 8009adc:	2b08      	cmp	r3, #8
 8009ade:	d10b      	bne.n	8009af8 <_printf_i+0x144>
 8009ae0:	6823      	ldr	r3, [r4, #0]
 8009ae2:	07df      	lsls	r7, r3, #31
 8009ae4:	d508      	bpl.n	8009af8 <_printf_i+0x144>
 8009ae6:	6923      	ldr	r3, [r4, #16]
 8009ae8:	6861      	ldr	r1, [r4, #4]
 8009aea:	4299      	cmp	r1, r3
 8009aec:	bfde      	ittt	le
 8009aee:	2330      	movle	r3, #48	@ 0x30
 8009af0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009af4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009af8:	1b92      	subs	r2, r2, r6
 8009afa:	6122      	str	r2, [r4, #16]
 8009afc:	f8cd a000 	str.w	sl, [sp]
 8009b00:	464b      	mov	r3, r9
 8009b02:	aa03      	add	r2, sp, #12
 8009b04:	4621      	mov	r1, r4
 8009b06:	4640      	mov	r0, r8
 8009b08:	f7ff fee6 	bl	80098d8 <_printf_common>
 8009b0c:	3001      	adds	r0, #1
 8009b0e:	d14a      	bne.n	8009ba6 <_printf_i+0x1f2>
 8009b10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b14:	b004      	add	sp, #16
 8009b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	f043 0320 	orr.w	r3, r3, #32
 8009b20:	6023      	str	r3, [r4, #0]
 8009b22:	4833      	ldr	r0, [pc, #204]	@ (8009bf0 <_printf_i+0x23c>)
 8009b24:	2778      	movs	r7, #120	@ 0x78
 8009b26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009b2a:	6823      	ldr	r3, [r4, #0]
 8009b2c:	6831      	ldr	r1, [r6, #0]
 8009b2e:	061f      	lsls	r7, r3, #24
 8009b30:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b34:	d402      	bmi.n	8009b3c <_printf_i+0x188>
 8009b36:	065f      	lsls	r7, r3, #25
 8009b38:	bf48      	it	mi
 8009b3a:	b2ad      	uxthmi	r5, r5
 8009b3c:	6031      	str	r1, [r6, #0]
 8009b3e:	07d9      	lsls	r1, r3, #31
 8009b40:	bf44      	itt	mi
 8009b42:	f043 0320 	orrmi.w	r3, r3, #32
 8009b46:	6023      	strmi	r3, [r4, #0]
 8009b48:	b11d      	cbz	r5, 8009b52 <_printf_i+0x19e>
 8009b4a:	2310      	movs	r3, #16
 8009b4c:	e7ac      	b.n	8009aa8 <_printf_i+0xf4>
 8009b4e:	4827      	ldr	r0, [pc, #156]	@ (8009bec <_printf_i+0x238>)
 8009b50:	e7e9      	b.n	8009b26 <_printf_i+0x172>
 8009b52:	6823      	ldr	r3, [r4, #0]
 8009b54:	f023 0320 	bic.w	r3, r3, #32
 8009b58:	6023      	str	r3, [r4, #0]
 8009b5a:	e7f6      	b.n	8009b4a <_printf_i+0x196>
 8009b5c:	4616      	mov	r6, r2
 8009b5e:	e7bd      	b.n	8009adc <_printf_i+0x128>
 8009b60:	6833      	ldr	r3, [r6, #0]
 8009b62:	6825      	ldr	r5, [r4, #0]
 8009b64:	6961      	ldr	r1, [r4, #20]
 8009b66:	1d18      	adds	r0, r3, #4
 8009b68:	6030      	str	r0, [r6, #0]
 8009b6a:	062e      	lsls	r6, r5, #24
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	d501      	bpl.n	8009b74 <_printf_i+0x1c0>
 8009b70:	6019      	str	r1, [r3, #0]
 8009b72:	e002      	b.n	8009b7a <_printf_i+0x1c6>
 8009b74:	0668      	lsls	r0, r5, #25
 8009b76:	d5fb      	bpl.n	8009b70 <_printf_i+0x1bc>
 8009b78:	8019      	strh	r1, [r3, #0]
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	6123      	str	r3, [r4, #16]
 8009b7e:	4616      	mov	r6, r2
 8009b80:	e7bc      	b.n	8009afc <_printf_i+0x148>
 8009b82:	6833      	ldr	r3, [r6, #0]
 8009b84:	1d1a      	adds	r2, r3, #4
 8009b86:	6032      	str	r2, [r6, #0]
 8009b88:	681e      	ldr	r6, [r3, #0]
 8009b8a:	6862      	ldr	r2, [r4, #4]
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	4630      	mov	r0, r6
 8009b90:	f7f6 fb1e 	bl	80001d0 <memchr>
 8009b94:	b108      	cbz	r0, 8009b9a <_printf_i+0x1e6>
 8009b96:	1b80      	subs	r0, r0, r6
 8009b98:	6060      	str	r0, [r4, #4]
 8009b9a:	6863      	ldr	r3, [r4, #4]
 8009b9c:	6123      	str	r3, [r4, #16]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ba4:	e7aa      	b.n	8009afc <_printf_i+0x148>
 8009ba6:	6923      	ldr	r3, [r4, #16]
 8009ba8:	4632      	mov	r2, r6
 8009baa:	4649      	mov	r1, r9
 8009bac:	4640      	mov	r0, r8
 8009bae:	47d0      	blx	sl
 8009bb0:	3001      	adds	r0, #1
 8009bb2:	d0ad      	beq.n	8009b10 <_printf_i+0x15c>
 8009bb4:	6823      	ldr	r3, [r4, #0]
 8009bb6:	079b      	lsls	r3, r3, #30
 8009bb8:	d413      	bmi.n	8009be2 <_printf_i+0x22e>
 8009bba:	68e0      	ldr	r0, [r4, #12]
 8009bbc:	9b03      	ldr	r3, [sp, #12]
 8009bbe:	4298      	cmp	r0, r3
 8009bc0:	bfb8      	it	lt
 8009bc2:	4618      	movlt	r0, r3
 8009bc4:	e7a6      	b.n	8009b14 <_printf_i+0x160>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	4632      	mov	r2, r6
 8009bca:	4649      	mov	r1, r9
 8009bcc:	4640      	mov	r0, r8
 8009bce:	47d0      	blx	sl
 8009bd0:	3001      	adds	r0, #1
 8009bd2:	d09d      	beq.n	8009b10 <_printf_i+0x15c>
 8009bd4:	3501      	adds	r5, #1
 8009bd6:	68e3      	ldr	r3, [r4, #12]
 8009bd8:	9903      	ldr	r1, [sp, #12]
 8009bda:	1a5b      	subs	r3, r3, r1
 8009bdc:	42ab      	cmp	r3, r5
 8009bde:	dcf2      	bgt.n	8009bc6 <_printf_i+0x212>
 8009be0:	e7eb      	b.n	8009bba <_printf_i+0x206>
 8009be2:	2500      	movs	r5, #0
 8009be4:	f104 0619 	add.w	r6, r4, #25
 8009be8:	e7f5      	b.n	8009bd6 <_printf_i+0x222>
 8009bea:	bf00      	nop
 8009bec:	0800a825 	.word	0x0800a825
 8009bf0:	0800a836 	.word	0x0800a836

08009bf4 <__sflush_r>:
 8009bf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bfc:	0716      	lsls	r6, r2, #28
 8009bfe:	4605      	mov	r5, r0
 8009c00:	460c      	mov	r4, r1
 8009c02:	d454      	bmi.n	8009cae <__sflush_r+0xba>
 8009c04:	684b      	ldr	r3, [r1, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	dc02      	bgt.n	8009c10 <__sflush_r+0x1c>
 8009c0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	dd48      	ble.n	8009ca2 <__sflush_r+0xae>
 8009c10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c12:	2e00      	cmp	r6, #0
 8009c14:	d045      	beq.n	8009ca2 <__sflush_r+0xae>
 8009c16:	2300      	movs	r3, #0
 8009c18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009c1c:	682f      	ldr	r7, [r5, #0]
 8009c1e:	6a21      	ldr	r1, [r4, #32]
 8009c20:	602b      	str	r3, [r5, #0]
 8009c22:	d030      	beq.n	8009c86 <__sflush_r+0x92>
 8009c24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009c26:	89a3      	ldrh	r3, [r4, #12]
 8009c28:	0759      	lsls	r1, r3, #29
 8009c2a:	d505      	bpl.n	8009c38 <__sflush_r+0x44>
 8009c2c:	6863      	ldr	r3, [r4, #4]
 8009c2e:	1ad2      	subs	r2, r2, r3
 8009c30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c32:	b10b      	cbz	r3, 8009c38 <__sflush_r+0x44>
 8009c34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009c36:	1ad2      	subs	r2, r2, r3
 8009c38:	2300      	movs	r3, #0
 8009c3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c3c:	6a21      	ldr	r1, [r4, #32]
 8009c3e:	4628      	mov	r0, r5
 8009c40:	47b0      	blx	r6
 8009c42:	1c43      	adds	r3, r0, #1
 8009c44:	89a3      	ldrh	r3, [r4, #12]
 8009c46:	d106      	bne.n	8009c56 <__sflush_r+0x62>
 8009c48:	6829      	ldr	r1, [r5, #0]
 8009c4a:	291d      	cmp	r1, #29
 8009c4c:	d82b      	bhi.n	8009ca6 <__sflush_r+0xb2>
 8009c4e:	4a2a      	ldr	r2, [pc, #168]	@ (8009cf8 <__sflush_r+0x104>)
 8009c50:	410a      	asrs	r2, r1
 8009c52:	07d6      	lsls	r6, r2, #31
 8009c54:	d427      	bmi.n	8009ca6 <__sflush_r+0xb2>
 8009c56:	2200      	movs	r2, #0
 8009c58:	6062      	str	r2, [r4, #4]
 8009c5a:	04d9      	lsls	r1, r3, #19
 8009c5c:	6922      	ldr	r2, [r4, #16]
 8009c5e:	6022      	str	r2, [r4, #0]
 8009c60:	d504      	bpl.n	8009c6c <__sflush_r+0x78>
 8009c62:	1c42      	adds	r2, r0, #1
 8009c64:	d101      	bne.n	8009c6a <__sflush_r+0x76>
 8009c66:	682b      	ldr	r3, [r5, #0]
 8009c68:	b903      	cbnz	r3, 8009c6c <__sflush_r+0x78>
 8009c6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c6e:	602f      	str	r7, [r5, #0]
 8009c70:	b1b9      	cbz	r1, 8009ca2 <__sflush_r+0xae>
 8009c72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c76:	4299      	cmp	r1, r3
 8009c78:	d002      	beq.n	8009c80 <__sflush_r+0x8c>
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	f000 fa24 	bl	800a0c8 <_free_r>
 8009c80:	2300      	movs	r3, #0
 8009c82:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c84:	e00d      	b.n	8009ca2 <__sflush_r+0xae>
 8009c86:	2301      	movs	r3, #1
 8009c88:	4628      	mov	r0, r5
 8009c8a:	47b0      	blx	r6
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	1c50      	adds	r0, r2, #1
 8009c90:	d1c9      	bne.n	8009c26 <__sflush_r+0x32>
 8009c92:	682b      	ldr	r3, [r5, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d0c6      	beq.n	8009c26 <__sflush_r+0x32>
 8009c98:	2b1d      	cmp	r3, #29
 8009c9a:	d001      	beq.n	8009ca0 <__sflush_r+0xac>
 8009c9c:	2b16      	cmp	r3, #22
 8009c9e:	d11e      	bne.n	8009cde <__sflush_r+0xea>
 8009ca0:	602f      	str	r7, [r5, #0]
 8009ca2:	2000      	movs	r0, #0
 8009ca4:	e022      	b.n	8009cec <__sflush_r+0xf8>
 8009ca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009caa:	b21b      	sxth	r3, r3
 8009cac:	e01b      	b.n	8009ce6 <__sflush_r+0xf2>
 8009cae:	690f      	ldr	r7, [r1, #16]
 8009cb0:	2f00      	cmp	r7, #0
 8009cb2:	d0f6      	beq.n	8009ca2 <__sflush_r+0xae>
 8009cb4:	0793      	lsls	r3, r2, #30
 8009cb6:	680e      	ldr	r6, [r1, #0]
 8009cb8:	bf08      	it	eq
 8009cba:	694b      	ldreq	r3, [r1, #20]
 8009cbc:	600f      	str	r7, [r1, #0]
 8009cbe:	bf18      	it	ne
 8009cc0:	2300      	movne	r3, #0
 8009cc2:	eba6 0807 	sub.w	r8, r6, r7
 8009cc6:	608b      	str	r3, [r1, #8]
 8009cc8:	f1b8 0f00 	cmp.w	r8, #0
 8009ccc:	dde9      	ble.n	8009ca2 <__sflush_r+0xae>
 8009cce:	6a21      	ldr	r1, [r4, #32]
 8009cd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009cd2:	4643      	mov	r3, r8
 8009cd4:	463a      	mov	r2, r7
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	47b0      	blx	r6
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	dc08      	bgt.n	8009cf0 <__sflush_r+0xfc>
 8009cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ce6:	81a3      	strh	r3, [r4, #12]
 8009ce8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cf0:	4407      	add	r7, r0
 8009cf2:	eba8 0800 	sub.w	r8, r8, r0
 8009cf6:	e7e7      	b.n	8009cc8 <__sflush_r+0xd4>
 8009cf8:	dfbffffe 	.word	0xdfbffffe

08009cfc <_fflush_r>:
 8009cfc:	b538      	push	{r3, r4, r5, lr}
 8009cfe:	690b      	ldr	r3, [r1, #16]
 8009d00:	4605      	mov	r5, r0
 8009d02:	460c      	mov	r4, r1
 8009d04:	b913      	cbnz	r3, 8009d0c <_fflush_r+0x10>
 8009d06:	2500      	movs	r5, #0
 8009d08:	4628      	mov	r0, r5
 8009d0a:	bd38      	pop	{r3, r4, r5, pc}
 8009d0c:	b118      	cbz	r0, 8009d16 <_fflush_r+0x1a>
 8009d0e:	6a03      	ldr	r3, [r0, #32]
 8009d10:	b90b      	cbnz	r3, 8009d16 <_fflush_r+0x1a>
 8009d12:	f7ff fb23 	bl	800935c <__sinit>
 8009d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d0f3      	beq.n	8009d06 <_fflush_r+0xa>
 8009d1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009d20:	07d0      	lsls	r0, r2, #31
 8009d22:	d404      	bmi.n	8009d2e <_fflush_r+0x32>
 8009d24:	0599      	lsls	r1, r3, #22
 8009d26:	d402      	bmi.n	8009d2e <_fflush_r+0x32>
 8009d28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d2a:	f7ff fbf0 	bl	800950e <__retarget_lock_acquire_recursive>
 8009d2e:	4628      	mov	r0, r5
 8009d30:	4621      	mov	r1, r4
 8009d32:	f7ff ff5f 	bl	8009bf4 <__sflush_r>
 8009d36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d38:	07da      	lsls	r2, r3, #31
 8009d3a:	4605      	mov	r5, r0
 8009d3c:	d4e4      	bmi.n	8009d08 <_fflush_r+0xc>
 8009d3e:	89a3      	ldrh	r3, [r4, #12]
 8009d40:	059b      	lsls	r3, r3, #22
 8009d42:	d4e1      	bmi.n	8009d08 <_fflush_r+0xc>
 8009d44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d46:	f7ff fbe3 	bl	8009510 <__retarget_lock_release_recursive>
 8009d4a:	e7dd      	b.n	8009d08 <_fflush_r+0xc>

08009d4c <__malloc_lock>:
 8009d4c:	4801      	ldr	r0, [pc, #4]	@ (8009d54 <__malloc_lock+0x8>)
 8009d4e:	f7ff bbde 	b.w	800950e <__retarget_lock_acquire_recursive>
 8009d52:	bf00      	nop
 8009d54:	20004de4 	.word	0x20004de4

08009d58 <__malloc_unlock>:
 8009d58:	4801      	ldr	r0, [pc, #4]	@ (8009d60 <__malloc_unlock+0x8>)
 8009d5a:	f7ff bbd9 	b.w	8009510 <__retarget_lock_release_recursive>
 8009d5e:	bf00      	nop
 8009d60:	20004de4 	.word	0x20004de4

08009d64 <__sread>:
 8009d64:	b510      	push	{r4, lr}
 8009d66:	460c      	mov	r4, r1
 8009d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d6c:	f000 f978 	bl	800a060 <_read_r>
 8009d70:	2800      	cmp	r0, #0
 8009d72:	bfab      	itete	ge
 8009d74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009d76:	89a3      	ldrhlt	r3, [r4, #12]
 8009d78:	181b      	addge	r3, r3, r0
 8009d7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009d7e:	bfac      	ite	ge
 8009d80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009d82:	81a3      	strhlt	r3, [r4, #12]
 8009d84:	bd10      	pop	{r4, pc}

08009d86 <__swrite>:
 8009d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d8a:	461f      	mov	r7, r3
 8009d8c:	898b      	ldrh	r3, [r1, #12]
 8009d8e:	05db      	lsls	r3, r3, #23
 8009d90:	4605      	mov	r5, r0
 8009d92:	460c      	mov	r4, r1
 8009d94:	4616      	mov	r6, r2
 8009d96:	d505      	bpl.n	8009da4 <__swrite+0x1e>
 8009d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d9c:	2302      	movs	r3, #2
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f000 f94c 	bl	800a03c <_lseek_r>
 8009da4:	89a3      	ldrh	r3, [r4, #12]
 8009da6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009daa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009dae:	81a3      	strh	r3, [r4, #12]
 8009db0:	4632      	mov	r2, r6
 8009db2:	463b      	mov	r3, r7
 8009db4:	4628      	mov	r0, r5
 8009db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dba:	f000 b973 	b.w	800a0a4 <_write_r>

08009dbe <__sseek>:
 8009dbe:	b510      	push	{r4, lr}
 8009dc0:	460c      	mov	r4, r1
 8009dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dc6:	f000 f939 	bl	800a03c <_lseek_r>
 8009dca:	1c43      	adds	r3, r0, #1
 8009dcc:	89a3      	ldrh	r3, [r4, #12]
 8009dce:	bf15      	itete	ne
 8009dd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009dd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009dd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009dda:	81a3      	strheq	r3, [r4, #12]
 8009ddc:	bf18      	it	ne
 8009dde:	81a3      	strhne	r3, [r4, #12]
 8009de0:	bd10      	pop	{r4, pc}

08009de2 <__sclose>:
 8009de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de6:	f000 b8f7 	b.w	8009fd8 <_close_r>

08009dea <__swbuf_r>:
 8009dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dec:	460e      	mov	r6, r1
 8009dee:	4614      	mov	r4, r2
 8009df0:	4605      	mov	r5, r0
 8009df2:	b118      	cbz	r0, 8009dfc <__swbuf_r+0x12>
 8009df4:	6a03      	ldr	r3, [r0, #32]
 8009df6:	b90b      	cbnz	r3, 8009dfc <__swbuf_r+0x12>
 8009df8:	f7ff fab0 	bl	800935c <__sinit>
 8009dfc:	69a3      	ldr	r3, [r4, #24]
 8009dfe:	60a3      	str	r3, [r4, #8]
 8009e00:	89a3      	ldrh	r3, [r4, #12]
 8009e02:	071a      	lsls	r2, r3, #28
 8009e04:	d501      	bpl.n	8009e0a <__swbuf_r+0x20>
 8009e06:	6923      	ldr	r3, [r4, #16]
 8009e08:	b943      	cbnz	r3, 8009e1c <__swbuf_r+0x32>
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	f000 f82b 	bl	8009e68 <__swsetup_r>
 8009e12:	b118      	cbz	r0, 8009e1c <__swbuf_r+0x32>
 8009e14:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009e18:	4638      	mov	r0, r7
 8009e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e1c:	6823      	ldr	r3, [r4, #0]
 8009e1e:	6922      	ldr	r2, [r4, #16]
 8009e20:	1a98      	subs	r0, r3, r2
 8009e22:	6963      	ldr	r3, [r4, #20]
 8009e24:	b2f6      	uxtb	r6, r6
 8009e26:	4283      	cmp	r3, r0
 8009e28:	4637      	mov	r7, r6
 8009e2a:	dc05      	bgt.n	8009e38 <__swbuf_r+0x4e>
 8009e2c:	4621      	mov	r1, r4
 8009e2e:	4628      	mov	r0, r5
 8009e30:	f7ff ff64 	bl	8009cfc <_fflush_r>
 8009e34:	2800      	cmp	r0, #0
 8009e36:	d1ed      	bne.n	8009e14 <__swbuf_r+0x2a>
 8009e38:	68a3      	ldr	r3, [r4, #8]
 8009e3a:	3b01      	subs	r3, #1
 8009e3c:	60a3      	str	r3, [r4, #8]
 8009e3e:	6823      	ldr	r3, [r4, #0]
 8009e40:	1c5a      	adds	r2, r3, #1
 8009e42:	6022      	str	r2, [r4, #0]
 8009e44:	701e      	strb	r6, [r3, #0]
 8009e46:	6962      	ldr	r2, [r4, #20]
 8009e48:	1c43      	adds	r3, r0, #1
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d004      	beq.n	8009e58 <__swbuf_r+0x6e>
 8009e4e:	89a3      	ldrh	r3, [r4, #12]
 8009e50:	07db      	lsls	r3, r3, #31
 8009e52:	d5e1      	bpl.n	8009e18 <__swbuf_r+0x2e>
 8009e54:	2e0a      	cmp	r6, #10
 8009e56:	d1df      	bne.n	8009e18 <__swbuf_r+0x2e>
 8009e58:	4621      	mov	r1, r4
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	f7ff ff4e 	bl	8009cfc <_fflush_r>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	d0d9      	beq.n	8009e18 <__swbuf_r+0x2e>
 8009e64:	e7d6      	b.n	8009e14 <__swbuf_r+0x2a>
	...

08009e68 <__swsetup_r>:
 8009e68:	b538      	push	{r3, r4, r5, lr}
 8009e6a:	4b29      	ldr	r3, [pc, #164]	@ (8009f10 <__swsetup_r+0xa8>)
 8009e6c:	4605      	mov	r5, r0
 8009e6e:	6818      	ldr	r0, [r3, #0]
 8009e70:	460c      	mov	r4, r1
 8009e72:	b118      	cbz	r0, 8009e7c <__swsetup_r+0x14>
 8009e74:	6a03      	ldr	r3, [r0, #32]
 8009e76:	b90b      	cbnz	r3, 8009e7c <__swsetup_r+0x14>
 8009e78:	f7ff fa70 	bl	800935c <__sinit>
 8009e7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e80:	0719      	lsls	r1, r3, #28
 8009e82:	d422      	bmi.n	8009eca <__swsetup_r+0x62>
 8009e84:	06da      	lsls	r2, r3, #27
 8009e86:	d407      	bmi.n	8009e98 <__swsetup_r+0x30>
 8009e88:	2209      	movs	r2, #9
 8009e8a:	602a      	str	r2, [r5, #0]
 8009e8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e90:	81a3      	strh	r3, [r4, #12]
 8009e92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e96:	e033      	b.n	8009f00 <__swsetup_r+0x98>
 8009e98:	0758      	lsls	r0, r3, #29
 8009e9a:	d512      	bpl.n	8009ec2 <__swsetup_r+0x5a>
 8009e9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e9e:	b141      	cbz	r1, 8009eb2 <__swsetup_r+0x4a>
 8009ea0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ea4:	4299      	cmp	r1, r3
 8009ea6:	d002      	beq.n	8009eae <__swsetup_r+0x46>
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	f000 f90d 	bl	800a0c8 <_free_r>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009eb2:	89a3      	ldrh	r3, [r4, #12]
 8009eb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009eb8:	81a3      	strh	r3, [r4, #12]
 8009eba:	2300      	movs	r3, #0
 8009ebc:	6063      	str	r3, [r4, #4]
 8009ebe:	6923      	ldr	r3, [r4, #16]
 8009ec0:	6023      	str	r3, [r4, #0]
 8009ec2:	89a3      	ldrh	r3, [r4, #12]
 8009ec4:	f043 0308 	orr.w	r3, r3, #8
 8009ec8:	81a3      	strh	r3, [r4, #12]
 8009eca:	6923      	ldr	r3, [r4, #16]
 8009ecc:	b94b      	cbnz	r3, 8009ee2 <__swsetup_r+0x7a>
 8009ece:	89a3      	ldrh	r3, [r4, #12]
 8009ed0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ed8:	d003      	beq.n	8009ee2 <__swsetup_r+0x7a>
 8009eda:	4621      	mov	r1, r4
 8009edc:	4628      	mov	r0, r5
 8009ede:	f000 f83f 	bl	8009f60 <__smakebuf_r>
 8009ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ee6:	f013 0201 	ands.w	r2, r3, #1
 8009eea:	d00a      	beq.n	8009f02 <__swsetup_r+0x9a>
 8009eec:	2200      	movs	r2, #0
 8009eee:	60a2      	str	r2, [r4, #8]
 8009ef0:	6962      	ldr	r2, [r4, #20]
 8009ef2:	4252      	negs	r2, r2
 8009ef4:	61a2      	str	r2, [r4, #24]
 8009ef6:	6922      	ldr	r2, [r4, #16]
 8009ef8:	b942      	cbnz	r2, 8009f0c <__swsetup_r+0xa4>
 8009efa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009efe:	d1c5      	bne.n	8009e8c <__swsetup_r+0x24>
 8009f00:	bd38      	pop	{r3, r4, r5, pc}
 8009f02:	0799      	lsls	r1, r3, #30
 8009f04:	bf58      	it	pl
 8009f06:	6962      	ldrpl	r2, [r4, #20]
 8009f08:	60a2      	str	r2, [r4, #8]
 8009f0a:	e7f4      	b.n	8009ef6 <__swsetup_r+0x8e>
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	e7f7      	b.n	8009f00 <__swsetup_r+0x98>
 8009f10:	20000060 	.word	0x20000060

08009f14 <__swhatbuf_r>:
 8009f14:	b570      	push	{r4, r5, r6, lr}
 8009f16:	460c      	mov	r4, r1
 8009f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f1c:	2900      	cmp	r1, #0
 8009f1e:	b096      	sub	sp, #88	@ 0x58
 8009f20:	4615      	mov	r5, r2
 8009f22:	461e      	mov	r6, r3
 8009f24:	da0d      	bge.n	8009f42 <__swhatbuf_r+0x2e>
 8009f26:	89a3      	ldrh	r3, [r4, #12]
 8009f28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f2c:	f04f 0100 	mov.w	r1, #0
 8009f30:	bf14      	ite	ne
 8009f32:	2340      	movne	r3, #64	@ 0x40
 8009f34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f38:	2000      	movs	r0, #0
 8009f3a:	6031      	str	r1, [r6, #0]
 8009f3c:	602b      	str	r3, [r5, #0]
 8009f3e:	b016      	add	sp, #88	@ 0x58
 8009f40:	bd70      	pop	{r4, r5, r6, pc}
 8009f42:	466a      	mov	r2, sp
 8009f44:	f000 f858 	bl	8009ff8 <_fstat_r>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	dbec      	blt.n	8009f26 <__swhatbuf_r+0x12>
 8009f4c:	9901      	ldr	r1, [sp, #4]
 8009f4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f56:	4259      	negs	r1, r3
 8009f58:	4159      	adcs	r1, r3
 8009f5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f5e:	e7eb      	b.n	8009f38 <__swhatbuf_r+0x24>

08009f60 <__smakebuf_r>:
 8009f60:	898b      	ldrh	r3, [r1, #12]
 8009f62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f64:	079d      	lsls	r5, r3, #30
 8009f66:	4606      	mov	r6, r0
 8009f68:	460c      	mov	r4, r1
 8009f6a:	d507      	bpl.n	8009f7c <__smakebuf_r+0x1c>
 8009f6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f70:	6023      	str	r3, [r4, #0]
 8009f72:	6123      	str	r3, [r4, #16]
 8009f74:	2301      	movs	r3, #1
 8009f76:	6163      	str	r3, [r4, #20]
 8009f78:	b003      	add	sp, #12
 8009f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f7c:	ab01      	add	r3, sp, #4
 8009f7e:	466a      	mov	r2, sp
 8009f80:	f7ff ffc8 	bl	8009f14 <__swhatbuf_r>
 8009f84:	9f00      	ldr	r7, [sp, #0]
 8009f86:	4605      	mov	r5, r0
 8009f88:	4639      	mov	r1, r7
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f7ff fc24 	bl	80097d8 <_malloc_r>
 8009f90:	b948      	cbnz	r0, 8009fa6 <__smakebuf_r+0x46>
 8009f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f96:	059a      	lsls	r2, r3, #22
 8009f98:	d4ee      	bmi.n	8009f78 <__smakebuf_r+0x18>
 8009f9a:	f023 0303 	bic.w	r3, r3, #3
 8009f9e:	f043 0302 	orr.w	r3, r3, #2
 8009fa2:	81a3      	strh	r3, [r4, #12]
 8009fa4:	e7e2      	b.n	8009f6c <__smakebuf_r+0xc>
 8009fa6:	89a3      	ldrh	r3, [r4, #12]
 8009fa8:	6020      	str	r0, [r4, #0]
 8009faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fae:	81a3      	strh	r3, [r4, #12]
 8009fb0:	9b01      	ldr	r3, [sp, #4]
 8009fb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009fb6:	b15b      	cbz	r3, 8009fd0 <__smakebuf_r+0x70>
 8009fb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	f000 f82d 	bl	800a01c <_isatty_r>
 8009fc2:	b128      	cbz	r0, 8009fd0 <__smakebuf_r+0x70>
 8009fc4:	89a3      	ldrh	r3, [r4, #12]
 8009fc6:	f023 0303 	bic.w	r3, r3, #3
 8009fca:	f043 0301 	orr.w	r3, r3, #1
 8009fce:	81a3      	strh	r3, [r4, #12]
 8009fd0:	89a3      	ldrh	r3, [r4, #12]
 8009fd2:	431d      	orrs	r5, r3
 8009fd4:	81a5      	strh	r5, [r4, #12]
 8009fd6:	e7cf      	b.n	8009f78 <__smakebuf_r+0x18>

08009fd8 <_close_r>:
 8009fd8:	b538      	push	{r3, r4, r5, lr}
 8009fda:	4d06      	ldr	r5, [pc, #24]	@ (8009ff4 <_close_r+0x1c>)
 8009fdc:	2300      	movs	r3, #0
 8009fde:	4604      	mov	r4, r0
 8009fe0:	4608      	mov	r0, r1
 8009fe2:	602b      	str	r3, [r5, #0]
 8009fe4:	f7f7 fc33 	bl	800184e <_close>
 8009fe8:	1c43      	adds	r3, r0, #1
 8009fea:	d102      	bne.n	8009ff2 <_close_r+0x1a>
 8009fec:	682b      	ldr	r3, [r5, #0]
 8009fee:	b103      	cbz	r3, 8009ff2 <_close_r+0x1a>
 8009ff0:	6023      	str	r3, [r4, #0]
 8009ff2:	bd38      	pop	{r3, r4, r5, pc}
 8009ff4:	20004df0 	.word	0x20004df0

08009ff8 <_fstat_r>:
 8009ff8:	b538      	push	{r3, r4, r5, lr}
 8009ffa:	4d07      	ldr	r5, [pc, #28]	@ (800a018 <_fstat_r+0x20>)
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	4604      	mov	r4, r0
 800a000:	4608      	mov	r0, r1
 800a002:	4611      	mov	r1, r2
 800a004:	602b      	str	r3, [r5, #0]
 800a006:	f7f7 fc2e 	bl	8001866 <_fstat>
 800a00a:	1c43      	adds	r3, r0, #1
 800a00c:	d102      	bne.n	800a014 <_fstat_r+0x1c>
 800a00e:	682b      	ldr	r3, [r5, #0]
 800a010:	b103      	cbz	r3, 800a014 <_fstat_r+0x1c>
 800a012:	6023      	str	r3, [r4, #0]
 800a014:	bd38      	pop	{r3, r4, r5, pc}
 800a016:	bf00      	nop
 800a018:	20004df0 	.word	0x20004df0

0800a01c <_isatty_r>:
 800a01c:	b538      	push	{r3, r4, r5, lr}
 800a01e:	4d06      	ldr	r5, [pc, #24]	@ (800a038 <_isatty_r+0x1c>)
 800a020:	2300      	movs	r3, #0
 800a022:	4604      	mov	r4, r0
 800a024:	4608      	mov	r0, r1
 800a026:	602b      	str	r3, [r5, #0]
 800a028:	f7f7 fc2d 	bl	8001886 <_isatty>
 800a02c:	1c43      	adds	r3, r0, #1
 800a02e:	d102      	bne.n	800a036 <_isatty_r+0x1a>
 800a030:	682b      	ldr	r3, [r5, #0]
 800a032:	b103      	cbz	r3, 800a036 <_isatty_r+0x1a>
 800a034:	6023      	str	r3, [r4, #0]
 800a036:	bd38      	pop	{r3, r4, r5, pc}
 800a038:	20004df0 	.word	0x20004df0

0800a03c <_lseek_r>:
 800a03c:	b538      	push	{r3, r4, r5, lr}
 800a03e:	4d07      	ldr	r5, [pc, #28]	@ (800a05c <_lseek_r+0x20>)
 800a040:	4604      	mov	r4, r0
 800a042:	4608      	mov	r0, r1
 800a044:	4611      	mov	r1, r2
 800a046:	2200      	movs	r2, #0
 800a048:	602a      	str	r2, [r5, #0]
 800a04a:	461a      	mov	r2, r3
 800a04c:	f7f7 fc26 	bl	800189c <_lseek>
 800a050:	1c43      	adds	r3, r0, #1
 800a052:	d102      	bne.n	800a05a <_lseek_r+0x1e>
 800a054:	682b      	ldr	r3, [r5, #0]
 800a056:	b103      	cbz	r3, 800a05a <_lseek_r+0x1e>
 800a058:	6023      	str	r3, [r4, #0]
 800a05a:	bd38      	pop	{r3, r4, r5, pc}
 800a05c:	20004df0 	.word	0x20004df0

0800a060 <_read_r>:
 800a060:	b538      	push	{r3, r4, r5, lr}
 800a062:	4d07      	ldr	r5, [pc, #28]	@ (800a080 <_read_r+0x20>)
 800a064:	4604      	mov	r4, r0
 800a066:	4608      	mov	r0, r1
 800a068:	4611      	mov	r1, r2
 800a06a:	2200      	movs	r2, #0
 800a06c:	602a      	str	r2, [r5, #0]
 800a06e:	461a      	mov	r2, r3
 800a070:	f7f7 fbb4 	bl	80017dc <_read>
 800a074:	1c43      	adds	r3, r0, #1
 800a076:	d102      	bne.n	800a07e <_read_r+0x1e>
 800a078:	682b      	ldr	r3, [r5, #0]
 800a07a:	b103      	cbz	r3, 800a07e <_read_r+0x1e>
 800a07c:	6023      	str	r3, [r4, #0]
 800a07e:	bd38      	pop	{r3, r4, r5, pc}
 800a080:	20004df0 	.word	0x20004df0

0800a084 <_sbrk_r>:
 800a084:	b538      	push	{r3, r4, r5, lr}
 800a086:	4d06      	ldr	r5, [pc, #24]	@ (800a0a0 <_sbrk_r+0x1c>)
 800a088:	2300      	movs	r3, #0
 800a08a:	4604      	mov	r4, r0
 800a08c:	4608      	mov	r0, r1
 800a08e:	602b      	str	r3, [r5, #0]
 800a090:	f7f7 fc12 	bl	80018b8 <_sbrk>
 800a094:	1c43      	adds	r3, r0, #1
 800a096:	d102      	bne.n	800a09e <_sbrk_r+0x1a>
 800a098:	682b      	ldr	r3, [r5, #0]
 800a09a:	b103      	cbz	r3, 800a09e <_sbrk_r+0x1a>
 800a09c:	6023      	str	r3, [r4, #0]
 800a09e:	bd38      	pop	{r3, r4, r5, pc}
 800a0a0:	20004df0 	.word	0x20004df0

0800a0a4 <_write_r>:
 800a0a4:	b538      	push	{r3, r4, r5, lr}
 800a0a6:	4d07      	ldr	r5, [pc, #28]	@ (800a0c4 <_write_r+0x20>)
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	4608      	mov	r0, r1
 800a0ac:	4611      	mov	r1, r2
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	602a      	str	r2, [r5, #0]
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	f7f7 fbaf 	bl	8001816 <_write>
 800a0b8:	1c43      	adds	r3, r0, #1
 800a0ba:	d102      	bne.n	800a0c2 <_write_r+0x1e>
 800a0bc:	682b      	ldr	r3, [r5, #0]
 800a0be:	b103      	cbz	r3, 800a0c2 <_write_r+0x1e>
 800a0c0:	6023      	str	r3, [r4, #0]
 800a0c2:	bd38      	pop	{r3, r4, r5, pc}
 800a0c4:	20004df0 	.word	0x20004df0

0800a0c8 <_free_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4605      	mov	r5, r0
 800a0cc:	2900      	cmp	r1, #0
 800a0ce:	d041      	beq.n	800a154 <_free_r+0x8c>
 800a0d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0d4:	1f0c      	subs	r4, r1, #4
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	bfb8      	it	lt
 800a0da:	18e4      	addlt	r4, r4, r3
 800a0dc:	f7ff fe36 	bl	8009d4c <__malloc_lock>
 800a0e0:	4a1d      	ldr	r2, [pc, #116]	@ (800a158 <_free_r+0x90>)
 800a0e2:	6813      	ldr	r3, [r2, #0]
 800a0e4:	b933      	cbnz	r3, 800a0f4 <_free_r+0x2c>
 800a0e6:	6063      	str	r3, [r4, #4]
 800a0e8:	6014      	str	r4, [r2, #0]
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0f0:	f7ff be32 	b.w	8009d58 <__malloc_unlock>
 800a0f4:	42a3      	cmp	r3, r4
 800a0f6:	d908      	bls.n	800a10a <_free_r+0x42>
 800a0f8:	6820      	ldr	r0, [r4, #0]
 800a0fa:	1821      	adds	r1, r4, r0
 800a0fc:	428b      	cmp	r3, r1
 800a0fe:	bf01      	itttt	eq
 800a100:	6819      	ldreq	r1, [r3, #0]
 800a102:	685b      	ldreq	r3, [r3, #4]
 800a104:	1809      	addeq	r1, r1, r0
 800a106:	6021      	streq	r1, [r4, #0]
 800a108:	e7ed      	b.n	800a0e6 <_free_r+0x1e>
 800a10a:	461a      	mov	r2, r3
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	b10b      	cbz	r3, 800a114 <_free_r+0x4c>
 800a110:	42a3      	cmp	r3, r4
 800a112:	d9fa      	bls.n	800a10a <_free_r+0x42>
 800a114:	6811      	ldr	r1, [r2, #0]
 800a116:	1850      	adds	r0, r2, r1
 800a118:	42a0      	cmp	r0, r4
 800a11a:	d10b      	bne.n	800a134 <_free_r+0x6c>
 800a11c:	6820      	ldr	r0, [r4, #0]
 800a11e:	4401      	add	r1, r0
 800a120:	1850      	adds	r0, r2, r1
 800a122:	4283      	cmp	r3, r0
 800a124:	6011      	str	r1, [r2, #0]
 800a126:	d1e0      	bne.n	800a0ea <_free_r+0x22>
 800a128:	6818      	ldr	r0, [r3, #0]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	6053      	str	r3, [r2, #4]
 800a12e:	4408      	add	r0, r1
 800a130:	6010      	str	r0, [r2, #0]
 800a132:	e7da      	b.n	800a0ea <_free_r+0x22>
 800a134:	d902      	bls.n	800a13c <_free_r+0x74>
 800a136:	230c      	movs	r3, #12
 800a138:	602b      	str	r3, [r5, #0]
 800a13a:	e7d6      	b.n	800a0ea <_free_r+0x22>
 800a13c:	6820      	ldr	r0, [r4, #0]
 800a13e:	1821      	adds	r1, r4, r0
 800a140:	428b      	cmp	r3, r1
 800a142:	bf04      	itt	eq
 800a144:	6819      	ldreq	r1, [r3, #0]
 800a146:	685b      	ldreq	r3, [r3, #4]
 800a148:	6063      	str	r3, [r4, #4]
 800a14a:	bf04      	itt	eq
 800a14c:	1809      	addeq	r1, r1, r0
 800a14e:	6021      	streq	r1, [r4, #0]
 800a150:	6054      	str	r4, [r2, #4]
 800a152:	e7ca      	b.n	800a0ea <_free_r+0x22>
 800a154:	bd38      	pop	{r3, r4, r5, pc}
 800a156:	bf00      	nop
 800a158:	20004dec 	.word	0x20004dec

0800a15c <_init>:
 800a15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a15e:	bf00      	nop
 800a160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a162:	bc08      	pop	{r3}
 800a164:	469e      	mov	lr, r3
 800a166:	4770      	bx	lr

0800a168 <_fini>:
 800a168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16a:	bf00      	nop
 800a16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a16e:	bc08      	pop	{r3}
 800a170:	469e      	mov	lr, r3
 800a172:	4770      	bx	lr
